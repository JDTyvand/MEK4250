// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_1B96D7522823C14E084AE0FB9B8B8B3773762CA0_H
#define __FFC_FORM_1B96D7522823C14E084AE0FB9B8B8B3773762CA0_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 5, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 21; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[32];
    for (unsigned int r = 0; r < 32; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 5, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 42;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 42; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 42; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[64];
    for (unsigned int r = 0; r < 64; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 42; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 22:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 23:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 24:
      {
        y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 25:
      {
        y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 26:
      {
        y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 27:
      {
        y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 28:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 29:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 30:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 31:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 32:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 33:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 34:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 35:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 36:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 37:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 38:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 39:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 40:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 41:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[21];
    vertex_values[3] = dof_values[22];
    vertex_values[5] = dof_values[23];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 10; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 5, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None), **{'value_shape': (3,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 52;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, -0.00945067404923485, -0.00545634920634915, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257128, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454067, -0.00542394057003844};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973255, 0.00945067404923499, -0.00545634920634922, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257126, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205248, 0.00939454064454064, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0154328860973254, 0.0, 0.0109126984126983, 0.0, 0.0, 0.0405008224666531, 0.0, 0.0, 0.0, 0.0350747411302851, 0.0, 0.0, 0.0, 0.0, 0.0356497752093297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, 0.126008987323133, -0.0843253968253967, 0.101882916202598, -0.0286443719230662, 0.00202504112333267, 0.0773325352755858, -0.0261431684868418, 0.0, 0.00584579018838086, 0.0356497752093297, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0.0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, -0.0329341671412732, 0.121527777777778, -0.0113203240225109, 0.075410693430113, -0.0222754523566593, 0.0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0.0, 0.0565922636995451, -0.0093001207542422, -0.0401356942616295, 0.0415914044108846, 0.0, 0.0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.0887790592503891, -0.0892857142857141, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0.0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, -0.0308736109704842, -0.0118832584031099, 0.0, 0.0, 0.0, 0.0679184789949393, -0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.010023442173431, 0.151289682539682, 0.0, 0.0502737956200753, 0.093151891673302, 0.0, 0.0, 0.0506260280833163, 0.0643036920721894, 0.0, 0.0, 0.0, 0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, 0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302855, -0.126008987323133, -0.0843253968253967, 0.101882916202598, 0.0286443719230662, 0.00202504112333272, -0.0773325352755858, -0.0261431684868417, 0.0, 0.00584579018838081, 0.0356497752093296, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077748, 0.0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0329341671412733, 0.121527777777778, -0.0113203240225108, -0.0754106934301129, -0.0222754523566593, 0.0, 0.104572673947367, 0.101252056166633, 0.0584579018838086, 0.0, -0.0565922636995451, -0.00930012075424219, 0.0401356942616294, 0.0415914044108847, 0.0, 0.0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302849, -0.0887790592503889, -0.0892857142857143, 0.0301875307266957, -0.0432588473940183, -0.0594012062844244, 0.0, 0.0261431684868418, -0.101252056166633, -0.116915803767617, 0.0, 0.0, 0.074400966033938, 0.0308736109704842, -0.01188325840311, 0.0, 0.0, 0.0, 0.0679184789949392, 0.131523569023569, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.035074741130285, 0.0100234421734311, 0.151289682539683, 0.0, -0.0502737956200753, 0.093151891673302, 0.0, 0.0, -0.0506260280833164, 0.0643036920721894, 0.0, 0.0, 0.0, -0.0720384255977965, -0.0237665168062197, 0.0, 0.0, 0.0, 0.0, -0.0657617845117846, -0.0813591085505764};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431414, 0.0600762199922021, -0.00773325352755866, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767935, -0.012576058599899, 0.017271652829307, 0.0277862498734358, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410494, -0.0056367243867244, -0.00542394057003842};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302847, 0.121713226391662, -0.0322420634920636, -0.0671672558668979, -0.0321518460360947, 0.0276755620188795, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511957, -0.0565922636995451, -0.0332147169794367, 0.00926208329114528, 0.0202015392852869, -0.179891757560038, -0.0325436434202305, 0.0114803182994524, 0.00970263985641994, -0.00187890812890815, -0.00542394057003845};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302853, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171044, 0.0101252056166633, -0.0292289509419043, 0.0427797302511955, 0.0565922636995451, -0.0332147169794366, -0.00926208329114529, 0.0202015392852868, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641989, 0.00187890812890815, -0.0054239405700384};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302851, 0.136032429496564, -0.0669642857142856, 0.0369797251402022, -0.0789181675431414, 0.060076219992202, 0.00773325352755865, -0.0457505448519731, 0.0556886308916479, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852869, -0.0899458787800192, 0.0488154651303458, -0.0200905570240418, 0.00242565996410498, 0.0056367243867244, -0.00542394057003848};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, -0.214788046573522, -0.124007936507937, 0.0905625921800871, 0.116915803767617, 0.0, 0.154665070551172, 0.0784295054605252, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, -0.103322864695072, -0.0291079195692595, 0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302854, 0.0, -0.124007936507936, -0.38489101676537, 0.0, 0.101252056166633, 0.0, -0.104572673947367, 0.0, 0.0467663215070469, 0.213898651255978, 0.0, 0.140830399992811, 0.0, -0.0950660672248791, 0.0, 0.195261860521383, 0.0, -0.0582158391385195, 0.0, 0.0325436434202304};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.214788046573521, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0.0, -0.154665070551171, 0.0784295054605253, -0.101252056166633, 0.0818410626373318, -0.142599100837319, -0.0251521171997978, -0.0318861283002591, 0.107028518031012, -0.0950660672248791, 0.0, -0.130174573680922, 0.103322864695072, -0.0291079195692596, -0.0263047138047138, 0.0325436434202306};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302848, -0.107394023286761, 0.0620039682539685, 0.0113203240225107, -0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070466, 0.0, 0.169776791098635, 0.00930012075424221, 0.126581804978985, 0.172307246845093, 0.0, 0.0, 0.154984297042608, 0.101877718492409, -0.0394570707070707, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.0350747411302852, 0.107394023286761, 0.0620039682539682, 0.0113203240225109, 0.306903984889995, -0.253130140416582, 0.0, -0.104572673947367, 0.0, 0.0467663215070468, 0.0, -0.169776791098635, 0.00930012075424222, -0.126581804978985, 0.172307246845093, 0.0, 0.0, -0.154984297042608, 0.101877718492409, 0.0394570707070706, -0.0813591085505763};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[21] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[15] *= std::sqrt(33.0);
      
      // Table(s) of coefficients
      static const double coefficients0[21] = \
      {0.280597929042281, 0.0, 0.248015873015873, -0.0603750614533912, 0.0, 0.13500274155551, 0.0, -0.0522863369736834, 0.0, -0.210448446781711, 0.0, 0.0, -0.148801932067876, 0.0, -0.142599100837319, 0.0, 0.0, 0.0, -0.135836957989878, 0.0, 0.108478811400768};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 21; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 42:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435951, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 43:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 44:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 45:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731327, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 46:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 47:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 48:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 49:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 50:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 51:
      {
        
      // Array of basisvalues
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 10; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 52; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 52; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[96];
    for (unsigned int r = 0; r < 96; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 52; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 22:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 23:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 24:
      {
        y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 25:
      {
        y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 26:
      {
        y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 27:
      {
        y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 28:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 29:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 30:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 31:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 32:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 33:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 34:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 35:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 36:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 37:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 38:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 39:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 40:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 41:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 42:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 43:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 44:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 45:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 46:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 47:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 48:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 49:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 50:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 51:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[42] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[43] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[44] = vals[2];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[45] = vals[2];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[46] = vals[2];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[47] = vals[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[48] = vals[2];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[49] = vals[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[50] = vals[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[51] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[21];
    vertex_values[4] = dof_values[22];
    vertex_values[7] = dof_values[23];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[42];
    vertex_values[5] = dof_values[43];
    vertex_values[8] = dof_values[44];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 5, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + 4*num_global_entities[1] + 6*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 21;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 9;
        dofs[3] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 11;
        dofs[1] = 12;
        dofs[2] = 13;
        dofs[3] = 14;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 15;
      dofs[1] = 16;
      dofs[2] = 17;
      dofs[3] = 18;
      dofs[4] = 19;
      dofs[5] = 20;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[7] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[8] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[9] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[10] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[11] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[12] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    dof_coordinates[13] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    dof_coordinates[14] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    dof_coordinates[15] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    dof_coordinates[16] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    dof_coordinates[17] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    dof_coordinates[18] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    dof_coordinates[19] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    dof_coordinates[20] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    dof_coordinates[21] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    dof_coordinates[22] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    dof_coordinates[23] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    dof_coordinates[24] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    dof_coordinates[25] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    dof_coordinates[26] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    dof_coordinates[27] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    dof_coordinates[28] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    dof_coordinates[29] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    dof_coordinates[30] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[31] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[32] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[33] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[34] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[35] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[36] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[37] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[38] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[39] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[40] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[41] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 5, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 8*num_global_entities[1] + 12*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 42;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 8;
        break;
      }
    case 2:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
    dofs[21] = offset + c.entity_indices[0][0];
    dofs[22] = offset + c.entity_indices[0][1];
    dofs[23] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[24] = offset + 4*c.entity_indices[1][0];
    dofs[25] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[26] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[27] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[28] = offset + 4*c.entity_indices[1][1];
    dofs[29] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[30] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[31] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[32] = offset + 4*c.entity_indices[1][2];
    dofs[33] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[34] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[35] = offset + 4*c.entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[36] = offset + 6*c.entity_indices[2][0];
    dofs[37] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[38] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[39] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[40] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[41] = offset + 6*c.entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 22;
      dofs[7] = 23;
      dofs[8] = 24;
      dofs[9] = 25;
      dofs[10] = 26;
      dofs[11] = 27;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      dofs[6] = 21;
      dofs[7] = 23;
      dofs[8] = 28;
      dofs[9] = 29;
      dofs[10] = 30;
      dofs[11] = 31;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      dofs[6] = 21;
      dofs[7] = 22;
      dofs[8] = 32;
      dofs[9] = 33;
      dofs[10] = 34;
      dofs[11] = 35;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 21;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 22;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 23;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 24;
        dofs[5] = 25;
        dofs[6] = 26;
        dofs[7] = 27;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 9;
        dofs[3] = 10;
        dofs[4] = 28;
        dofs[5] = 29;
        dofs[6] = 30;
        dofs[7] = 31;
          break;
        }
      case 2:
        {
          dofs[0] = 11;
        dofs[1] = 12;
        dofs[2] = 13;
        dofs[3] = 14;
        dofs[4] = 32;
        dofs[5] = 33;
        dofs[6] = 34;
        dofs[7] = 35;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 15;
      dofs[1] = 16;
      dofs[2] = 17;
      dofs[3] = 18;
      dofs[4] = 19;
      dofs[5] = 20;
      dofs[6] = 36;
      dofs[7] = 37;
      dofs[8] = 38;
      dofs[9] = 39;
      dofs[10] = 40;
      dofs[11] = 41;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[7] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[8] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[9] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[10] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[11] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[12] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    dof_coordinates[13] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    dof_coordinates[14] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    dof_coordinates[15] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    dof_coordinates[16] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    dof_coordinates[17] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    dof_coordinates[18] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    dof_coordinates[19] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    dof_coordinates[20] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    dof_coordinates[21] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    dof_coordinates[22] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    dof_coordinates[23] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    dof_coordinates[24] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    dof_coordinates[25] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    dof_coordinates[26] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    dof_coordinates[27] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    dof_coordinates[28] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    dof_coordinates[29] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    dof_coordinates[30] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[31] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[32] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[33] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[34] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[35] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[36] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[37] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[38] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[39] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[40] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[41] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[42] = vertex_coordinates[0];
    dof_coordinates[43] = vertex_coordinates[1];
    dof_coordinates[44] = vertex_coordinates[2];
    dof_coordinates[45] = vertex_coordinates[3];
    dof_coordinates[46] = vertex_coordinates[4];
    dof_coordinates[47] = vertex_coordinates[5];
    dof_coordinates[48] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[49] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[50] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[51] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[52] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[53] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[54] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    dof_coordinates[55] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    dof_coordinates[56] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    dof_coordinates[57] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    dof_coordinates[58] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    dof_coordinates[59] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    dof_coordinates[60] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    dof_coordinates[61] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    dof_coordinates[62] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    dof_coordinates[63] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    dof_coordinates[64] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    dof_coordinates[65] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    dof_coordinates[66] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    dof_coordinates[67] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    dof_coordinates[68] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    dof_coordinates[69] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    dof_coordinates[70] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    dof_coordinates[71] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    dof_coordinates[72] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[73] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[74] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[75] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[76] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[77] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[78] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[79] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[80] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[81] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[82] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[83] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + 2*num_global_entities[1] + num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[7] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[8] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[9] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[10] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[11] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[12] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[13] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[14] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[15] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[16] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[17] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[18] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[19] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 5, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 3, None), **{'value_shape': (3,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 3*num_global_entities[0] + 10*num_global_entities[1] + 13*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 52;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 16;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 10;
        break;
      }
    case 2:
      {
        return 13;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
    dofs[21] = offset + c.entity_indices[0][0];
    dofs[22] = offset + c.entity_indices[0][1];
    dofs[23] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[24] = offset + 4*c.entity_indices[1][0];
    dofs[25] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[26] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[27] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[28] = offset + 4*c.entity_indices[1][1];
    dofs[29] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[30] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[31] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[32] = offset + 4*c.entity_indices[1][2];
    dofs[33] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[34] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[35] = offset + 4*c.entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[36] = offset + 6*c.entity_indices[2][0];
    dofs[37] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[38] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[39] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[40] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[41] = offset + 6*c.entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
    dofs[42] = offset + c.entity_indices[0][0];
    dofs[43] = offset + c.entity_indices[0][1];
    dofs[44] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[45] = offset + 2*c.entity_indices[1][0];
    dofs[46] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[47] = offset + 2*c.entity_indices[1][1];
    dofs[48] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[49] = offset + 2*c.entity_indices[1][2];
    dofs[50] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*num_global_entities[1];
    dofs[51] = offset + c.entity_indices[2][0];
    offset += num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 22;
      dofs[7] = 23;
      dofs[8] = 24;
      dofs[9] = 25;
      dofs[10] = 26;
      dofs[11] = 27;
      dofs[12] = 43;
      dofs[13] = 44;
      dofs[14] = 45;
      dofs[15] = 46;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      dofs[6] = 21;
      dofs[7] = 23;
      dofs[8] = 28;
      dofs[9] = 29;
      dofs[10] = 30;
      dofs[11] = 31;
      dofs[12] = 42;
      dofs[13] = 44;
      dofs[14] = 47;
      dofs[15] = 48;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      dofs[6] = 21;
      dofs[7] = 22;
      dofs[8] = 32;
      dofs[9] = 33;
      dofs[10] = 34;
      dofs[11] = 35;
      dofs[12] = 42;
      dofs[13] = 43;
      dofs[14] = 49;
      dofs[15] = 50;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 21;
        dofs[2] = 42;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 22;
        dofs[2] = 43;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 23;
        dofs[2] = 44;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 24;
        dofs[5] = 25;
        dofs[6] = 26;
        dofs[7] = 27;
        dofs[8] = 45;
        dofs[9] = 46;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 9;
        dofs[3] = 10;
        dofs[4] = 28;
        dofs[5] = 29;
        dofs[6] = 30;
        dofs[7] = 31;
        dofs[8] = 47;
        dofs[9] = 48;
          break;
        }
      case 2:
        {
          dofs[0] = 11;
        dofs[1] = 12;
        dofs[2] = 13;
        dofs[3] = 14;
        dofs[4] = 32;
        dofs[5] = 33;
        dofs[6] = 34;
        dofs[7] = 35;
        dofs[8] = 49;
        dofs[9] = 50;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 15;
      dofs[1] = 16;
      dofs[2] = 17;
      dofs[3] = 18;
      dofs[4] = 19;
      dofs[5] = 20;
      dofs[6] = 36;
      dofs[7] = 37;
      dofs[8] = 38;
      dofs[9] = 39;
      dofs[10] = 40;
      dofs[11] = 41;
      dofs[12] = 51;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[7] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[8] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[9] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[10] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[11] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[12] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    dof_coordinates[13] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    dof_coordinates[14] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    dof_coordinates[15] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    dof_coordinates[16] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    dof_coordinates[17] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    dof_coordinates[18] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    dof_coordinates[19] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    dof_coordinates[20] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    dof_coordinates[21] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    dof_coordinates[22] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    dof_coordinates[23] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    dof_coordinates[24] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    dof_coordinates[25] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    dof_coordinates[26] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    dof_coordinates[27] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    dof_coordinates[28] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    dof_coordinates[29] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    dof_coordinates[30] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[31] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[32] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[33] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[34] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[35] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[36] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[37] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[38] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[39] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[40] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[41] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[42] = vertex_coordinates[0];
    dof_coordinates[43] = vertex_coordinates[1];
    dof_coordinates[44] = vertex_coordinates[2];
    dof_coordinates[45] = vertex_coordinates[3];
    dof_coordinates[46] = vertex_coordinates[4];
    dof_coordinates[47] = vertex_coordinates[5];
    dof_coordinates[48] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[49] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[50] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[51] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[52] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[53] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[54] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    dof_coordinates[55] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    dof_coordinates[56] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    dof_coordinates[57] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    dof_coordinates[58] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    dof_coordinates[59] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    dof_coordinates[60] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    dof_coordinates[61] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    dof_coordinates[62] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    dof_coordinates[63] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    dof_coordinates[64] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    dof_coordinates[65] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    dof_coordinates[66] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    dof_coordinates[67] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    dof_coordinates[68] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    dof_coordinates[69] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    dof_coordinates[70] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    dof_coordinates[71] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    dof_coordinates[72] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[73] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[74] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[75] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[76] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[77] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[78] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[79] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[80] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[81] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[82] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[83] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[84] = vertex_coordinates[0];
    dof_coordinates[85] = vertex_coordinates[1];
    dof_coordinates[86] = vertex_coordinates[2];
    dof_coordinates[87] = vertex_coordinates[3];
    dof_coordinates[88] = vertex_coordinates[4];
    dof_coordinates[89] = vertex_coordinates[5];
    dof_coordinates[90] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[91] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[92] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[93] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[94] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[95] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[96] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[97] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[98] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[99] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[100] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[101] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[102] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[103] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    32
    // Number of operations (multiply-add pairs) for tensor contraction: 6707
    // Total number of operations (multiply-add pairs):                  6742
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*K[0]*K[0]*(1.0);
    const double G0_0_1 = det*K[0]*K[2]*(1.0);
    const double G0_1_0 = det*K[2]*K[0]*(1.0);
    const double G0_1_1 = det*K[2]*K[2]*(1.0);
    const double G1_0_0 = det*K[0]*K[0]*(1.0);
    const double G1_0_1 = det*K[0]*K[2]*(1.0);
    const double G1_1_0 = det*K[2]*K[0]*(1.0);
    const double G1_1_1 = det*K[2]*K[2]*(1.0);
    const double G2_0_0 = det*K[1]*K[1]*(1.0);
    const double G2_0_1 = det*K[1]*K[3]*(1.0);
    const double G2_1_0 = det*K[3]*K[1]*(1.0);
    const double G2_1_1 = det*K[3]*K[3]*(1.0);
    const double G3_0_0 = det*K[1]*K[1]*(1.0);
    const double G3_0_1 = det*K[1]*K[3]*(1.0);
    const double G3_1_0 = det*K[3]*K[1]*(1.0);
    const double G3_1_1 = det*K[3]*K[3]*(1.0);
    const double G4_0 = det*K[0]*(1.0);
    const double G4_1 = det*K[2]*(1.0);
    const double G5_0 = det*K[1]*(1.0);
    const double G5_1 = det*K[3]*(1.0);
    const double G6_ = det;
    const double G7_0 = det*K[0]*(1.0);
    const double G7_1 = det*K[2]*(1.0);
    const double G8_0 = det*K[1]*(1.0);
    const double G8_1 = det*K[3]*(1.0);
    
    // Compute element tensor
    A[0] = 0.342406580687844*G0_0_0 + 0.342406580687845*G0_0_1 + 0.342406580687845*G0_1_0 + 0.342406580687845*G0_1_1 + 0.342406580687844*G2_0_0 + 0.342406580687845*G2_0_1 + 0.342406580687845*G2_1_0 + 0.342406580687845*G2_1_1;
    A[1] = -0.0409984016754854*G0_0_0 - 0.0409984016754864*G0_1_0 - 0.0409984016754854*G2_0_0 - 0.0409984016754864*G2_1_0;
    A[2] = -0.0409984016754868*G0_0_1 - 0.0409984016754872*G0_1_1 - 0.0409984016754868*G2_0_1 - 0.0409984016754872*G2_1_1;
    A[3] = -0.0408192791005292*G0_0_0 - 0.0408192791005295*G0_0_1 - 0.0408192791005308*G0_1_0 - 0.0408192791005325*G0_1_1 - 0.0408192791005292*G2_0_0 - 0.0408192791005295*G2_0_1 - 0.0408192791005308*G2_1_0 - 0.0408192791005325*G2_1_1;
    A[4] = -0.0379774305555572*G0_0_0 - 0.0379774305555556*G0_0_1 - 0.0379774305555572*G0_1_0 - 0.0379774305555547*G0_1_1 - 0.0379774305555572*G2_0_0 - 0.0379774305555556*G2_0_1 - 0.0379774305555572*G2_1_0 - 0.0379774305555547*G2_1_1;
    A[5] = -0.0379774305555547*G0_0_0 - 0.0379774305555569*G0_0_1 - 0.0379774305555548*G0_1_0 - 0.0379774305555577*G0_1_1 - 0.0379774305555547*G2_0_0 - 0.0379774305555569*G2_0_1 - 0.0379774305555548*G2_1_0 - 0.0379774305555577*G2_1_1;
    A[6] = -0.0408192791005304*G0_0_0 - 0.0408192791005287*G0_0_1 - 0.0408192791005317*G0_1_0 - 0.0408192791005295*G0_1_1 - 0.0408192791005304*G2_0_0 - 0.0408192791005287*G2_0_1 - 0.0408192791005317*G2_1_0 - 0.0408192791005295*G2_1_1;
    A[7] = 0.20228794642858*G0_0_0 - 0.648027584876568*G0_0_1 + 0.202287946428581*G0_1_0 - 0.648027584876568*G0_1_1 + 0.20228794642858*G2_0_0 - 0.648027584876568*G2_0_1 + 0.202287946428581*G2_1_0 - 0.648027584876568*G2_1_1;
    A[8] = -0.0158454585537946*G0_0_0 + 0.594204695767216*G0_0_1 - 0.0158454585537932*G0_1_0 + 0.594204695767217*G0_1_1 - 0.0158454585537946*G2_0_0 + 0.594204695767216*G2_0_1 - 0.0158454585537932*G2_1_0 + 0.594204695767217*G2_1_1;
    A[9] = -0.0696683476631403*G0_0_0 - 0.44995935295416*G0_0_1 - 0.0696683476631404*G0_1_0 - 0.449959352954161*G0_1_1 - 0.0696683476631403*G2_0_0 - 0.44995935295416*G2_0_1 - 0.0696683476631404*G2_1_0 - 0.449959352954161*G2_1_1;
    A[10] = 0.0408192791005303*G0_0_0 + 0.202374063051154*G0_0_1 + 0.0408192791005316*G0_1_0 + 0.202374063051154*G0_1_1 + 0.0408192791005303*G2_0_0 + 0.202374063051154*G2_0_1 + 0.0408192791005316*G2_1_0 + 0.202374063051154*G2_1_1;
    A[11] = -0.648027584876568*G0_0_0 + 0.202287946428581*G0_0_1 - 0.648027584876569*G0_1_0 + 0.20228794642858*G0_1_1 - 0.648027584876568*G2_0_0 + 0.202287946428581*G2_0_1 - 0.648027584876569*G2_1_0 + 0.20228794642858*G2_1_1;
    A[12] = 0.594204695767216*G0_0_0 - 0.0158454585537941*G0_0_1 + 0.594204695767218*G0_1_0 - 0.0158454585537939*G0_1_1 + 0.594204695767216*G2_0_0 - 0.0158454585537941*G2_0_1 + 0.594204695767218*G2_1_0 - 0.0158454585537939*G2_1_1;
    A[13] = -0.44995935295416*G0_0_0 - 0.0696683476631409*G0_0_1 - 0.449959352954161*G0_1_0 - 0.0696683476631423*G0_1_1 - 0.44995935295416*G2_0_0 - 0.0696683476631409*G2_0_1 - 0.449959352954161*G2_1_0 - 0.0696683476631423*G2_1_1;
    A[14] = 0.202374063051153*G0_0_0 + 0.0408192791005288*G0_0_1 + 0.202374063051154*G0_1_0 + 0.0408192791005318*G0_1_1 + 0.202374063051153*G2_0_0 + 0.0408192791005288*G2_0_1 + 0.202374063051154*G2_1_0 + 0.0408192791005318*G2_1_1;
    A[15] = -0.215291556437402*G0_0_0 - 0.215291556437401*G0_0_1 - 0.215291556437403*G0_1_0 - 0.215291556437399*G0_1_1 - 0.215291556437402*G2_0_0 - 0.215291556437401*G2_0_1 - 0.215291556437403*G2_1_0 - 0.215291556437399*G2_1_1;
    A[16] = -0.0538228891093441*G0_0_0 - 0.0538228891093457*G0_0_1 - 0.0538228891093443*G0_1_0 - 0.053822889109345*G0_1_1 - 0.0538228891093441*G2_0_0 - 0.0538228891093457*G2_0_1 - 0.0538228891093443*G2_1_0 - 0.053822889109345*G2_1_1;
    A[17] = 0.107645778218695*G0_0_0 + 0.107645778218695*G0_0_1 + 0.107645778218697*G0_1_0 + 0.107645778218695*G0_1_1 + 0.107645778218695*G2_0_0 + 0.107645778218695*G2_0_1 + 0.107645778218697*G2_1_0 + 0.107645778218695*G2_1_1;
    A[18] = -0.0538228891093465*G0_0_0 - 0.0538228891093494*G0_0_1 - 0.0538228891093469*G0_1_0 - 0.0538228891093502*G0_1_1 - 0.0538228891093465*G2_0_0 - 0.0538228891093494*G2_0_1 - 0.0538228891093469*G2_1_0 - 0.0538228891093502*G2_1_1;
    A[19] = 0.107645778218698*G0_0_0 + 0.107645778218701*G0_0_1 + 0.107645778218697*G0_1_0 + 0.107645778218701*G0_1_1 + 0.107645778218698*G2_0_0 + 0.107645778218701*G2_0_1 + 0.107645778218697*G2_1_0 + 0.107645778218701*G2_1_1;
    A[20] = 0.107645778218695*G0_0_0 + 0.107645778218697*G0_0_1 + 0.107645778218695*G0_1_0 + 0.107645778218697*G0_1_1 + 0.107645778218695*G2_0_0 + 0.107645778218697*G2_0_1 + 0.107645778218695*G2_1_0 + 0.107645778218697*G2_1_1;
    A[21] = 0.0;
    A[22] = 0.0;
    A[23] = 0.0;
    A[24] = 0.0;
    A[25] = 0.0;
    A[26] = 0.0;
    A[27] = 0.0;
    A[28] = 0.0;
    A[29] = 0.0;
    A[30] = 0.0;
    A[31] = 0.0;
    A[32] = 0.0;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = -3.52678571428585*G4_0 - 3.52678571428585*G4_1;
    A[43] = -0.426587301587306*G4_0 - 0.426587301587321*G4_1;
    A[44] = -0.426587301587317*G4_0 - 0.426587301587322*G4_1;
    A[45] = -0.494791666666666*G4_0 - 0.494791666666678*G4_1;
    A[46] = -0.49479166666668*G4_0 - 0.494791666666691*G4_1;
    A[47] = -2.35491071428581*G4_0 - 2.35491071428581*G4_1;
    A[48] = 1.36532738095244*G4_0 + 1.36532738095242*G4_1;
    A[49] = -2.35491071428582*G4_0 - 2.3549107142858*G4_1;
    A[50] = 1.36532738095245*G4_0 + 1.36532738095244*G4_1;
    A[51] = 0.751488095238121*G4_0 + 0.751488095238094*G4_1;
    A[52] = -0.0409984016754854*G0_0_0 - 0.0409984016754864*G0_0_1 - 0.0409984016754854*G2_0_0 - 0.0409984016754864*G2_0_1;
    A[53] = 0.34240658068784*G0_0_0 + 0.34240658068784*G2_0_0;
    A[54] = 0.0409984016754865*G0_0_1 + 0.0409984016754865*G2_0_1;
    A[55] = 0.202287946428575*G0_0_0 + 0.850315531305139*G0_0_1 + 0.202287946428575*G2_0_0 + 0.850315531305139*G2_0_1;
    A[56] = -0.0158454585537928*G0_0_0 - 0.610050154321012*G0_0_1 - 0.0158454585537928*G2_0_0 - 0.610050154321012*G2_0_1;
    A[57] = -0.0696683476631408*G0_0_0 + 0.380291005291022*G0_0_1 - 0.0696683476631408*G2_0_0 + 0.380291005291022*G2_0_1;
    A[58] = 0.04081927910053*G0_0_0 - 0.161554783950626*G0_0_1 + 0.04081927910053*G2_0_0 - 0.161554783950626*G2_0_1;
    A[59] = -0.040819279100532*G0_0_0 - 0.040819279100532*G2_0_0;
    A[60] = -0.0379774305555567*G0_0_0 - 0.0379774305555567*G2_0_0;
    A[61] = -0.0379774305555565*G0_0_0 - 0.0379774305555565*G2_0_0;
    A[62] = -0.04081927910053*G0_0_0 - 0.04081927910053*G2_0_0;
    A[63] = 0.202374063051151*G0_0_0 + 0.16155478395062*G0_0_1 + 0.202374063051151*G2_0_0 + 0.16155478395062*G2_0_1;
    A[64] = -0.449959352954155*G0_0_0 - 0.380291005291012*G0_0_1 - 0.449959352954155*G2_0_0 - 0.380291005291012*G2_0_1;
    A[65] = 0.594204695767207*G0_0_0 + 0.610050154321001*G0_0_1 + 0.594204695767207*G2_0_0 + 0.610050154321001*G2_0_1;
    A[66] = -0.648027584876558*G0_0_0 - 0.85031553130514*G0_0_1 - 0.648027584876558*G2_0_0 - 0.85031553130514*G2_0_1;
    A[67] = 0.107645778218702*G0_0_0 + 0.107645778218702*G2_0_0;
    A[68] = -0.0538228891093546*G0_0_0 - 1.11014238708858e-14*G0_0_1 - 0.0538228891093546*G2_0_0 - 1.11014238708858e-14*G2_0_1;
    A[69] = -0.21529155643739*G0_0_0 + 1.31454143224982e-14*G0_0_1 - 0.21529155643739*G2_0_0 + 1.31454143224982e-14*G2_0_1;
    A[70] = 0.107645778218698*G0_0_0 + 0.107645778218698*G2_0_0;
    A[71] = -0.0538228891093489*G0_0_0 - 0.0538228891093489*G2_0_0;
    A[72] = 0.107645778218697*G0_0_0 + 0.107645778218697*G2_0_0;
    A[73] = 0.0;
    A[74] = 0.0;
    A[75] = 0.0;
    A[76] = 0.0;
    A[77] = 0.0;
    A[78] = 0.0;
    A[79] = 0.0;
    A[80] = 0.0;
    A[81] = 0.0;
    A[82] = 0.0;
    A[83] = 0.0;
    A[84] = 0.0;
    A[85] = 0.0;
    A[86] = 0.0;
    A[87] = 0.0;
    A[88] = 0.0;
    A[89] = 0.0;
    A[90] = 0.0;
    A[91] = 0.0;
    A[92] = 0.0;
    A[93] = 0.0;
    A[94] = 0.426587301587313*G4_0;
    A[95] = 3.52678571428582*G4_0;
    A[96] = 0.426587301587312*G4_0;
    A[97] = 2.35491071428577*G4_0;
    A[98] = -1.36532738095242*G4_0;
    A[99] = 0.494791666666689*G4_0;
    A[100] = 0.494791666666685*G4_0 + 1.8404990033843e-14*G4_1;
    A[101] = -1.36532738095242*G4_0 - 1.38366286696512e-14*G4_1;
    A[102] = 2.35491071428579*G4_0;
    A[103] = -0.751488095238122*G4_0 + 3.1156682708041e-14*G4_1;
    A[104] = -0.0409984016754869*G0_1_0 - 0.0409984016754872*G0_1_1 - 0.0409984016754869*G2_1_0 - 0.0409984016754872*G2_1_1;
    A[105] = 0.0409984016754865*G0_1_0 + 0.0409984016754865*G2_1_0;
    A[106] = 0.342406580687844*G0_1_1 + 0.342406580687844*G2_1_1;
    A[107] = -0.161554783950622*G0_1_0 + 0.0408192791005323*G0_1_1 - 0.161554783950622*G2_1_0 + 0.0408192791005323*G2_1_1;
    A[108] = 0.380291005291021*G0_1_0 - 0.0696683476631425*G0_1_1 + 0.380291005291021*G2_1_0 - 0.0696683476631425*G2_1_1;
    A[109] = -0.610050154321012*G0_1_0 - 0.0158454585537909*G0_1_1 - 0.610050154321012*G2_1_0 - 0.0158454585537909*G2_1_1;
    A[110] = 0.850315531305148*G0_1_0 + 0.202287946428577*G0_1_1 + 0.850315531305148*G2_1_0 + 0.202287946428577*G2_1_1;
    A[111] = 0.161554783950622*G0_1_0 + 0.202374063051155*G0_1_1 + 0.161554783950622*G2_1_0 + 0.202374063051155*G2_1_1;
    A[112] = -0.38029100529102*G0_1_0 - 0.449959352954163*G0_1_1 - 0.38029100529102*G2_1_0 - 0.449959352954163*G2_1_1;
    A[113] = 0.610050154321013*G0_1_0 + 0.594204695767222*G0_1_1 + 0.610050154321013*G2_1_0 + 0.594204695767222*G2_1_1;
    A[114] = -0.850315531305148*G0_1_0 - 0.64802758487657*G0_1_1 - 0.850315531305148*G2_1_0 - 0.64802758487657*G2_1_1;
    A[115] = -0.0408192791005325*G0_1_1 - 0.0408192791005325*G2_1_1;
    A[116] = -0.0379774305555576*G0_1_1 - 0.0379774305555576*G2_1_1;
    A[117] = -0.037977430555558*G0_1_1 - 0.037977430555558*G2_1_1;
    A[118] = -0.0408192791005314*G0_1_1 - 0.0408192791005314*G2_1_1;
    A[119] = 0.107645778218701*G0_1_1 + 0.107645778218701*G2_1_1;
    A[120] = 0.1076457782187*G0_1_1 + 0.1076457782187*G2_1_1;
    A[121] = 0.107645778218701*G0_1_1 + 0.107645778218701*G2_1_1;
    A[122] = -0.05382288910935*G0_1_1 - 0.05382288910935*G2_1_1;
    A[123] = -0.0538228891093543*G0_1_1 - 0.0538228891093543*G2_1_1;
    A[124] = -0.215291556437395*G0_1_1 - 0.215291556437395*G2_1_1;
    A[125] = 0.0;
    A[126] = 0.0;
    A[127] = 0.0;
    A[128] = 0.0;
    A[129] = 0.0;
    A[130] = 0.0;
    A[131] = 0.0;
    A[132] = 0.0;
    A[133] = 0.0;
    A[134] = 0.0;
    A[135] = 0.0;
    A[136] = 0.0;
    A[137] = 0.0;
    A[138] = 0.0;
    A[139] = 0.0;
    A[140] = 0.0;
    A[141] = 0.0;
    A[142] = 0.0;
    A[143] = 0.0;
    A[144] = 0.0;
    A[145] = 0.0;
    A[146] = 0.426587301587322*G4_1;
    A[147] = 0.426587301587321*G4_1;
    A[148] = 3.52678571428585*G4_1;
    A[149] = -1.36532738095241*G4_1;
    A[150] = 2.35491071428578*G4_1;
    A[151] = -1.36532738095241*G4_1;
    A[152] = 2.35491071428578*G4_1;
    A[153] = 0.494791666666707*G4_1;
    A[154] = 0.494791666666703*G4_1;
    A[155] = -0.751488095238091*G4_1;
    A[156] = -0.0408192791005292*G0_0_0 - 0.0408192791005308*G0_0_1 - 0.0408192791005295*G0_1_0 - 0.0408192791005325*G0_1_1 - 0.0408192791005292*G2_0_0 - 0.0408192791005308*G2_0_1 - 0.0408192791005295*G2_1_0 - 0.0408192791005325*G2_1_1;
    A[157] = 0.202287946428575*G0_0_0 + 0.850315531305139*G0_1_0 + 0.202287946428575*G2_0_0 + 0.850315531305139*G2_1_0;
    A[158] = -0.161554783950622*G0_0_1 + 0.0408192791005323*G0_1_1 - 0.161554783950622*G2_0_1 + 0.0408192791005323*G2_1_1;
    A[159] = 1.98929398148154*G0_0_0 + 1.2809847608025*G0_0_1 + 1.2809847608025*G0_1_0 + 2.56196952160501*G0_1_1 + 1.98929398148154*G2_0_0 + 1.2809847608025*G2_0_1 + 1.2809847608025*G2_1_0 + 2.56196952160501*G2_1_1;
    A[160] = -0.906377452601441*G0_0_0 + 0.796578758818366*G0_0_1 - 0.529617228835997*G0_1_0 - 1.39508928571434*G0_1_1 - 0.906377452601441*G2_0_0 + 0.796578758818366*G2_0_1 - 0.529617228835997*G2_1_0 - 1.39508928571434*G2_1_1;
    A[161] = 0.818107914462108*G0_0_0 - 0.482253086419768*G0_0_1 + 0.232514880952389*G0_1_0 + 0.895612874779583*G0_1_1 + 0.818107914462108*G2_0_0 - 0.482253086419768*G2_0_1 + 0.232514880952389*G2_1_0 + 0.895612874779583*G2_1_1;
    A[162] = -0.340160659171087*G0_0_0 + 0.329396081349214*G0_0_1 - 0.0710462136243397*G0_1_0 - 0.340160659171096*G0_1_1 - 0.340160659171087*G2_0_0 + 0.329396081349214*G2_0_1 - 0.0710462136243397*G2_1_0 - 0.340160659171096*G2_1_1;
    A[163] = 0.142092427248677*G0_0_0 + 0.0710462136243409*G0_0_1 + 0.0710462136243304*G0_1_0 + 0.142092427248677*G2_0_0 + 0.0710462136243409*G2_0_1 + 0.0710462136243304*G2_1_0;
    A[164] = 0.131327849426818*G0_0_0 + 0.0301408179012438*G0_0_1 + 0.0301408179012414*G0_1_0 + 0.131327849426818*G2_0_0 + 0.0301408179012438*G2_0_1 + 0.0301408179012414*G2_1_0;
    A[165] = 0.172233245149912*G0_0_0 + 0.0301408179012284*G0_0_1 + 0.0301408179012348*G0_1_0 + 0.172233245149912*G2_0_0 + 0.0301408179012284*G2_0_1 + 0.0301408179012348*G2_1_0;
    A[166] = 0.340160659171087*G0_0_0 + 0.0710462136243471*G0_0_1 + 0.0710462136243396*G0_1_0 + 0.340160659171087*G2_0_0 + 0.0710462136243471*G2_0_1 + 0.0710462136243396*G2_1_0;
    A[167] = 0.198068231922398*G0_0_0 + 0.269114445546733*G0_0_1 + 0.26911444554674*G0_1_0 + 0.34016065917107*G0_1_1 + 0.198068231922398*G2_0_0 + 0.269114445546733*G2_0_1 + 0.26911444554674*G2_1_0 + 0.34016065917107*G2_1_1;
    A[168] = -0.359536899250438*G0_0_0 - 0.66309799382717*G0_0_1 - 0.663097993827168*G0_1_0 - 0.895612874779553*G0_1_1 - 0.359536899250438*G2_0_0 - 0.66309799382717*G2_0_1 - 0.663097993827168*G2_1_0 - 0.895612874779553*G2_1_1;
    A[169] = 0.28633777006172*G0_0_0 + 0.865472056878325*G0_0_1 + 0.865472056878311*G0_1_0 + 1.39508928571431*G0_1_1 + 0.28633777006172*G2_0_0 + 0.865472056878325*G2_0_1 + 0.865472056878311*G2_1_0 + 1.39508928571431*G2_1_1;
    A[170] = -0.286337770061726*G0_0_0 - 1.2809847608025*G0_0_1 - 1.28098476080249*G0_1_0 - 2.56196952160502*G0_1_1 - 0.286337770061726*G2_0_0 - 1.2809847608025*G2_0_1 - 1.28098476080249*G2_1_0 - 2.56196952160502*G2_1_1;
    A[171] = -0.667403824955919*G0_0_0 - 0.262655698853611*G0_0_1 - 0.262655698853608*G0_1_0 + 2.14682872173855e-14*G0_1_1 - 0.667403824955919*G2_0_0 - 0.262655698853611*G2_0_1 - 0.262655698853608*G2_1_0 + 2.14682872173855e-14*G2_1_1;
    A[172] = 1.35633680555558*G0_0_0 + 0.57267554012345*G0_0_1 + 0.572675540123458*G0_1_0 - 3.36966511551434e-14*G0_1_1 + 1.35633680555558*G2_0_0 + 0.57267554012345*G2_0_1 + 0.572675540123458*G2_1_0 - 3.36966511551434e-14*G2_1_1;
    A[173] = -2.82031938932988*G0_0_0 - 1.66205081569668*G0_0_1 - 1.66205081569668*G0_1_0 + 4.43145411858914e-14*G0_1_1 - 2.82031938932988*G2_0_0 - 1.66205081569668*G2_0_1 - 1.66205081569668*G2_1_0 + 4.43145411858914e-14*G2_1_1;
    A[174] = -0.419818535052932*G0_0_0 - 0.0731991291887193*G0_0_1 - 0.0731991291887225*G0_1_0 - 0.419818535052932*G2_0_0 - 0.0731991291887193*G2_0_1 - 0.0731991291887225*G2_1_0;
    A[175] = 1.19486813822756*G0_0_0 + 0.572675540123477*G0_0_1 + 0.572675540123479*G0_1_0 + 1.19486813822756*G2_0_0 + 0.572675540123477*G2_0_1 + 0.572675540123479*G2_1_0;
    A[176] = -0.990341159612021*G0_0_0 - 0.262655698853624*G0_0_1 - 0.262655698853624*G0_1_0 - 0.990341159612021*G2_0_0 - 0.262655698853624*G2_0_1 - 0.262655698853624*G2_1_0;
    A[177] = 0.0;
    A[178] = 0.0;
    A[179] = 0.0;
    A[180] = 0.0;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = 0.0;
    A[184] = 0.0;
    A[185] = 0.0;
    A[186] = 0.0;
    A[187] = 0.0;
    A[188] = 0.0;
    A[189] = 0.0;
    A[190] = 0.0;
    A[191] = 0.0;
    A[192] = 0.0;
    A[193] = 0.0;
    A[194] = 0.0;
    A[195] = 0.0;
    A[196] = 0.0;
    A[197] = 0.0;
    A[198] = 0.96106150793655*G4_0 + 0.961061507936569*G4_1;
    A[199] = 5.76636904761923*G4_0 + 10.9126984126988*G4_1;
    A[200] = 0.0620039682539768*G4_0 + 0.961061507936555*G4_1;
    A[201] = 16.741071428572*G4_0 + 11.4397321428575*G4_1;
    A[202] = -4.3712797619049*G4_0 - 5.11532738095255*G4_1;
    A[203] = -1.86011904761911*G4_0 - 0.930059523809516*G4_1;
    A[204] = -3.44122023809536*G4_0 - 0.93005952380958*G4_1;
    A[205] = -4.18526785714295*G4_0 - 5.11532738095248*G4_1;
    A[206] = 8.37053571428597*G4_0 + 11.4397321428575*G4_1;
    A[207] = 7.99851190476219*G4_0 + 2.41815476190486*G4_1;
    A[208] = -0.0379774305555572*G0_0_0 - 0.0379774305555572*G0_0_1 - 0.0379774305555556*G0_1_0 - 0.0379774305555547*G0_1_1 - 0.0379774305555572*G2_0_0 - 0.0379774305555572*G2_0_1 - 0.0379774305555556*G2_1_0 - 0.0379774305555547*G2_1_1;
    A[209] = -0.0158454585537928*G0_0_0 - 0.610050154321012*G0_1_0 - 0.0158454585537928*G2_0_0 - 0.610050154321012*G2_1_0;
    A[210] = 0.380291005291021*G0_0_1 - 0.0696683476631425*G0_1_1 + 0.380291005291021*G2_0_1 - 0.0696683476631425*G2_1_1;
    A[211] = -0.906377452601441*G0_0_0 - 0.529617228835997*G0_0_1 + 0.796578758818366*G0_1_0 - 1.39508928571434*G0_1_1 - 0.906377452601441*G2_0_0 - 0.529617228835997*G2_0_1 + 0.796578758818366*G2_1_0 - 1.39508928571434*G2_1_1;
    A[212] = 3.07436342592603*G0_0_0 + 1.17549189814819*G0_0_1 + 1.17549189814819*G0_1_0 + 3.69440310846576*G0_1_1 + 3.07436342592603*G2_0_0 + 1.17549189814819*G2_0_1 + 1.17549189814819*G2_1_0 + 3.69440310846576*G2_1_1;
    A[213] = -1.80414324294539*G0_0_0 + 0.699697558421536*G0_0_1 - 0.350925236992963*G0_1_0 - 1.80414324294541*G0_1_1 - 1.80414324294539*G2_0_0 + 0.699697558421536*G2_0_1 - 0.350925236992963*G2_1_0 - 1.80414324294541*G2_1_1;
    A[214] = 0.895612874779579*G0_0_0 - 0.482253086419768*G0_0_1 + 0.232514880952391*G0_1_0 + 0.818107914462119*G0_1_1 + 0.895612874779579*G2_0_0 - 0.482253086419768*G2_0_1 + 0.232514880952391*G2_1_0 + 0.818107914462119*G2_1_1;
    A[215] = 0.131327849426816*G0_0_0 + 0.101187031525579*G0_0_1 + 0.101187031525586*G0_1_0 + 0.0710462136243403*G0_1_1 + 0.131327849426816*G2_0_0 + 0.101187031525579*G2_0_1 + 0.101187031525586*G2_1_0 + 0.0710462136243403*G2_1_1;
    A[216] = -0.297102347883613*G0_0_0 - 0.148551173941809*G0_0_1 - 0.14855117394181*G0_1_0 - 0.0172233245149936*G0_1_1 - 0.297102347883613*G2_0_0 - 0.148551173941809*G2_0_1 - 0.14855117394181*G2_1_0 - 0.0172233245149936*G2_1_1;
    A[217] = -0.219597387566138*G0_0_0 - 0.0624345513668359*G0_0_1 - 0.0624345513668458*G0_1_0 - 0.0172233245149878*G0_1_1 - 0.219597387566138*G2_0_0 - 0.0624345513668359*G2_0_1 - 0.0624345513668458*G2_1_0 - 0.0172233245149878*G2_1_1;
    A[218] = -0.895612874779579*G0_0_0 - 0.232514880952394*G0_0_1 - 0.232514880952391*G0_1_0 + 0.0710462136243408*G0_1_1 - 0.895612874779579*G2_0_0 - 0.232514880952394*G2_0_1 - 0.232514880952391*G2_1_0 + 0.0710462136243408*G2_1_1;
    A[219] = 0.111951609347447*G0_0_0 + 0.142092427248682*G0_0_1 + 0.142092427248679*G0_1_0 + 0.172233245149923*G0_1_1 + 0.111951609347447*G2_0_0 + 0.142092427248682*G2_0_1 + 0.142092427248679*G2_1_0 + 0.172233245149923*G2_1_1;
    A[220] = -0.111951609347446*G0_0_0 - 0.157162836199297*G0_0_1 - 0.157162836199294*G0_1_0 - 0.21959738756614*G0_1_1 - 0.111951609347446*G2_0_0 - 0.157162836199297*G2_0_1 - 0.157162836199294*G2_1_0 - 0.21959738756614*G2_1_1;
    A[221] = 0.103339947089953*G0_0_0 + 0.133480764991191*G0_0_1 + 0.133480764991188*G0_1_0 + 0.266961529982381*G0_1_1 + 0.103339947089953*G2_0_0 + 0.133480764991191*G2_0_1 + 0.133480764991188*G2_1_0 + 0.266961529982381*G2_1_1;
    A[222] = -0.0495170579806048*G0_0_0 + 0.529617228835998*G0_0_1 + 0.529617228835994*G0_1_0 + 1.39508928571435*G0_1_1 - 0.0495170579806048*G2_0_0 + 0.529617228835998*G2_0_1 + 0.529617228835994*G2_1_0 + 1.39508928571435*G2_1_1;
    A[223] = -0.344466490299831*G0_0_0 - 0.447806437389786*G0_0_1 - 0.447806437389783*G0_1_0 - 0.516699735449765*G0_1_1 - 0.344466490299831*G2_0_0 - 0.447806437389786*G2_0_1 - 0.447806437389783*G2_1_0 - 0.516699735449765*G2_1_1;
    A[224] = 0.387524801587309*G0_0_0 + 0.85901331018521*G0_0_1 + 0.859013310185201*G0_1_0 + 1.01187031525576*G0_1_1 + 0.387524801587309*G2_0_0 + 0.85901331018521*G2_0_1 + 0.859013310185201*G2_1_0 + 1.01187031525576*G2_1_1;
    A[225] = 0.73199129188715*G0_0_0 - 1.30897266313938*G0_0_1 - 1.30897266313937*G0_1_0 - 3.96136463844813*G0_1_1 + 0.73199129188715*G2_0_0 - 1.30897266313938*G2_0_1 - 1.30897266313937*G2_1_0 - 3.96136463844813*G2_1_1;
    A[226] = 1.03339947089951*G0_0_0 + 0.374607308201069*G0_0_1 + 0.374607308201078*G0_1_0 + 0.043058311287485*G0_1_1 + 1.03339947089951*G2_0_0 + 0.374607308201069*G2_0_1 + 0.374607308201078*G2_1_0 + 0.043058311287485*G2_1_1;
    A[227] = -3.81066054894193*G0_0_0 - 1.40154803240746*G0_0_1 - 1.40154803240746*G0_1_0 + 1.01187031525577*G0_1_1 - 3.81066054894193*G2_0_0 - 1.40154803240746*G2_0_1 - 1.40154803240746*G2_1_0 + 1.01187031525577*G2_1_1;
    A[228] = 2.02374063051153*G0_0_0 + 0.413359788359804*G0_0_1 + 0.413359788359809*G0_1_0 - 0.516699735449756*G0_1_1 + 2.02374063051153*G2_0_0 + 0.413359788359804*G2_0_1 + 0.413359788359809*G2_1_0 - 0.516699735449756*G2_1_1;
    A[229] = 0.0;
    A[230] = 0.0;
    A[231] = 0.0;
    A[232] = 0.0;
    A[233] = 0.0;
    A[234] = 0.0;
    A[235] = 0.0;
    A[236] = 0.0;
    A[237] = 0.0;
    A[238] = 0.0;
    A[239] = 0.0;
    A[240] = 0.0;
    A[241] = 0.0;
    A[242] = 0.0;
    A[243] = 0.0;
    A[244] = 0.0;
    A[245] = 0.0;
    A[246] = 0.0;
    A[247] = 0.0;
    A[248] = 0.0;
    A[249] = 0.0;
    A[250] = 0.589037698412718*G4_0 + 0.589037698412686*G4_1;
    A[251] = -3.90625000000014*G4_0 - 6.57242063492092*G4_1;
    A[252] = 2.7281746031747*G4_0 + 1.2090773809524*G4_1;
    A[253] = 12.555803571429*G4_0 + 18.787202380953*G4_1;
    A[254] = 1.1160714285715*G4_0 - 0.930059523809507*G4_1;
    A[255] = -1.39508928571434*G4_0 - 1.39508928571439*G4_1;
    A[256] = 6.69642857142883*G4_0 + 2.32514880952394*G4_1;
    A[257] = -0.930059523809587*G4_0 - 0.930059523809657*G4_1;
    A[258] = -2.32514880952393*G4_0 - 5.39434523809554*G4_1;
    A[259] = 2.2321428571429*G4_0 + 9.67261904761924*G4_1;
    A[260] = -0.0379774305555547*G0_0_0 - 0.0379774305555548*G0_0_1 - 0.0379774305555569*G0_1_0 - 0.0379774305555577*G0_1_1 - 0.0379774305555547*G2_0_0 - 0.0379774305555548*G2_0_1 - 0.0379774305555569*G2_1_0 - 0.0379774305555577*G2_1_1;
    A[261] = -0.0696683476631408*G0_0_0 + 0.380291005291022*G0_1_0 - 0.0696683476631408*G2_0_0 + 0.380291005291022*G2_1_0;
    A[262] = -0.610050154321012*G0_0_1 - 0.0158454585537909*G0_1_1 - 0.610050154321012*G2_0_1 - 0.0158454585537909*G2_1_1;
    A[263] = 0.818107914462108*G0_0_0 + 0.232514880952389*G0_0_1 - 0.482253086419768*G0_1_0 + 0.895612874779583*G0_1_1 + 0.818107914462108*G2_0_0 + 0.232514880952389*G2_0_1 - 0.482253086419768*G2_1_0 + 0.895612874779583*G2_1_1;
    A[264] = -1.80414324294539*G0_0_0 - 0.350925236992963*G0_0_1 + 0.699697558421536*G0_1_0 - 1.80414324294541*G0_1_1 - 1.80414324294539*G2_0_0 - 0.350925236992963*G2_0_1 + 0.699697558421536*G2_1_0 - 1.80414324294541*G2_1_1;
    A[265] = 3.69440310846573*G0_0_0 + 1.17549189814818*G0_0_1 + 1.17549189814818*G0_1_0 + 3.07436342592604*G0_1_1 + 3.69440310846573*G2_0_0 + 1.17549189814818*G2_0_1 + 1.17549189814818*G2_1_0 + 3.07436342592604*G2_1_1;
    A[266] = -1.39508928571434*G0_0_0 + 0.796578758818368*G0_0_1 - 0.529617228835997*G0_1_0 - 0.906377452601453*G0_1_1 - 1.39508928571434*G2_0_0 + 0.796578758818368*G2_0_1 - 0.529617228835997*G2_1_0 - 0.906377452601453*G2_1_1;
    A[267] = 0.172233245149908*G0_0_0 + 0.14209242724867*G0_0_1 + 0.142092427248669*G0_1_0 + 0.111951609347442*G0_1_1 + 0.172233245149908*G2_0_0 + 0.14209242724867*G2_0_1 + 0.142092427248669*G2_1_0 + 0.111951609347442*G2_1_1;
    A[268] = -0.219597387566132*G0_0_0 - 0.157162836199279*G0_0_1 - 0.157162836199287*G0_1_0 - 0.111951609347434*G0_1_1 - 0.219597387566132*G2_0_0 - 0.157162836199279*G2_0_1 - 0.157162836199287*G2_1_0 - 0.111951609347434*G2_1_1;
    A[269] = 0.266961529982354*G0_0_0 + 0.133480764991168*G0_0_1 + 0.133480764991178*G0_1_0 + 0.103339947089942*G0_1_1 + 0.266961529982354*G2_0_0 + 0.133480764991168*G2_0_1 + 0.133480764991178*G2_1_0 + 0.103339947089942*G2_1_1;
    A[270] = 1.39508928571434*G0_0_0 + 0.52961722883601*G0_0_1 + 0.529617228835997*G0_1_0 - 0.049517057980597*G0_1_1 + 1.39508928571434*G2_0_0 + 0.52961722883601*G2_0_1 + 0.529617228835997*G2_1_0 - 0.049517057980597*G2_1_1;
    A[271] = 0.0710462136243352*G0_0_0 + 0.101187031525573*G0_0_1 + 0.101187031525574*G0_1_0 + 0.131327849426802*G0_1_1 + 0.0710462136243352*G2_0_0 + 0.101187031525573*G2_0_1 + 0.101187031525574*G2_1_0 + 0.131327849426802*G2_1_1;
    A[272] = -0.017223324514988*G0_0_0 - 0.148551173941802*G0_0_1 - 0.148551173941803*G0_1_0 - 0.297102347883608*G0_1_1 - 0.017223324514988*G2_0_0 - 0.148551173941802*G2_0_1 - 0.148551173941803*G2_1_0 - 0.297102347883608*G2_1_1;
    A[273] = -0.0172233245149941*G0_0_0 - 0.06243455136685*G0_0_1 - 0.062434551366849*G0_1_0 - 0.219597387566153*G0_1_1 - 0.0172233245149941*G2_0_0 - 0.06243455136685*G2_0_1 - 0.062434551366849*G2_1_0 - 0.219597387566153*G2_1_1;
    A[274] = 0.0710462136243425*G0_0_0 - 0.23251488095239*G0_0_1 - 0.232514880952387*G0_1_0 - 0.895612874779584*G0_1_1 + 0.0710462136243425*G2_0_0 - 0.23251488095239*G2_0_1 - 0.232514880952387*G2_1_0 - 0.895612874779584*G2_1_1;
    A[275] = -0.516699735449737*G0_0_0 - 0.447806437389781*G0_0_1 - 0.44780643738977*G0_1_0 - 0.344466490299817*G0_1_1 - 0.516699735449737*G2_0_0 - 0.447806437389781*G2_0_1 - 0.44780643738977*G2_1_0 - 0.344466490299817*G2_1_1;
    A[276] = 0.043058311287468*G0_0_0 + 0.374607308201065*G0_0_1 + 0.374607308201064*G0_1_0 + 1.03339947089949*G0_1_1 + 0.043058311287468*G2_0_0 + 0.374607308201065*G2_0_1 + 0.374607308201064*G2_1_0 + 1.03339947089949*G2_1_1;
    A[277] = -0.516699735449747*G0_0_0 + 0.413359788359819*G0_0_1 + 0.413359788359806*G0_1_0 + 2.02374063051156*G0_1_1 - 0.516699735449747*G2_0_0 + 0.413359788359819*G2_0_1 + 0.413359788359806*G2_1_0 + 2.02374063051156*G2_1_1;
    A[278] = 1.01187031525575*G0_0_0 + 0.859013310185202*G0_0_1 + 0.859013310185189*G0_1_0 + 0.387524801587298*G0_1_1 + 1.01187031525575*G2_0_0 + 0.859013310185202*G2_0_1 + 0.859013310185189*G2_1_0 + 0.387524801587298*G2_1_1;
    A[279] = 1.01187031525578*G0_0_0 - 1.40154803240745*G0_0_1 - 1.40154803240744*G0_1_0 - 3.81066054894193*G0_1_1 + 1.01187031525578*G2_0_0 - 1.40154803240745*G2_0_1 - 1.40154803240744*G2_1_0 - 3.81066054894193*G2_1_1;
    A[280] = -3.96136463844809*G0_0_0 - 1.30897266313936*G0_0_1 - 1.30897266313936*G0_1_0 + 0.731991291887165*G0_1_1 - 3.96136463844809*G2_0_0 - 1.30897266313936*G2_0_1 - 1.30897266313936*G2_1_0 + 0.731991291887165*G2_1_1;
    A[281] = 0.0;
    A[282] = 0.0;
    A[283] = 0.0;
    A[284] = 0.0;
    A[285] = 0.0;
    A[286] = 0.0;
    A[287] = 0.0;
    A[288] = 0.0;
    A[289] = 0.0;
    A[290] = 0.0;
    A[291] = 0.0;
    A[292] = 0.0;
    A[293] = 0.0;
    A[294] = 0.0;
    A[295] = 0.0;
    A[296] = 0.0;
    A[297] = 0.0;
    A[298] = 0.0;
    A[299] = 0.0;
    A[300] = 0.0;
    A[301] = 0.0;
    A[302] = 0.589037698412701*G4_0 + 0.589037698412741*G4_1;
    A[303] = 1.20907738095243*G4_0 + 2.72817460317476*G4_1;
    A[304] = -6.57242063492088*G4_0 - 3.9062500000001*G4_1;
    A[305] = -0.930059523809561*G4_0 + 1.1160714285715*G4_1;
    A[306] = 18.787202380953*G4_0 + 12.5558035714289*G4_1;
    A[307] = -0.930059523809504*G4_0 - 0.93005952380948*G4_1;
    A[308] = -5.39434523809543*G4_0 - 2.32514880952393*G4_1;
    A[309] = -1.39508928571432*G4_0 - 1.39508928571425*G4_1;
    A[310] = 2.32514880952392*G4_0 + 6.69642857142892*G4_1;
    A[311] = 9.67261904761937*G4_0 + 2.23214285714307*G4_1;
    A[312] = -0.0408192791005304*G0_0_0 - 0.0408192791005317*G0_0_1 - 0.0408192791005287*G0_1_0 - 0.0408192791005294*G0_1_1 - 0.0408192791005304*G2_0_0 - 0.0408192791005317*G2_0_1 - 0.0408192791005287*G2_1_0 - 0.0408192791005294*G2_1_1;
    A[313] = 0.04081927910053*G0_0_0 - 0.161554783950626*G0_1_0 + 0.04081927910053*G2_0_0 - 0.161554783950626*G2_1_0;
    A[314] = 0.850315531305148*G0_0_1 + 0.202287946428577*G0_1_1 + 0.850315531305148*G2_0_1 + 0.202287946428577*G2_1_1;
    A[315] = -0.340160659171087*G0_0_0 - 0.0710462136243397*G0_0_1 + 0.329396081349214*G0_1_0 - 0.340160659171096*G0_1_1 - 0.340160659171087*G2_0_0 - 0.0710462136243397*G2_0_1 + 0.329396081349214*G2_1_0 - 0.340160659171096*G2_1_1;
    A[316] = 0.895612874779579*G0_0_0 + 0.232514880952391*G0_0_1 - 0.482253086419768*G0_1_0 + 0.818107914462119*G0_1_1 + 0.895612874779579*G2_0_0 + 0.232514880952391*G2_0_1 - 0.482253086419768*G2_1_0 + 0.818107914462119*G2_1_1;
    A[317] = -1.39508928571434*G0_0_0 - 0.529617228835997*G0_0_1 + 0.796578758818368*G0_1_0 - 0.906377452601453*G0_1_1 - 1.39508928571434*G2_0_0 - 0.529617228835997*G2_0_1 + 0.796578758818368*G2_1_0 - 0.906377452601453*G2_1_1;
    A[318] = 2.56196952160504*G0_0_0 + 1.28098476080252*G0_0_1 + 1.28098476080252*G0_1_0 + 1.98929398148156*G0_1_1 + 2.56196952160504*G2_0_0 + 1.28098476080252*G2_0_1 + 1.28098476080252*G2_1_0 + 1.98929398148156*G2_1_1;
    A[319] = 0.34016065917109*G0_0_0 + 0.269114445546751*G0_0_1 + 0.269114445546749*G0_1_0 + 0.198068231922404*G0_1_1 + 0.34016065917109*G2_0_0 + 0.269114445546751*G2_0_1 + 0.269114445546749*G2_1_0 + 0.198068231922404*G2_1_1;
    A[320] = -0.89561287477958*G0_0_0 - 0.663097993827194*G0_0_1 - 0.663097993827185*G0_1_0 - 0.359536899250453*G0_1_1 - 0.89561287477958*G2_0_0 - 0.663097993827194*G2_0_1 - 0.663097993827185*G2_1_0 - 0.359536899250453*G2_1_1;
    A[321] = 1.39508928571435*G0_0_0 + 0.865472056878352*G0_0_1 + 0.865472056878341*G0_1_0 + 0.286337770061742*G0_1_1 + 1.39508928571435*G2_0_0 + 0.865472056878352*G2_0_1 + 0.865472056878341*G2_1_0 + 0.286337770061742*G2_1_1;
    A[322] = -2.56196952160504*G0_0_0 - 1.28098476080252*G0_0_1 - 1.28098476080252*G0_1_0 - 0.286337770061739*G0_1_1 - 2.56196952160504*G2_0_0 - 1.28098476080252*G2_0_1 - 1.28098476080252*G2_1_0 - 0.286337770061739*G2_1_1;
    A[323] = 0.0710462136243403*G0_0_1 + 0.0710462136243392*G0_1_0 + 0.142092427248686*G0_1_1 + 0.0710462136243403*G2_0_1 + 0.0710462136243392*G2_1_0 + 0.142092427248686*G2_1_1;
    A[324] = 0.0301408179012369*G0_0_1 + 0.0301408179012378*G0_1_0 + 0.131327849426818*G0_1_1 + 0.0301408179012369*G2_0_1 + 0.0301408179012378*G2_1_0 + 0.131327849426818*G2_1_1;
    A[325] = 0.0301408179012347*G0_0_1 + 0.0301408179012347*G0_1_0 + 0.172233245149919*G0_1_1 + 0.0301408179012347*G2_0_1 + 0.0301408179012347*G2_1_0 + 0.172233245149919*G2_1_1;
    A[326] = 0.0710462136243432*G0_0_1 + 0.0710462136243427*G0_1_0 + 0.340160659171099*G0_1_1 + 0.0710462136243432*G2_0_1 + 0.0710462136243427*G2_1_0 + 0.340160659171099*G2_1_1;
    A[327] = -0.262655698853627*G0_0_1 - 0.262655698853623*G0_1_0 - 0.66740382495594*G0_1_1 - 0.262655698853627*G2_0_1 - 0.262655698853623*G2_1_0 - 0.66740382495594*G2_1_1;
    A[328] = -0.0731991291887099*G0_0_1 - 0.0731991291887152*G0_1_0 - 0.419818535052922*G0_1_1 - 0.0731991291887099*G2_0_1 - 0.0731991291887152*G2_1_0 - 0.419818535052922*G2_1_1;
    A[329] = -0.262655698853625*G0_0_1 - 0.262655698853625*G0_1_0 - 0.990341159612035*G0_1_1 - 0.262655698853625*G2_0_1 - 0.262655698853625*G2_1_0 - 0.990341159612035*G2_1_1;
    A[330] = 1.08940634291343e-14*G0_0_0 + 0.572675540123477*G0_0_1 + 0.572675540123482*G0_1_0 + 1.35633680555561*G0_1_1 + 1.08940634291343e-14*G2_0_0 + 0.572675540123477*G2_0_1 + 0.572675540123482*G2_1_0 + 1.35633680555561*G2_1_1;
    A[331] = -1.18446918939696e-14*G0_0_0 + 0.57267554012346*G0_0_1 + 0.572675540123471*G0_1_0 + 1.19486813822754*G0_1_1 - 1.18446918939696e-14*G2_0_0 + 0.57267554012346*G2_0_1 + 0.572675540123471*G2_1_0 + 1.19486813822754*G2_1_1;
    A[332] = -1.66205081569671*G0_0_1 - 1.66205081569671*G0_1_0 - 2.8203193893299*G0_1_1 - 1.66205081569671*G2_0_1 - 1.66205081569671*G2_1_0 - 2.8203193893299*G2_1_1;
    A[333] = 0.0;
    A[334] = 0.0;
    A[335] = 0.0;
    A[336] = 0.0;
    A[337] = 0.0;
    A[338] = 0.0;
    A[339] = 0.0;
    A[340] = 0.0;
    A[341] = 0.0;
    A[342] = 0.0;
    A[343] = 0.0;
    A[344] = 0.0;
    A[345] = 0.0;
    A[346] = 0.0;
    A[347] = 0.0;
    A[348] = 0.0;
    A[349] = 0.0;
    A[350] = 0.0;
    A[351] = 0.0;
    A[352] = 0.0;
    A[353] = 0.0;
    A[354] = 0.961061507936543*G4_0 + 0.961061507936513*G4_1;
    A[355] = 0.961061507936547*G4_0 + 0.0620039682539317*G4_1;
    A[356] = 10.9126984126988*G4_0 + 5.76636904761923*G4_1;
    A[357] = -5.11532738095258*G4_0 - 4.37127976190499*G4_1;
    A[358] = 11.4397321428576*G4_0 + 16.7410714285721*G4_1;
    A[359] = -5.11532738095258*G4_0 - 4.18526785714305*G4_1;
    A[360] = 11.4397321428576*G4_0 + 8.37053571428604*G4_1;
    A[361] = -0.930059523809572*G4_0 - 1.86011904761919*G4_1;
    A[362] = -0.930059523809557*G4_0 - 3.44122023809546*G4_1;
    A[363] = 2.41815476190488*G4_0 + 7.99851190476199*G4_1;
    A[364] = 0.20228794642858*G0_0_0 + 0.202287946428581*G0_0_1 - 0.648027584876568*G0_1_0 - 0.648027584876568*G0_1_1 + 0.20228794642858*G2_0_0 + 0.202287946428581*G2_0_1 - 0.648027584876568*G2_1_0 - 0.648027584876568*G2_1_1;
    A[365] = -0.040819279100532*G0_0_0 - 0.040819279100532*G2_0_0;
    A[366] = 0.161554783950622*G0_0_1 + 0.202374063051155*G0_1_1 + 0.161554783950622*G2_0_1 + 0.202374063051155*G2_1_1;
    A[367] = 0.142092427248677*G0_0_0 + 0.0710462136243304*G0_0_1 + 0.0710462136243409*G0_1_0 + 0.142092427248677*G2_0_0 + 0.0710462136243304*G2_0_1 + 0.0710462136243409*G2_1_0;
    A[368] = 0.131327849426816*G0_0_0 + 0.101187031525586*G0_0_1 + 0.101187031525579*G0_1_0 + 0.0710462136243403*G0_1_1 + 0.131327849426816*G2_0_0 + 0.101187031525586*G2_0_1 + 0.101187031525579*G2_1_0 + 0.0710462136243403*G2_1_1;
    A[369] = 0.172233245149908*G0_0_0 + 0.142092427248669*G0_0_1 + 0.14209242724867*G0_1_0 + 0.111951609347442*G0_1_1 + 0.172233245149908*G2_0_0 + 0.142092427248669*G2_0_1 + 0.14209242724867*G2_1_0 + 0.111951609347442*G2_1_1;
    A[370] = 0.34016065917109*G0_0_0 + 0.269114445546749*G0_0_1 + 0.269114445546751*G0_1_0 + 0.198068231922404*G0_1_1 + 0.34016065917109*G2_0_0 + 0.269114445546749*G2_0_1 + 0.269114445546751*G2_1_0 + 0.198068231922404*G2_1_1;
    A[371] = 1.98929398148155*G0_0_0 + 0.708309220679037*G0_0_1 + 0.708309220679037*G0_1_0 + 1.98929398148155*G0_1_1 + 1.98929398148155*G2_0_0 + 0.708309220679037*G2_0_1 + 0.708309220679037*G2_1_0 + 1.98929398148155*G2_1_1;
    A[372] = -0.906377452601436*G0_0_0 - 1.70295621141981*G0_0_1 - 0.37676022376544*G0_1_0 - 2.56842826829815*G0_1_1 - 0.906377452601436*G2_0_0 - 1.70295621141981*G2_0_1 - 0.37676022376544*G2_1_0 - 2.56842826829815*G2_1_1;
    A[373] = 0.818107914462106*G0_0_0 + 1.30036100088188*G0_0_1 + 0.585593033509717*G0_1_0 + 1.96345899470906*G0_1_1 + 0.818107914462106*G2_0_0 + 1.30036100088188*G2_0_1 + 0.585593033509717*G2_1_0 + 1.96345899470906*G2_1_1;
    A[374] = -0.34016065917109*G0_0_0 - 0.669556740520308*G0_0_1 - 0.269114445546751*G0_1_0 - 0.938671186067055*G0_1_1 - 0.34016065917109*G2_0_0 - 0.669556740520308*G2_0_1 - 0.269114445546751*G2_1_0 - 0.938671186067055*G2_1_1;
    A[375] = -0.286337770061744*G0_0_0 + 0.994646990740774*G0_0_1 + 0.994646990740779*G0_1_0 - 0.286337770061737*G0_1_1 - 0.286337770061744*G2_0_0 + 0.994646990740774*G2_0_1 + 0.994646990740779*G2_1_0 - 0.286337770061737*G2_1_1;
    A[376] = 0.286337770061744*G0_0_0 - 0.579134286816594*G0_0_1 - 0.5791342868166*G0_1_0 - 0.0495170579805984*G0_1_1 + 0.286337770061744*G2_0_0 - 0.579134286816594*G2_0_1 - 0.5791342868166*G2_1_0 - 0.0495170579805984*G2_1_1;
    A[377] = -0.359536899250458*G0_0_0 + 0.303561094576729*G0_0_1 + 0.303561094576731*G0_1_0 + 0.0710462136243458*G0_1_1 - 0.359536899250458*G2_0_0 + 0.303561094576729*G2_0_1 + 0.303561094576731*G2_1_0 + 0.0710462136243458*G2_1_1;
    A[378] = 0.198068231922409*G0_0_0 - 0.0710462136243352*G0_0_1 - 0.071046213624343*G0_1_0 + 0.198068231922409*G2_0_0 - 0.0710462136243352*G2_0_1 - 0.071046213624343*G2_1_0;
    A[379] = -2.82031938932991*G0_0_0 - 1.15826857363319*G0_0_1 - 1.15826857363319*G0_1_0 + 0.503782242063511*G0_1_1 - 2.82031938932991*G2_0_0 - 1.15826857363319*G2_0_1 - 1.15826857363319*G2_1_0 + 0.503782242063511*G2_1_1;
    A[380] = 1.35633680555561*G0_0_0 + 0.783661265432122*G0_0_1 + 0.783661265432123*G0_1_0 + 0.210985725308642*G0_1_1 + 1.35633680555561*G2_0_0 + 0.783661265432122*G2_0_1 + 0.783661265432123*G2_1_0 + 0.210985725308642*G2_1_1;
    A[381] = -0.667403824955926*G0_0_0 - 0.404748126102312*G0_0_1 - 0.404748126102308*G0_1_0 - 0.142092427248682*G0_1_1 - 0.667403824955926*G2_0_0 - 0.404748126102312*G2_0_1 - 0.404748126102308*G2_1_0 - 0.142092427248682*G2_1_1;
    A[382] = 1.19486813822755*G0_0_0 + 0.622192598104066*G0_0_1 + 0.622192598104068*G0_1_0 + 0.0495170579805985*G0_1_1 + 1.19486813822755*G2_0_0 + 0.622192598104066*G2_0_1 + 0.622192598104068*G2_1_0 + 0.0495170579805985*G2_1_1;
    A[383] = -0.419818535052927*G0_0_0 - 0.346619405864193*G0_0_1 - 0.346619405864206*G0_1_0 - 0.273420276675492*G0_1_1 - 0.419818535052927*G2_0_0 - 0.346619405864193*G2_0_1 - 0.346619405864206*G2_1_0 - 0.273420276675492*G2_1_1;
    A[384] = -0.990341159612012*G0_0_0 - 0.727685460758396*G0_0_1 - 0.727685460758387*G0_1_0 - 0.465029761904772*G0_1_1 - 0.990341159612012*G2_0_0 - 0.727685460758396*G2_0_1 - 0.727685460758387*G2_1_0 - 0.465029761904772*G2_1_1;
    A[385] = 0.0;
    A[386] = 0.0;
    A[387] = 0.0;
    A[388] = 0.0;
    A[389] = 0.0;
    A[390] = 0.0;
    A[391] = 0.0;
    A[392] = 0.0;
    A[393] = 0.0;
    A[394] = 0.0;
    A[395] = 0.0;
    A[396] = 0.0;
    A[397] = 0.0;
    A[398] = 0.0;
    A[399] = 0.0;
    A[400] = 0.0;
    A[401] = 0.0;
    A[402] = 0.0;
    A[403] = 0.0;
    A[404] = 0.0;
    A[405] = 0.0;
    A[406] = -5.76636904761925*G4_0 + 5.14632936507955*G4_1;
    A[407] = -0.96106150793657*G4_0;
    A[408] = -0.0620039682539744*G4_0 + 0.899057539682581*G4_1;
    A[409] = 1.86011904761909*G4_0 + 0.930059523809538*G4_1;
    A[410] = 3.44122023809531*G4_0 + 2.51116071428579*G4_1;
    A[411] = -16.7410714285721*G4_0 - 5.3013392857145*G4_1;
    A[412] = 4.37127976190494*G4_0 - 0.744047619047603*G4_1;
    A[413] = -8.37053571428601*G4_0 + 3.06919642857149*G4_1;
    A[414] = 4.18526785714296*G4_0 - 0.9300595238096*G4_1;
    A[415] = -7.99851190476227*G4_0 - 5.58035714285738*G4_1;
    A[416] = -0.0158454585537945*G0_0_0 - 0.0158454585537933*G0_0_1 + 0.594204695767217*G0_1_0 + 0.594204695767217*G0_1_1 - 0.0158454585537945*G2_0_0 - 0.0158454585537933*G2_0_1 + 0.594204695767217*G2_1_0 + 0.594204695767217*G2_1_1;
    A[417] = -0.0379774305555567*G0_0_0 - 0.0379774305555567*G2_0_0;
    A[418] = -0.38029100529102*G0_0_1 - 0.449959352954163*G0_1_1 - 0.38029100529102*G2_0_1 - 0.449959352954163*G2_1_1;
    A[419] = 0.131327849426818*G0_0_0 + 0.0301408179012414*G0_0_1 + 0.0301408179012439*G0_1_0 + 0.131327849426818*G2_0_0 + 0.0301408179012414*G2_0_1 + 0.0301408179012439*G2_1_0;
    A[420] = -0.297102347883613*G0_0_0 - 0.14855117394181*G0_0_1 - 0.148551173941809*G0_1_0 - 0.0172233245149936*G0_1_1 - 0.297102347883613*G2_0_0 - 0.14855117394181*G2_0_1 - 0.148551173941809*G2_1_0 - 0.0172233245149936*G2_1_1;
    A[421] = -0.219597387566132*G0_0_0 - 0.157162836199287*G0_0_1 - 0.157162836199279*G0_1_0 - 0.111951609347434*G0_1_1 - 0.219597387566132*G2_0_0 - 0.157162836199287*G2_0_1 - 0.157162836199279*G2_1_0 - 0.111951609347434*G2_1_1;
    A[422] = -0.89561287477958*G0_0_0 - 0.663097993827185*G0_0_1 - 0.663097993827194*G0_1_0 - 0.359536899250453*G0_1_1 - 0.89561287477958*G2_0_0 - 0.663097993827185*G2_0_1 - 0.663097993827194*G2_1_0 - 0.359536899250453*G2_1_1;
    A[423] = -0.906377452601436*G0_0_0 - 0.37676022376544*G0_0_1 - 1.70295621141981*G0_1_0 - 2.56842826829815*G0_1_1 - 0.906377452601436*G2_0_0 - 0.37676022376544*G2_0_1 - 1.70295621141981*G2_1_0 - 2.56842826829815*G2_1_1;
    A[424] = 3.07436342592603*G0_0_0 + 1.89887152777784*G0_0_1 + 1.89887152777784*G0_1_0 + 4.41778273809539*G0_1_1 + 3.07436342592603*G2_0_0 + 1.89887152777784*G2_0_1 + 1.89887152777784*G2_1_0 + 4.41778273809539*G2_1_1;
    A[425] = -1.80414324294538*G0_0_0 - 2.50384080136693*G0_0_1 - 1.45321800595243*G0_1_0 - 3.95705880731936*G0_1_1 - 1.80414324294538*G2_0_0 - 2.50384080136693*G2_0_1 - 1.45321800595243*G2_1_0 - 3.95705880731936*G2_1_1;
    A[426] = 0.89561287477958*G0_0_0 + 1.37786596119934*G0_0_1 + 0.663097993827194*G0_1_0 + 1.96345899470907*G0_1_1 + 0.89561287477958*G2_0_0 + 1.37786596119934*G2_0_1 + 0.663097993827194*G2_1_0 + 1.96345899470907*G2_1_1;
    A[427] = -0.0495170579805974*G0_0_0 - 0.579134286816596*G0_0_1 - 0.579134286816599*G0_1_0 + 0.286337770061735*G0_1_1 - 0.0495170579805974*G2_0_0 - 0.579134286816596*G2_0_1 - 0.579134286816599*G2_1_0 + 0.286337770061735*G2_1_1;
    A[428] = 0.103339947089949*G0_0_0 - 0.0301408179012378*G0_0_1 - 0.0301408179012375*G0_1_0 + 0.103339947089946*G0_1_1 + 0.103339947089949*G2_0_0 - 0.0301408179012378*G2_0_1 - 0.0301408179012375*G2_1_0 + 0.103339947089946*G2_1_1;
    A[429] = -0.111951609347446*G0_0_0 + 0.0452112268518528*G0_0_1 + 0.0452112268518544*G0_1_0 - 0.0172233245149973*G0_1_1 - 0.111951609347446*G2_0_0 + 0.0452112268518528*G2_0_1 + 0.0452112268518544*G2_1_0 - 0.0172233245149973*G2_1_1;
    A[430] = 0.111951609347447*G0_0_0 - 0.0301408179012401*G0_0_1 - 0.0301408179012355*G0_1_0 + 0.111951609347447*G2_0_0 - 0.0301408179012401*G2_0_1 - 0.0301408179012355*G2_1_0;
    A[431] = 0.73199129188714*G0_0_0 + 2.04096395502652*G0_0_1 + 2.04096395502652*G0_1_0 - 0.611428020282208*G0_1_1 + 0.73199129188714*G2_0_0 + 2.04096395502652*G2_0_1 + 2.04096395502652*G2_1_0 - 0.611428020282208*G2_1_1;
    A[432] = 0.387524801587317*G0_0_0 - 0.471488508597896*G0_0_1 - 0.471488508597902*G0_1_0 - 0.318631503527342*G0_1_1 + 0.387524801587317*G2_0_0 - 0.471488508597896*G2_0_1 - 0.471488508597902*G2_1_0 - 0.318631503527342*G2_1_1;
    A[433] = -0.344466490299839*G0_0_0 + 0.103339947089952*G0_0_1 + 0.103339947089949*G0_1_0 + 0.0344466490299855*G0_1_1 - 0.344466490299839*G2_0_0 + 0.103339947089952*G2_0_1 + 0.103339947089949*G2_1_0 + 0.0344466490299855*G2_1_1;
    A[434] = -3.81066054894193*G0_0_0 - 2.40911251653447*G0_0_1 - 2.40911251653446*G0_1_0 + 0.00430583112875206*G0_1_1 - 3.81066054894193*G2_0_0 - 2.40911251653447*G2_0_1 - 2.40911251653446*G2_1_0 + 0.00430583112875206*G2_1_1;
    A[435] = 1.03339947089951*G0_0_0 + 0.65879216269843*G0_0_1 + 0.658792162698434*G0_1_0 + 0.327243165784839*G0_1_1 + 1.03339947089951*G2_0_0 + 0.65879216269843*G2_0_1 + 0.658792162698434*G2_1_0 + 0.327243165784839*G2_1_1;
    A[436] = 2.02374063051151*G0_0_0 + 1.61038084215172*G0_0_1 + 1.61038084215171*G0_1_0 + 0.680321318342169*G0_1_1 + 2.02374063051151*G2_0_0 + 1.61038084215172*G2_0_1 + 1.61038084215171*G2_1_0 + 0.680321318342169*G2_1_1;
    A[437] = 0.0;
    A[438] = 0.0;
    A[439] = 0.0;
    A[440] = 0.0;
    A[441] = 0.0;
    A[442] = 0.0;
    A[443] = 0.0;
    A[444] = 0.0;
    A[445] = 0.0;
    A[446] = 0.0;
    A[447] = 0.0;
    A[448] = 0.0;
    A[449] = 0.0;
    A[450] = 0.0;
    A[451] = 0.0;
    A[452] = 0.0;
    A[453] = 0.0;
    A[454] = 0.0;
    A[455] = 0.0;
    A[456] = 0.0;
    A[457] = 0.0;
    A[458] = 3.90625000000014*G4_0 - 2.66617063492071*G4_1;
    A[459] = -0.589037698412715*G4_0 + 3.10168557504653e-14*G4_1;
    A[460] = -2.72817460317471*G4_0 - 1.51909722222229*G4_1;
    A[461] = 1.39508928571437*G4_0 + 1.10134124042816e-13*G4_1;
    A[462] = -6.69642857142873*G4_0 - 4.37127976190489*G4_1;
    A[463] = -12.555803571429*G4_0 + 6.23139880952409*G4_1;
    A[464] = -1.11607142857154*G4_0 - 2.04613095238109*G4_1;
    A[465] = 2.32514880952388*G4_0 - 3.06919642857148*G4_1;
    A[466] = 0.930059523809594*G4_0 + 1.3345173490581e-13*G4_1;
    A[467] = -2.23214285714294*G4_0 + 7.44047619047666*G4_1;
    A[468] = -0.0696683476631403*G0_0_0 - 0.0696683476631404*G0_0_1 - 0.44995935295416*G0_1_0 - 0.449959352954161*G0_1_1 - 0.0696683476631403*G2_0_0 - 0.0696683476631404*G2_0_1 - 0.44995935295416*G2_1_0 - 0.449959352954161*G2_1_1;
    A[469] = -0.0379774305555565*G0_0_0 - 0.0379774305555565*G2_0_0;
    A[470] = 0.610050154321013*G0_0_1 + 0.594204695767222*G0_1_1 + 0.610050154321013*G2_0_1 + 0.594204695767222*G2_1_1;
    A[471] = 0.172233245149912*G0_0_0 + 0.0301408179012348*G0_0_1 + 0.0301408179012284*G0_1_0 + 0.172233245149912*G2_0_0 + 0.0301408179012348*G2_0_1 + 0.0301408179012284*G2_1_0;
    A[472] = -0.219597387566138*G0_0_0 - 0.0624345513668458*G0_0_1 - 0.0624345513668358*G0_1_0 - 0.0172233245149878*G0_1_1 - 0.219597387566138*G2_0_0 - 0.0624345513668458*G2_0_1 - 0.0624345513668358*G2_1_0 - 0.0172233245149878*G2_1_1;
    A[473] = 0.266961529982354*G0_0_0 + 0.133480764991178*G0_0_1 + 0.133480764991168*G0_1_0 + 0.103339947089942*G0_1_1 + 0.266961529982354*G2_0_0 + 0.133480764991178*G2_0_1 + 0.133480764991168*G2_1_0 + 0.103339947089942*G2_1_1;
    A[474] = 1.39508928571435*G0_0_0 + 0.865472056878341*G0_0_1 + 0.865472056878352*G0_1_0 + 0.286337770061742*G0_1_1 + 1.39508928571435*G2_0_0 + 0.865472056878341*G2_0_1 + 0.865472056878352*G2_1_0 + 0.286337770061742*G2_1_1;
    A[475] = 0.818107914462106*G0_0_0 + 0.585593033509717*G0_0_1 + 1.30036100088188*G0_1_0 + 1.96345899470906*G0_1_1 + 0.818107914462106*G2_0_0 + 0.585593033509717*G2_0_1 + 1.30036100088188*G2_1_0 + 1.96345899470906*G2_1_1;
    A[476] = -1.80414324294538*G0_0_0 - 1.45321800595243*G0_0_1 - 2.50384080136693*G0_1_0 - 3.95705880731936*G0_1_1 - 1.80414324294538*G2_0_0 - 1.45321800595243*G2_0_1 - 2.50384080136693*G2_1_0 - 3.95705880731936*G2_1_1;
    A[477] = 3.69440310846573*G0_0_0 + 2.51891121031755*G0_0_1 + 2.51891121031755*G0_1_0 + 4.4177827380954*G0_1_1 + 3.69440310846573*G2_0_0 + 2.51891121031755*G2_0_1 + 2.51891121031755*G2_1_0 + 4.4177827380954*G2_1_1;
    A[478] = -1.39508928571435*G0_0_0 - 2.19166804453271*G0_0_1 - 0.865472056878353*G0_1_0 - 2.56842826829816*G0_1_1 - 1.39508928571435*G2_0_0 - 2.19166804453271*G2_0_1 - 0.865472056878353*G2_1_0 - 2.56842826829816*G2_1_1;
    A[479] = 0.0710462136243386*G0_0_0 + 0.303561094576733*G0_0_1 + 0.303561094576729*G0_1_0 - 0.359536899250451*G0_1_1 + 0.0710462136243386*G2_0_0 + 0.303561094576733*G2_0_1 + 0.303561094576729*G2_1_0 - 0.359536899250451*G2_1_1;
    A[480] = -0.0172233245149919*G0_0_0 + 0.0452112268518563*G0_0_1 + 0.0452112268518549*G0_1_0 - 0.111951609347445*G0_1_1 - 0.0172233245149919*G2_0_0 + 0.0452112268518563*G2_0_1 + 0.0452112268518549*G2_1_0 - 0.111951609347445*G2_1_1;
    A[481] = -0.0172233245149903*G0_0_0 + 0.131327849426813*G0_0_1 + 0.131327849426812*G0_1_0 - 0.017223324514989*G0_1_1 - 0.0172233245149903*G2_0_0 + 0.131327849426813*G2_0_1 + 0.131327849426812*G2_1_0 - 0.017223324514989*G2_1_1;
    A[482] = 0.0710462136243398*G0_0_0 - 0.0301408179012374*G0_0_1 - 0.0301408179012348*G0_1_0 + 0.0710462136243398*G2_0_0 - 0.0301408179012374*G2_0_1 - 0.0301408179012348*G2_1_0;
    A[483] = -0.516699735449745*G0_0_0 - 0.930059523809558*G0_0_1 - 0.930059523809552*G0_1_0 + 0.680321318342178*G0_1_1 - 0.516699735449745*G2_0_0 - 0.930059523809558*G2_0_1 - 0.930059523809552*G2_1_0 + 0.680321318342178*G2_1_1;
    A[484] = 0.0430583112874756*G0_0_0 - 0.331548996913594*G0_0_1 - 0.331548996913591*G0_1_0 + 0.327243165784843*G0_1_1 + 0.0430583112874756*G2_0_0 - 0.331548996913594*G2_0_1 - 0.331548996913591*G2_1_0 + 0.327243165784843*G2_1_1;
    A[485] = -0.516699735449749*G0_0_0 - 0.0688932980599625*G0_0_1 - 0.068893298059965*G0_1_0 + 0.0344466490299823*G0_1_1 - 0.516699735449749*G2_0_0 - 0.0688932980599625*G2_0_1 - 0.068893298059965*G2_1_0 + 0.0344466490299823*G2_1_1;
    A[486] = 1.01187031525576*G0_0_0 + 2.41341834766321*G0_0_1 + 2.41341834766321*G0_1_0 + 0.00430583112874371*G0_1_1 + 1.01187031525576*G2_0_0 + 2.41341834766321*G2_0_1 + 2.41341834766321*G2_1_0 + 0.00430583112874371*G2_1_1;
    A[487] = 1.01187031525576*G0_0_0 + 0.152857005070557*G0_0_1 + 0.152857005070549*G0_1_0 - 0.318631503527348*G0_1_1 + 1.01187031525576*G2_0_0 + 0.152857005070557*G2_0_1 + 0.152857005070549*G2_1_0 - 0.318631503527348*G2_1_1;
    A[488] = -3.96136463844808*G0_0_0 - 2.65239197530873*G0_0_1 - 2.65239197530872*G0_1_0 - 0.611428020282207*G0_1_1 - 3.96136463844808*G2_0_0 - 2.65239197530873*G2_0_1 - 2.65239197530872*G2_1_0 - 0.611428020282207*G2_1_1;
    A[489] = 0.0;
    A[490] = 0.0;
    A[491] = 0.0;
    A[492] = 0.0;
    A[493] = 0.0;
    A[494] = 0.0;
    A[495] = 0.0;
    A[496] = 0.0;
    A[497] = 0.0;
    A[498] = 0.0;
    A[499] = 0.0;
    A[500] = 0.0;
    A[501] = 0.0;
    A[502] = 0.0;
    A[503] = 0.0;
    A[504] = 0.0;
    A[505] = 0.0;
    A[506] = 0.0;
    A[507] = 0.0;
    A[508] = 0.0;
    A[509] = 0.0;
    A[510] = -1.20907738095244*G4_0 + 1.51909722222226*G4_1;
    A[511] = -0.589037698412709*G4_0 - 2.8269053764518e-14*G4_1;
    A[512] = 6.57242063492089*G4_0 + 2.66617063492077*G4_1;
    A[513] = 0.93005952380949*G4_0 - 5.97855098760647e-14*G4_1;
    A[514] = 5.39434523809543*G4_0 + 3.06919642857156*G4_1;
    A[515] = 0.930059523809564*G4_0 + 2.04613095238096*G4_1;
    A[516] = -18.7872023809529*G4_0 - 6.23139880952396*G4_1;
    A[517] = -2.32514880952392*G4_0 + 4.37127976190488*G4_1;
    A[518] = 1.39508928571431*G4_0 - 7.22073225864484e-14*G4_1;
    A[519] = -9.6726190476194*G4_0 - 7.44047619047655*G4_1;
    A[520] = 0.0408192791005303*G0_0_0 + 0.0408192791005316*G0_0_1 + 0.202374063051154*G0_1_0 + 0.202374063051154*G0_1_1 + 0.0408192791005303*G2_0_0 + 0.0408192791005316*G2_0_1 + 0.202374063051154*G2_1_0 + 0.202374063051154*G2_1_1;
    A[521] = -0.04081927910053*G0_0_0 - 0.04081927910053*G2_0_0;
    A[522] = -0.850315531305148*G0_0_1 - 0.64802758487657*G0_1_1 - 0.850315531305148*G2_0_1 - 0.64802758487657*G2_1_1;
    A[523] = 0.340160659171087*G0_0_0 + 0.0710462136243396*G0_0_1 + 0.0710462136243471*G0_1_0 + 0.340160659171087*G2_0_0 + 0.0710462136243396*G2_0_1 + 0.0710462136243471*G2_1_0;
    A[524] = -0.895612874779579*G0_0_0 - 0.232514880952391*G0_0_1 - 0.232514880952394*G0_1_0 + 0.0710462136243408*G0_1_1 - 0.895612874779579*G2_0_0 - 0.232514880952391*G2_0_1 - 0.232514880952394*G2_1_0 + 0.0710462136243408*G2_1_1;
    A[525] = 1.39508928571434*G0_0_0 + 0.529617228835997*G0_0_1 + 0.52961722883601*G0_1_0 - 0.049517057980597*G0_1_1 + 1.39508928571434*G2_0_0 + 0.529617228835997*G2_0_1 + 0.52961722883601*G2_1_0 - 0.049517057980597*G2_1_1;
    A[526] = -2.56196952160504*G0_0_0 - 1.28098476080252*G0_0_1 - 1.28098476080252*G0_1_0 - 0.286337770061739*G0_1_1 - 2.56196952160504*G2_0_0 - 1.28098476080252*G2_0_1 - 1.28098476080252*G2_1_0 - 0.286337770061739*G2_1_1;
    A[527] = -0.34016065917109*G0_0_0 - 0.269114445546751*G0_0_1 - 0.669556740520307*G0_1_0 - 0.938671186067055*G0_1_1 - 0.34016065917109*G2_0_0 - 0.269114445546751*G2_0_1 - 0.669556740520307*G2_1_0 - 0.938671186067055*G2_1_1;
    A[528] = 0.89561287477958*G0_0_0 + 0.663097993827194*G0_0_1 + 1.37786596119934*G0_1_0 + 1.96345899470907*G0_1_1 + 0.89561287477958*G2_0_0 + 0.663097993827194*G2_0_1 + 1.37786596119934*G2_1_0 + 1.96345899470907*G2_1_1;
    A[529] = -1.39508928571435*G0_0_0 - 0.865472056878353*G0_0_1 - 2.19166804453271*G0_1_0 - 2.56842826829816*G0_1_1 - 1.39508928571435*G2_0_0 - 0.865472056878353*G2_0_1 - 2.19166804453271*G2_1_0 - 2.56842826829816*G2_1_1;
    A[530] = 2.56196952160504*G0_0_0 + 1.28098476080252*G0_0_1 + 1.28098476080253*G0_1_0 + 1.98929398148156*G0_1_1 + 2.56196952160504*G2_0_0 + 1.28098476080252*G2_0_1 + 1.28098476080253*G2_1_0 + 1.98929398148156*G2_1_1;
    A[531] = -0.0710462136243402*G0_0_1 - 0.0710462136243408*G0_1_0 + 0.198068231922404*G0_1_1 - 0.0710462136243402*G2_0_1 - 0.0710462136243408*G2_1_0 + 0.198068231922404*G2_1_1;
    A[532] = -0.0301408179012373*G0_0_1 - 0.0301408179012366*G0_1_0 + 0.111951609347444*G0_1_1 - 0.0301408179012373*G2_0_1 - 0.0301408179012366*G2_1_0 + 0.111951609347444*G2_1_1;
    A[533] = -0.0301408179012346*G0_0_1 - 0.0301408179012352*G0_1_0 + 0.0710462136243401*G0_1_1 - 0.0301408179012346*G2_0_1 - 0.0301408179012352*G2_1_0 + 0.0710462136243401*G2_1_1;
    A[534] = -0.0710462136243431*G0_0_1 - 0.0710462136243424*G0_1_0 - 0.0710462136243431*G2_0_1 - 0.0710462136243424*G2_1_0;
    A[535] = 0.262655698853627*G0_0_1 + 0.262655698853623*G0_1_0 - 0.465029761904781*G0_1_1 + 0.262655698853627*G2_0_1 + 0.262655698853623*G2_1_0 - 0.465029761904781*G2_1_1;
    A[536] = 0.0731991291887107*G0_0_1 + 0.0731991291887147*G0_1_0 - 0.273420276675496*G0_1_1 + 0.0731991291887107*G2_0_1 + 0.0731991291887147*G2_1_0 - 0.273420276675496*G2_1_1;
    A[537] = 0.262655698853625*G0_0_1 + 0.262655698853623*G0_1_0 - 0.142092427248683*G0_1_1 + 0.262655698853625*G2_0_1 + 0.262655698853623*G2_1_0 - 0.142092427248683*G2_1_1;
    A[538] = -1.06165076729781e-14*G0_0_0 - 0.572675540123477*G0_0_1 - 0.572675540123476*G0_1_0 + 0.0495170579806044*G0_1_1 - 1.06165076729781e-14*G2_0_0 - 0.572675540123477*G2_0_1 - 0.572675540123476*G2_1_0 + 0.0495170579806044*G2_1_1;
    A[539] = 1.03458908107257e-14*G0_0_0 - 0.572675540123461*G0_0_1 - 0.572675540123471*G0_1_0 + 0.210985725308654*G0_1_1 + 1.03458908107257e-14*G2_0_0 - 0.572675540123461*G2_0_1 - 0.572675540123471*G2_1_0 + 0.210985725308654*G2_1_1;
    A[540] = 1.66205081569671*G0_0_1 + 1.6620508156967*G0_1_0 + 0.503782242063509*G0_1_1 + 1.66205081569671*G2_0_1 + 1.6620508156967*G2_1_0 + 0.503782242063509*G2_1_1;
    A[541] = 0.0;
    A[542] = 0.0;
    A[543] = 0.0;
    A[544] = 0.0;
    A[545] = 0.0;
    A[546] = 0.0;
    A[547] = 0.0;
    A[548] = 0.0;
    A[549] = 0.0;
    A[550] = 0.0;
    A[551] = 0.0;
    A[552] = 0.0;
    A[553] = 0.0;
    A[554] = 0.0;
    A[555] = 0.0;
    A[556] = 0.0;
    A[557] = 0.0;
    A[558] = 0.0;
    A[559] = 0.0;
    A[560] = 0.0;
    A[561] = 0.0;
    A[562] = -0.961061507936543*G4_0 - 0.899057539682559*G4_1;
    A[563] = -0.961061507936548*G4_0 + 2.82898704462298e-14*G4_1;
    A[564] = -10.9126984126988*G4_0 - 5.14632936507956*G4_1;
    A[565] = 5.11532738095258*G4_0 + 0.930059523809626*G4_1;
    A[566] = -11.4397321428576*G4_0 - 3.06919642857154*G4_1;
    A[567] = 5.11532738095258*G4_0 + 0.744047619047682*G4_1;
    A[568] = -11.4397321428576*G4_0 + 5.30133928571446*G4_1;
    A[569] = 0.930059523809576*G4_0 - 2.51116071428579*G4_1;
    A[570] = 0.930059523809555*G4_0 - 0.930059523809489*G4_1;
    A[571] = -2.41815476190488*G4_0 + 5.58035714285755*G4_1;
    A[572] = -0.648027584876568*G0_0_0 - 0.648027584876569*G0_0_1 + 0.202287946428581*G0_1_0 + 0.20228794642858*G0_1_1 - 0.648027584876568*G2_0_0 - 0.648027584876569*G2_0_1 + 0.202287946428581*G2_1_0 + 0.20228794642858*G2_1_1;
    A[573] = 0.202374063051151*G0_0_0 + 0.16155478395062*G0_1_0 + 0.202374063051151*G2_0_0 + 0.16155478395062*G2_1_0;
    A[574] = -0.0408192791005325*G0_1_1 - 0.0408192791005325*G2_1_1;
    A[575] = 0.198068231922397*G0_0_0 + 0.26911444554674*G0_0_1 + 0.269114445546733*G0_1_0 + 0.34016065917107*G0_1_1 + 0.198068231922397*G2_0_0 + 0.26911444554674*G2_0_1 + 0.269114445546733*G2_1_0 + 0.34016065917107*G2_1_1;
    A[576] = 0.111951609347447*G0_0_0 + 0.142092427248679*G0_0_1 + 0.142092427248682*G0_1_0 + 0.172233245149923*G0_1_1 + 0.111951609347447*G2_0_0 + 0.142092427248679*G2_0_1 + 0.142092427248682*G2_1_0 + 0.172233245149923*G2_1_1;
    A[577] = 0.0710462136243352*G0_0_0 + 0.101187031525574*G0_0_1 + 0.101187031525573*G0_1_0 + 0.131327849426802*G0_1_1 + 0.0710462136243352*G2_0_0 + 0.101187031525574*G2_0_1 + 0.101187031525573*G2_1_0 + 0.131327849426802*G2_1_1;
    A[578] = 0.0710462136243392*G0_0_1 + 0.0710462136243403*G0_1_0 + 0.142092427248686*G0_1_1 + 0.0710462136243392*G2_0_1 + 0.0710462136243403*G2_1_0 + 0.142092427248686*G2_1_1;
    A[579] = -0.286337770061744*G0_0_0 + 0.994646990740779*G0_0_1 + 0.994646990740773*G0_1_0 - 0.286337770061737*G0_1_1 - 0.286337770061744*G2_0_0 + 0.994646990740779*G2_0_1 + 0.994646990740773*G2_1_0 - 0.286337770061737*G2_1_1;
    A[580] = -0.0495170579805974*G0_0_0 - 0.579134286816599*G0_0_1 - 0.579134286816596*G0_1_0 + 0.286337770061735*G0_1_1 - 0.0495170579805974*G2_0_0 - 0.579134286816599*G2_0_1 - 0.579134286816596*G2_1_0 + 0.286337770061735*G2_1_1;
    A[581] = 0.0710462136243386*G0_0_0 + 0.303561094576729*G0_0_1 + 0.303561094576733*G0_1_0 - 0.359536899250452*G0_1_1 + 0.0710462136243386*G2_0_0 + 0.303561094576729*G2_0_1 + 0.303561094576733*G2_1_0 - 0.359536899250452*G2_1_1;
    A[582] = -0.0710462136243409*G0_0_1 - 0.0710462136243402*G0_1_0 + 0.198068231922404*G0_1_1 - 0.0710462136243409*G2_0_1 - 0.0710462136243402*G2_1_0 + 0.198068231922404*G2_1_1;
    A[583] = 1.98929398148155*G0_0_0 + 0.708309220679033*G0_0_1 + 0.708309220679033*G0_1_0 + 1.98929398148155*G0_1_1 + 1.98929398148155*G2_0_0 + 0.708309220679033*G2_0_1 + 0.708309220679033*G2_1_0 + 1.98929398148155*G2_1_1;
    A[584] = -2.56842826829815*G0_0_0 - 0.376760223765436*G0_0_1 - 1.70295621141981*G0_1_0 - 0.906377452601428*G0_1_1 - 2.56842826829815*G2_0_0 - 0.376760223765436*G2_0_1 - 1.70295621141981*G2_1_0 - 0.906377452601428*G2_1_1;
    A[585] = 1.96345899470906*G0_0_0 + 0.585593033509713*G0_0_1 + 1.30036100088187*G0_1_0 + 0.818107914462102*G0_1_1 + 1.96345899470906*G2_0_0 + 0.585593033509713*G2_0_1 + 1.30036100088187*G2_1_0 + 0.818107914462102*G2_1_1;
    A[586] = -0.938671186067048*G0_0_0 - 0.269114445546741*G0_0_1 - 0.669556740520299*G0_1_0 - 0.340160659171075*G0_1_1 - 0.938671186067048*G2_0_0 - 0.269114445546741*G2_0_1 - 0.669556740520299*G2_1_0 - 0.340160659171075*G2_1_1;
    A[587] = 0.503782242063526*G0_0_0 - 1.15826857363319*G0_0_1 - 1.15826857363319*G0_1_0 - 2.8203193893299*G0_1_1 + 0.503782242063526*G2_0_0 - 1.15826857363319*G2_0_1 - 1.15826857363319*G2_1_0 - 2.8203193893299*G2_1_1;
    A[588] = 0.0495170579805794*G0_0_0 + 0.62219259810406*G0_0_1 + 0.622192598104065*G0_1_0 + 1.19486813822754*G0_1_1 + 0.0495170579805794*G2_0_0 + 0.62219259810406*G2_0_1 + 0.622192598104065*G2_1_0 + 1.19486813822754*G2_1_1;
    A[589] = -0.465029761904759*G0_0_0 - 0.727685460758387*G0_0_1 - 0.727685460758384*G0_1_0 - 0.990341159612022*G0_1_1 - 0.465029761904759*G2_0_0 - 0.727685460758387*G2_0_1 - 0.727685460758384*G2_1_0 - 0.990341159612022*G2_1_1;
    A[590] = 0.210985725308643*G0_0_0 + 0.783661265432127*G0_0_1 + 0.783661265432122*G0_1_0 + 1.3563368055556*G0_1_1 + 0.210985725308643*G2_0_0 + 0.783661265432127*G2_0_1 + 0.783661265432122*G2_1_0 + 1.3563368055556*G2_1_1;
    A[591] = -0.273420276675492*G0_0_0 - 0.346619405864205*G0_0_1 - 0.346619405864208*G0_1_0 - 0.419818535052906*G0_1_1 - 0.273420276675492*G2_0_0 - 0.346619405864205*G2_0_1 - 0.346619405864208*G2_1_0 - 0.419818535052906*G2_1_1;
    A[592] = -0.142092427248675*G0_0_0 - 0.404748126102305*G0_0_1 - 0.404748126102306*G0_1_0 - 0.667403824955934*G0_1_1 - 0.142092427248675*G2_0_0 - 0.404748126102305*G2_0_1 - 0.404748126102306*G2_1_0 - 0.667403824955934*G2_1_1;
    A[593] = 0.0;
    A[594] = 0.0;
    A[595] = 0.0;
    A[596] = 0.0;
    A[597] = 0.0;
    A[598] = 0.0;
    A[599] = 0.0;
    A[600] = 0.0;
    A[601] = 0.0;
    A[602] = 0.0;
    A[603] = 0.0;
    A[604] = 0.0;
    A[605] = 0.0;
    A[606] = 0.0;
    A[607] = 0.0;
    A[608] = 0.0;
    A[609] = 0.0;
    A[610] = 0.0;
    A[611] = 0.0;
    A[612] = 0.0;
    A[613] = 0.0;
    A[614] = 5.14632936507957*G4_0 - 5.76636904761925*G4_1;
    A[615] = 0.899057539682545*G4_0 - 0.062003968254021*G4_1;
    A[616] = -0.961061507936559*G4_1;
    A[617] = 2.51116071428572*G4_0 + 3.44122023809524*G4_1;
    A[618] = 0.930059523809533*G4_0 + 1.86011904761909*G4_1;
    A[619] = 3.06919642857157*G4_0 - 8.370535714286*G4_1;
    A[620] = -0.930059523809569*G4_0 + 4.18526785714297*G4_1;
    A[621] = -5.30133928571445*G4_0 - 16.741071428572*G4_1;
    A[622] = -0.744047619047665*G4_0 + 4.37127976190483*G4_1;
    A[623] = -5.58035714285736*G4_0 - 7.99851190476239*G4_1;
    A[624] = 0.594204695767216*G0_0_0 + 0.594204695767218*G0_0_1 - 0.0158454585537941*G0_1_0 - 0.0158454585537939*G0_1_1 + 0.594204695767216*G2_0_0 + 0.594204695767218*G2_0_1 - 0.0158454585537941*G2_1_0 - 0.0158454585537939*G2_1_1;
    A[625] = -0.449959352954155*G0_0_0 - 0.380291005291012*G0_1_0 - 0.449959352954155*G2_0_0 - 0.380291005291012*G2_1_0;
    A[626] = -0.0379774305555575*G0_1_1 - 0.0379774305555575*G2_1_1;
    A[627] = -0.359536899250438*G0_0_0 - 0.663097993827168*G0_0_1 - 0.66309799382717*G0_1_0 - 0.895612874779553*G0_1_1 - 0.359536899250438*G2_0_0 - 0.663097993827168*G2_0_1 - 0.66309799382717*G2_1_0 - 0.895612874779553*G2_1_1;
    A[628] = -0.111951609347446*G0_0_0 - 0.157162836199294*G0_0_1 - 0.157162836199297*G0_1_0 - 0.21959738756614*G0_1_1 - 0.111951609347446*G2_0_0 - 0.157162836199294*G2_0_1 - 0.157162836199297*G2_1_0 - 0.21959738756614*G2_1_1;
    A[629] = -0.017223324514988*G0_0_0 - 0.148551173941803*G0_0_1 - 0.148551173941802*G0_1_0 - 0.297102347883608*G0_1_1 - 0.017223324514988*G2_0_0 - 0.148551173941803*G2_0_1 - 0.148551173941802*G2_1_0 - 0.297102347883608*G2_1_1;
    A[630] = 0.0301408179012378*G0_0_1 + 0.0301408179012369*G0_1_0 + 0.131327849426818*G0_1_1 + 0.0301408179012378*G2_0_1 + 0.0301408179012369*G2_1_0 + 0.131327849426818*G2_1_1;
    A[631] = 0.286337770061744*G0_0_0 - 0.5791342868166*G0_0_1 - 0.579134286816594*G0_1_0 - 0.0495170579805984*G0_1_1 + 0.286337770061744*G2_0_0 - 0.5791342868166*G2_0_1 - 0.579134286816594*G2_1_0 - 0.0495170579805984*G2_1_1;
    A[632] = 0.103339947089949*G0_0_0 - 0.0301408179012375*G0_0_1 - 0.0301408179012378*G0_1_0 + 0.103339947089946*G0_1_1 + 0.103339947089949*G2_0_0 - 0.0301408179012375*G2_0_1 - 0.0301408179012378*G2_1_0 + 0.103339947089946*G2_1_1;
    A[633] = -0.0172233245149919*G0_0_0 + 0.0452112268518549*G0_0_1 + 0.0452112268518563*G0_1_0 - 0.111951609347445*G0_1_1 - 0.0172233245149919*G2_0_0 + 0.0452112268518549*G2_0_1 + 0.0452112268518563*G2_1_0 - 0.111951609347445*G2_1_1;
    A[634] = -0.0301408179012366*G0_0_1 - 0.0301408179012373*G0_1_0 + 0.111951609347444*G0_1_1 - 0.0301408179012366*G2_0_1 - 0.0301408179012373*G2_1_0 + 0.111951609347444*G2_1_1;
    A[635] = -2.56842826829815*G0_0_0 - 1.70295621141981*G0_0_1 - 0.376760223765436*G0_1_0 - 0.906377452601428*G0_1_1 - 2.56842826829815*G2_0_0 - 1.70295621141981*G2_0_1 - 0.376760223765436*G2_1_0 - 0.906377452601428*G2_1_1;
    A[636] = 4.41778273809538*G0_0_0 + 1.89887152777782*G0_0_1 + 1.89887152777782*G0_1_0 + 3.07436342592602*G0_1_1 + 4.41778273809538*G2_0_0 + 1.89887152777782*G2_0_1 + 1.89887152777782*G2_1_0 + 3.07436342592602*G2_1_1;
    A[637] = -3.95705880731934*G0_0_0 - 1.45321800595241*G0_0_1 - 2.50384080136691*G0_1_0 - 1.80414324294536*G0_1_1 - 3.95705880731934*G2_0_0 - 1.45321800595241*G2_0_1 - 2.50384080136691*G2_1_0 - 1.80414324294536*G2_1_1;
    A[638] = 1.96345899470905*G0_0_0 + 0.66309799382717*G0_0_1 + 1.37786596119932*G0_1_0 + 0.895612874779554*G0_1_1 + 1.96345899470905*G2_0_0 + 0.66309799382717*G2_0_1 + 1.37786596119932*G2_1_0 + 0.895612874779554*G2_1_1;
    A[639] = -0.611428020282231*G0_0_0 + 2.04096395502652*G0_0_1 + 2.04096395502651*G0_1_0 + 0.73199129188713*G0_1_1 - 0.611428020282231*G2_0_0 + 2.04096395502652*G2_0_1 + 2.04096395502651*G2_1_0 + 0.73199129188713*G2_1_1;
    A[640] = 0.00430583112878148*G0_0_0 - 2.40911251653445*G0_0_1 - 2.40911251653445*G0_1_0 - 3.81066054894191*G0_1_1 + 0.00430583112878148*G2_0_0 - 2.40911251653445*G2_0_1 - 2.40911251653445*G2_1_0 - 3.81066054894191*G2_1_1;
    A[641] = 0.680321318342144*G0_0_0 + 1.6103808421517*G0_0_1 + 1.6103808421517*G0_1_0 + 2.0237406305115*G0_1_1 + 0.680321318342144*G2_0_0 + 1.6103808421517*G2_0_1 + 1.6103808421517*G2_1_0 + 2.0237406305115*G2_1_1;
    A[642] = -0.318631503527344*G0_0_0 - 0.471488508597901*G0_0_1 - 0.471488508597898*G0_1_0 + 0.38752480158733*G0_1_1 - 0.318631503527344*G2_0_0 - 0.471488508597901*G2_0_1 - 0.471488508597898*G2_1_0 + 0.38752480158733*G2_1_1;
    A[643] = 0.32724316578484*G0_0_0 + 0.658792162698431*G0_0_1 + 0.658792162698431*G0_1_0 + 1.03339947089951*G0_1_1 + 0.32724316578484*G2_0_0 + 0.658792162698431*G2_0_1 + 0.658792162698431*G2_1_0 + 1.03339947089951*G2_1_1;
    A[644] = 0.0344466490299813*G0_0_0 + 0.10333994708995*G0_0_1 + 0.103339947089946*G0_1_0 - 0.344466490299843*G0_1_1 + 0.0344466490299813*G2_0_0 + 0.10333994708995*G2_0_1 + 0.103339947089946*G2_1_0 - 0.344466490299843*G2_1_1;
    A[645] = 0.0;
    A[646] = 0.0;
    A[647] = 0.0;
    A[648] = 0.0;
    A[649] = 0.0;
    A[650] = 0.0;
    A[651] = 0.0;
    A[652] = 0.0;
    A[653] = 0.0;
    A[654] = 0.0;
    A[655] = 0.0;
    A[656] = 0.0;
    A[657] = 0.0;
    A[658] = 0.0;
    A[659] = 0.0;
    A[660] = 0.0;
    A[661] = 0.0;
    A[662] = 0.0;
    A[663] = 0.0;
    A[664] = 0.0;
    A[665] = 0.0;
    A[666] = -2.66617063492074*G4_0 + 3.90625000000013*G4_1;
    A[667] = -1.51909722222222*G4_0 - 2.72817460317461*G4_1;
    A[668] = -0.589037698412712*G4_1;
    A[669] = -4.37127976190476*G4_0 - 6.69642857142869*G4_1;
    A[670] = 1.39508928571435*G4_1;
    A[671] = -3.06919642857157*G4_0 + 2.32514880952386*G4_1;
    A[672] = 1.44894404634222e-14*G4_0 + 0.930059523809585*G4_1;
    A[673] = 6.23139880952405*G4_0 - 12.5558035714291*G4_1;
    A[674] = -2.046130952381*G4_0 - 1.11607142857148*G4_1;
    A[675] = 7.44047619047655*G4_0 - 2.23214285714287*G4_1;
    A[676] = -0.44995935295416*G0_0_0 - 0.449959352954161*G0_0_1 - 0.0696683476631409*G0_1_0 - 0.0696683476631423*G0_1_1 - 0.44995935295416*G2_0_0 - 0.449959352954161*G2_0_1 - 0.0696683476631409*G2_1_0 - 0.0696683476631423*G2_1_1;
    A[677] = 0.594204695767207*G0_0_0 + 0.610050154321001*G0_1_0 + 0.594204695767207*G2_0_0 + 0.610050154321001*G2_1_0;
    A[678] = -0.037977430555558*G0_1_1 - 0.037977430555558*G2_1_1;
    A[679] = 0.28633777006172*G0_0_0 + 0.865472056878311*G0_0_1 + 0.865472056878325*G0_1_0 + 1.39508928571431*G0_1_1 + 0.28633777006172*G2_0_0 + 0.865472056878311*G2_0_1 + 0.865472056878325*G2_1_0 + 1.39508928571431*G2_1_1;
    A[680] = 0.103339947089953*G0_0_0 + 0.133480764991188*G0_0_1 + 0.133480764991191*G0_1_0 + 0.266961529982381*G0_1_1 + 0.103339947089953*G2_0_0 + 0.133480764991188*G2_0_1 + 0.133480764991191*G2_1_0 + 0.266961529982381*G2_1_1;
    A[681] = -0.0172233245149941*G0_0_0 - 0.0624345513668489*G0_0_1 - 0.06243455136685*G0_1_0 - 0.219597387566153*G0_1_1 - 0.0172233245149941*G2_0_0 - 0.0624345513668489*G2_0_1 - 0.06243455136685*G2_1_0 - 0.219597387566153*G2_1_1;
    A[682] = 0.0301408179012346*G0_0_1 + 0.0301408179012347*G0_1_0 + 0.172233245149919*G0_1_1 + 0.0301408179012346*G2_0_1 + 0.0301408179012347*G2_1_0 + 0.172233245149919*G2_1_1;
    A[683] = -0.359536899250458*G0_0_0 + 0.303561094576731*G0_0_1 + 0.303561094576729*G0_1_0 + 0.0710462136243458*G0_1_1 - 0.359536899250458*G2_0_0 + 0.303561094576731*G2_0_1 + 0.303561094576729*G2_1_0 + 0.0710462136243458*G2_1_1;
    A[684] = -0.111951609347446*G0_0_0 + 0.0452112268518545*G0_0_1 + 0.0452112268518528*G0_1_0 - 0.0172233245149973*G0_1_1 - 0.111951609347446*G2_0_0 + 0.0452112268518545*G2_0_1 + 0.0452112268518528*G2_1_0 - 0.0172233245149973*G2_1_1;
    A[685] = -0.0172233245149903*G0_0_0 + 0.131327849426812*G0_0_1 + 0.131327849426813*G0_1_0 - 0.017223324514989*G0_1_1 - 0.0172233245149903*G2_0_0 + 0.131327849426812*G2_0_1 + 0.131327849426813*G2_1_0 - 0.017223324514989*G2_1_1;
    A[686] = -0.0301408179012353*G0_0_1 - 0.0301408179012346*G0_1_0 + 0.0710462136243401*G0_1_1 - 0.0301408179012353*G2_0_1 - 0.0301408179012346*G2_1_0 + 0.0710462136243401*G2_1_1;
    A[687] = 1.96345899470906*G0_0_0 + 1.30036100088187*G0_0_1 + 0.585593033509713*G0_1_0 + 0.818107914462102*G0_1_1 + 1.96345899470906*G2_0_0 + 1.30036100088187*G2_0_1 + 0.585593033509713*G2_1_0 + 0.818107914462102*G2_1_1;
    A[688] = -3.95705880731934*G0_0_0 - 2.50384080136691*G0_0_1 - 1.45321800595241*G0_1_0 - 1.80414324294536*G0_1_1 - 3.95705880731934*G2_0_0 - 2.50384080136691*G2_0_1 - 1.45321800595241*G2_1_0 - 1.80414324294536*G2_1_1;
    A[689] = 4.41778273809537*G0_0_0 + 2.51891121031752*G0_0_1 + 2.51891121031752*G0_1_0 + 3.69440310846571*G0_1_1 + 4.41778273809537*G2_0_0 + 2.51891121031752*G2_0_1 + 2.51891121031752*G2_1_0 + 3.69440310846571*G2_1_1;
    A[690] = -2.56842826829813*G0_0_0 - 0.865472056878313*G0_0_1 - 2.19166804453268*G0_1_0 - 1.39508928571432*G0_1_1 - 2.56842826829813*G2_0_0 - 0.865472056878313*G2_0_1 - 2.19166804453268*G2_1_0 - 1.39508928571432*G2_1_1;
    A[691] = 0.680321318342197*G0_0_0 - 0.930059523809544*G0_0_1 - 0.930059523809541*G0_1_0 - 0.516699735449744*G0_1_1 + 0.680321318342197*G2_0_0 - 0.930059523809544*G2_0_1 - 0.930059523809541*G2_1_0 - 0.516699735449744*G2_1_1;
    A[692] = 0.00430583112871386*G0_0_0 + 2.41341834766319*G0_0_1 + 2.41341834766319*G0_1_0 + 1.01187031525573*G0_1_1 + 0.00430583112871386*G2_0_0 + 2.41341834766319*G2_0_1 + 2.41341834766319*G2_1_0 + 1.01187031525573*G2_1_1;
    A[693] = -0.611428020282173*G0_0_0 - 2.65239197530871*G0_0_1 - 2.6523919753087*G0_1_0 - 3.96136463844808*G0_1_1 - 0.611428020282173*G2_0_0 - 2.65239197530871*G2_0_1 - 2.6523919753087*G2_1_0 - 3.96136463844808*G2_1_1;
    A[694] = 0.327243165784843*G0_0_0 - 0.331548996913593*G0_0_1 - 0.331548996913589*G0_1_0 + 0.0430583112874767*G0_1_1 + 0.327243165784843*G2_0_0 - 0.331548996913593*G2_0_1 - 0.331548996913589*G2_1_0 + 0.0430583112874767*G2_1_1;
    A[695] = -0.31863150352735*G0_0_0 + 0.152857005070556*G0_0_1 + 0.152857005070546*G0_1_0 + 1.01187031525578*G0_1_1 - 0.31863150352735*G2_0_0 + 0.152857005070556*G2_0_1 + 0.152857005070546*G2_1_0 + 1.01187031525578*G2_1_1;
    A[696] = 0.0344466490299831*G0_0_0 - 0.0688932980599677*G0_0_1 - 0.0688932980599634*G0_1_0 - 0.516699735449754*G0_1_1 + 0.0344466490299831*G2_0_0 - 0.0688932980599677*G2_0_1 - 0.0688932980599634*G2_1_0 - 0.516699735449754*G2_1_1;
    A[697] = 0.0;
    A[698] = 0.0;
    A[699] = 0.0;
    A[700] = 0.0;
    A[701] = 0.0;
    A[702] = 0.0;
    A[703] = 0.0;
    A[704] = 0.0;
    A[705] = 0.0;
    A[706] = 0.0;
    A[707] = 0.0;
    A[708] = 0.0;
    A[709] = 0.0;
    A[710] = 0.0;
    A[711] = 0.0;
    A[712] = 0.0;
    A[713] = 0.0;
    A[714] = 0.0;
    A[715] = 0.0;
    A[716] = 0.0;
    A[717] = 0.0;
    A[718] = 1.51909722222228*G4_0 - 1.20907738095242*G4_1;
    A[719] = 2.66617063492062*G4_0 + 6.57242063492078*G4_1;
    A[720] = -1.74825431908943e-14*G4_0 - 0.589037698412728*G4_1;
    A[721] = 3.06919642857137*G4_0 + 5.39434523809536*G4_1;
    A[722] = 3.26561694352634e-14*G4_0 + 0.930059523809559*G4_1;
    A[723] = 4.37127976190494*G4_0 - 2.32514880952387*G4_1;
    A[724] = -3.45821461744666e-14*G4_0 + 1.39508928571431*G4_1;
    A[725] = 2.04613095238102*G4_0 + 0.93005952380956*G4_1;
    A[726] = -6.23139880952411*G4_0 - 18.7872023809531*G4_1;
    A[727] = -7.44047619047659*G4_0 - 9.67261904761945*G4_1;
    A[728] = 0.202374063051153*G0_0_0 + 0.202374063051154*G0_0_1 + 0.0408192791005288*G0_1_0 + 0.0408192791005318*G0_1_1 + 0.202374063051153*G2_0_0 + 0.202374063051154*G2_0_1 + 0.0408192791005288*G2_1_0 + 0.0408192791005318*G2_1_1;
    A[729] = -0.648027584876558*G0_0_0 - 0.85031553130514*G0_1_0 - 0.648027584876558*G2_0_0 - 0.85031553130514*G2_1_0;
    A[730] = -0.0408192791005314*G0_1_1 - 0.0408192791005314*G2_1_1;
    A[731] = -0.286337770061726*G0_0_0 - 1.28098476080249*G0_0_1 - 1.28098476080251*G0_1_0 - 2.56196952160502*G0_1_1 - 0.286337770061726*G2_0_0 - 1.28098476080249*G2_0_1 - 1.28098476080251*G2_1_0 - 2.56196952160502*G2_1_1;
    A[732] = -0.0495170579806048*G0_0_0 + 0.529617228835994*G0_0_1 + 0.529617228835998*G0_1_0 + 1.39508928571435*G0_1_1 - 0.0495170579806048*G2_0_0 + 0.529617228835994*G2_0_1 + 0.529617228835998*G2_1_0 + 1.39508928571435*G2_1_1;
    A[733] = 0.0710462136243425*G0_0_0 - 0.232514880952387*G0_0_1 - 0.23251488095239*G0_1_0 - 0.895612874779584*G0_1_1 + 0.0710462136243425*G2_0_0 - 0.232514880952387*G2_0_1 - 0.23251488095239*G2_1_0 - 0.895612874779584*G2_1_1;
    A[734] = 0.0710462136243427*G0_0_1 + 0.0710462136243432*G0_1_0 + 0.340160659171099*G0_1_1 + 0.0710462136243427*G2_0_1 + 0.0710462136243432*G2_1_0 + 0.340160659171099*G2_1_1;
    A[735] = 0.198068231922409*G0_0_0 - 0.071046213624343*G0_0_1 - 0.0710462136243352*G0_1_0 + 0.198068231922409*G2_0_0 - 0.071046213624343*G2_0_1 - 0.0710462136243352*G2_1_0;
    A[736] = 0.111951609347447*G0_0_0 - 0.0301408179012355*G0_0_1 - 0.0301408179012401*G0_1_0 + 0.111951609347447*G2_0_0 - 0.0301408179012355*G2_0_1 - 0.0301408179012401*G2_1_0;
    A[737] = 0.0710462136243399*G0_0_0 - 0.0301408179012347*G0_0_1 - 0.0301408179012374*G0_1_0 + 0.0710462136243399*G2_0_0 - 0.0301408179012347*G2_0_1 - 0.0301408179012374*G2_1_0;
    A[738] = -0.0710462136243424*G0_0_1 - 0.0710462136243431*G0_1_0 - 0.0710462136243424*G2_0_1 - 0.0710462136243431*G2_1_0;
    A[739] = -0.938671186067048*G0_0_0 - 0.669556740520299*G0_0_1 - 0.269114445546741*G0_1_0 - 0.340160659171075*G0_1_1 - 0.938671186067048*G2_0_0 - 0.669556740520299*G2_0_1 - 0.269114445546741*G2_1_0 - 0.340160659171075*G2_1_1;
    A[740] = 1.96345899470905*G0_0_0 + 1.37786596119932*G0_0_1 + 0.66309799382717*G0_1_0 + 0.895612874779554*G0_1_1 + 1.96345899470905*G2_0_0 + 1.37786596119932*G2_0_1 + 0.66309799382717*G2_1_0 + 0.895612874779554*G2_1_1;
    A[741] = -2.56842826829813*G0_0_0 - 2.19166804453268*G0_0_1 - 0.865472056878313*G0_1_0 - 1.39508928571432*G0_1_1 - 2.56842826829813*G2_0_0 - 2.19166804453268*G2_0_1 - 0.865472056878313*G2_1_0 - 1.39508928571432*G2_1_1;
    A[742] = 1.98929398148153*G0_0_0 + 1.2809847608025*G0_0_1 + 1.2809847608025*G0_1_0 + 2.56196952160502*G0_1_1 + 1.98929398148153*G2_0_0 + 1.2809847608025*G2_0_1 + 1.2809847608025*G2_1_0 + 2.56196952160502*G2_1_1;
    A[743] = -0.46502976190479*G0_0_0 + 0.262655698853616*G0_0_1 + 0.262655698853612*G0_1_0 - 1.73921749398176e-14*G0_1_1 - 0.46502976190479*G2_0_0 + 0.262655698853616*G2_0_1 + 0.262655698853612*G2_1_0 - 1.73921749398176e-14*G2_1_1;
    A[744] = 0.0495170579806208*G0_0_0 - 0.572675540123452*G0_0_1 - 0.572675540123461*G0_1_0 + 3.25500802526857e-14*G0_1_1 + 0.0495170579806208*G2_0_0 - 0.572675540123452*G2_0_1 - 0.572675540123461*G2_1_0 + 3.25500802526857e-14*G2_1_1;
    A[745] = 0.503782242063486*G0_0_0 + 1.66205081569669*G0_0_1 + 1.66205081569669*G0_1_0 - 3.93545872973133e-14*G0_1_1 + 0.503782242063486*G2_0_0 + 1.66205081569669*G2_0_1 + 1.66205081569669*G2_1_0 - 3.93545872973133e-14*G2_1_1;
    A[746] = -0.273420276675496*G0_0_0 + 0.0731991291887152*G0_0_1 + 0.0731991291887186*G0_1_0 - 0.273420276675496*G2_0_0 + 0.0731991291887152*G2_0_1 + 0.0731991291887186*G2_1_0;
    A[747] = 0.210985725308655*G0_0_0 - 0.572675540123481*G0_0_1 - 0.572675540123477*G0_1_0 + 0.210985725308655*G2_0_0 - 0.572675540123481*G2_0_1 - 0.572675540123477*G2_1_0;
    A[748] = -0.142092427248682*G0_0_0 + 0.262655698853626*G0_0_1 + 0.262655698853628*G0_1_0 - 0.142092427248682*G2_0_0 + 0.262655698853626*G2_0_1 + 0.262655698853628*G2_1_0;
    A[749] = 0.0;
    A[750] = 0.0;
    A[751] = 0.0;
    A[752] = 0.0;
    A[753] = 0.0;
    A[754] = 0.0;
    A[755] = 0.0;
    A[756] = 0.0;
    A[757] = 0.0;
    A[758] = 0.0;
    A[759] = 0.0;
    A[760] = 0.0;
    A[761] = 0.0;
    A[762] = 0.0;
    A[763] = 0.0;
    A[764] = 0.0;
    A[765] = 0.0;
    A[766] = 0.0;
    A[767] = 0.0;
    A[768] = 0.0;
    A[769] = 0.0;
    A[770] = -0.899057539682572*G4_0 - 0.961061507936549*G4_1;
    A[771] = -5.14632936507947*G4_0 - 10.9126984126988*G4_1;
    A[772] = 1.0994677390741e-14*G4_0 - 0.961061507936533*G4_1;
    A[773] = -3.06919642857145*G4_0 - 11.4397321428575*G4_1;
    A[774] = 0.930059523809538*G4_0 + 5.11532738095258*G4_1;
    A[775] = -2.51116071428583*G4_0 + 0.930059523809559*G4_1;
    A[776] = -0.930059523809535*G4_0 + 0.930059523809611*G4_1;
    A[777] = 0.744047619047615*G4_0 + 5.11532738095255*G4_1;
    A[778] = 5.30133928571453*G4_0 - 11.4397321428575*G4_1;
    A[779] = 5.58035714285741*G4_0 - 2.4181547619047*G4_1;
    A[780] = -0.215291556437402*G0_0_0 - 0.215291556437403*G0_0_1 - 0.215291556437401*G0_1_0 - 0.215291556437399*G0_1_1 - 0.215291556437402*G2_0_0 - 0.215291556437403*G2_0_1 - 0.215291556437401*G2_1_0 - 0.215291556437399*G2_1_1;
    A[781] = 0.107645778218702*G0_0_0 + 0.107645778218702*G2_0_0;
    A[782] = 0.107645778218701*G0_1_1 + 0.107645778218701*G2_1_1;
    A[783] = -0.667403824955919*G0_0_0 - 0.262655698853608*G0_0_1 - 0.262655698853611*G0_1_0 + 2.14435674078528e-14*G0_1_1 - 0.667403824955919*G2_0_0 - 0.262655698853608*G2_0_1 - 0.262655698853611*G2_1_0 + 2.14435674078528e-14*G2_1_1;
    A[784] = -0.344466490299831*G0_0_0 - 0.447806437389783*G0_0_1 - 0.447806437389786*G0_1_0 - 0.516699735449765*G0_1_1 - 0.344466490299831*G2_0_0 - 0.447806437389783*G2_0_1 - 0.447806437389786*G2_1_0 - 0.516699735449765*G2_1_1;
    A[785] = -0.516699735449737*G0_0_0 - 0.44780643738977*G0_0_1 - 0.447806437389781*G0_1_0 - 0.344466490299817*G0_1_1 - 0.516699735449737*G2_0_0 - 0.44780643738977*G2_0_1 - 0.447806437389781*G2_1_0 - 0.344466490299817*G2_1_1;
    A[786] = -0.262655698853623*G0_0_1 - 0.262655698853627*G0_1_0 - 0.66740382495594*G0_1_1 - 0.262655698853623*G2_0_1 - 0.262655698853627*G2_1_0 - 0.66740382495594*G2_1_1;
    A[787] = -2.82031938932991*G0_0_0 - 1.15826857363319*G0_0_1 - 1.15826857363319*G0_1_0 + 0.503782242063511*G0_1_1 - 2.82031938932991*G2_0_0 - 1.15826857363319*G2_0_1 - 1.15826857363319*G2_1_0 + 0.503782242063511*G2_1_1;
    A[788] = 0.73199129188714*G0_0_0 + 2.04096395502652*G0_0_1 + 2.04096395502652*G0_1_0 - 0.611428020282208*G0_1_1 + 0.73199129188714*G2_0_0 + 2.04096395502652*G2_0_1 + 2.04096395502652*G2_1_0 - 0.611428020282208*G2_1_1;
    A[789] = -0.516699735449745*G0_0_0 - 0.930059523809552*G0_0_1 - 0.930059523809558*G0_1_0 + 0.680321318342178*G0_1_1 - 0.516699735449745*G2_0_0 - 0.930059523809552*G2_0_1 - 0.930059523809558*G2_1_0 + 0.680321318342178*G2_1_1;
    A[790] = 0.262655698853623*G0_0_1 + 0.262655698853627*G0_1_0 - 0.465029761904781*G0_1_1 + 0.262655698853623*G2_0_1 + 0.262655698853627*G2_1_0 - 0.465029761904781*G2_1_1;
    A[791] = 0.503782242063526*G0_0_0 - 1.15826857363319*G0_0_1 - 1.15826857363319*G0_1_0 - 2.8203193893299*G0_1_1 + 0.503782242063526*G2_0_0 - 1.15826857363319*G2_0_1 - 1.15826857363319*G2_1_0 - 2.8203193893299*G2_1_1;
    A[792] = -0.611428020282231*G0_0_0 + 2.04096395502651*G0_0_1 + 2.04096395502652*G0_1_0 + 0.731991291887129*G0_1_1 - 0.611428020282231*G2_0_0 + 2.04096395502651*G2_0_1 + 2.04096395502652*G2_1_0 + 0.731991291887129*G2_1_1;
    A[793] = 0.680321318342197*G0_0_0 - 0.930059523809541*G0_0_1 - 0.930059523809544*G0_1_0 - 0.516699735449744*G0_1_1 + 0.680321318342197*G2_0_0 - 0.930059523809541*G2_0_1 - 0.930059523809544*G2_1_0 - 0.516699735449744*G2_1_1;
    A[794] = -0.46502976190479*G0_0_0 + 0.262655698853612*G0_0_1 + 0.262655698853616*G0_1_0 - 1.73674551302849e-14*G0_1_1 - 0.46502976190479*G2_0_0 + 0.262655698853612*G2_0_1 + 0.262655698853616*G2_1_0 - 1.73674551302849e-14*G2_1_1;
    A[795] = 7.06156305114663*G0_0_0 + 3.1001984126985*G0_0_1 + 3.1001984126985*G0_1_0 + 7.06156305114663*G0_1_1 + 7.06156305114663*G2_0_0 + 3.1001984126985*G2_0_1 + 3.1001984126985*G2_1_0 + 7.06156305114663*G2_1_1;
    A[796] = -6.32957175925947*G0_0_0 - 3.05714010141102*G0_0_1 - 3.05714010141102*G0_1_0 - 1.8084490740741*G0_1_1 - 6.32957175925947*G2_0_0 - 3.05714010141102*G2_0_1 - 3.05714010141102*G2_1_0 - 1.8084490740741*G2_1_1;
    A[797] = 2.75573192239866*G0_0_0 + 1.37786596119932*G0_0_1 + 1.37786596119932*G0_1_0 + 1.0333994708995*G0_1_1 + 2.75573192239866*G2_0_0 + 1.37786596119932*G2_0_1 + 1.37786596119932*G2_1_0 + 1.0333994708995*G2_1_1;
    A[798] = -1.80844907407412*G0_0_0 - 3.05714010141102*G0_0_1 - 3.05714010141102*G0_1_0 - 6.32957175925948*G0_1_1 - 1.80844907407412*G2_0_0 - 3.05714010141102*G2_0_1 - 3.05714010141102*G2_1_0 - 6.32957175925948*G2_1_1;
    A[799] = 1.42092427248681*G0_0_0 + 1.46398258377428*G0_0_1 + 1.46398258377429*G0_1_0 + 1.42092427248679*G0_1_1 + 1.42092427248681*G2_0_0 + 1.46398258377428*G2_0_1 + 1.46398258377429*G2_1_0 + 1.42092427248679*G2_1_1;
    A[800] = 1.03339947089948*G0_0_0 + 1.37786596119933*G0_0_1 + 1.37786596119934*G0_1_0 + 2.75573192239869*G0_1_1 + 1.03339947089948*G2_0_0 + 1.37786596119933*G2_0_1 + 1.37786596119934*G2_1_0 + 2.75573192239869*G2_1_1;
    A[801] = 0.0;
    A[802] = 0.0;
    A[803] = 0.0;
    A[804] = 0.0;
    A[805] = 0.0;
    A[806] = 0.0;
    A[807] = 0.0;
    A[808] = 0.0;
    A[809] = 0.0;
    A[810] = 0.0;
    A[811] = 0.0;
    A[812] = 0.0;
    A[813] = 0.0;
    A[814] = 0.0;
    A[815] = 0.0;
    A[816] = 0.0;
    A[817] = 0.0;
    A[818] = 0.0;
    A[819] = 0.0;
    A[820] = 0.0;
    A[821] = 0.0;
    A[822] = 9.9206349206353*G4_0 + 9.92063492063526*G4_1;
    A[823] = -0.620039682539645*G4_0 + 6.15080902877096e-14*G4_1;
    A[824] = -0.620039682539688*G4_1;
    A[825] = -4.65029761904763*G4_0 - 0.93005952380943*G4_1;
    A[826] = -0.930059523809475*G4_0 - 4.65029761904777*G4_1;
    A[827] = 13.9508928571435*G4_0 - 10.2306547619051*G4_1;
    A[828] = 0.930059523809488*G4_0 + 0.930059523809527*G4_1;
    A[829] = -10.2306547619051*G4_0 + 13.9508928571434*G4_1;
    A[830] = 0.93005952380959*G4_0 + 0.930059523809633*G4_1;
    A[831] = -9.30059523809544*G4_0 - 9.30059523809561*G4_1;
    A[832] = -0.0538228891093441*G0_0_0 - 0.0538228891093443*G0_0_1 - 0.0538228891093457*G0_1_0 - 0.053822889109345*G0_1_1 - 0.0538228891093441*G2_0_0 - 0.0538228891093443*G2_0_1 - 0.0538228891093457*G2_1_0 - 0.053822889109345*G2_1_1;
    A[833] = -0.0538228891093546*G0_0_0 - 1.11013696607772e-14*G0_1_0 - 0.0538228891093546*G2_0_0 - 1.11013696607772e-14*G2_1_0;
    A[834] = 0.1076457782187*G0_1_1 + 0.1076457782187*G2_1_1;
    A[835] = 1.35633680555558*G0_0_0 + 0.572675540123458*G0_0_1 + 0.57267554012345*G0_1_0 - 3.35925677465848e-14*G0_1_1 + 1.35633680555558*G2_0_0 + 0.572675540123458*G2_0_1 + 0.57267554012345*G2_1_0 - 3.35925677465848e-14*G2_1_1;
    A[836] = 0.387524801587309*G0_0_0 + 0.859013310185201*G0_0_1 + 0.85901331018521*G0_1_0 + 1.01187031525576*G0_1_1 + 0.387524801587309*G2_0_0 + 0.859013310185201*G2_0_1 + 0.85901331018521*G2_1_0 + 1.01187031525576*G2_1_1;
    A[837] = 0.0430583112874681*G0_0_0 + 0.374607308201064*G0_0_1 + 0.374607308201065*G0_1_0 + 1.03339947089949*G0_1_1 + 0.0430583112874681*G2_0_0 + 0.374607308201064*G2_0_1 + 0.374607308201065*G2_1_0 + 1.03339947089949*G2_1_1;
    A[838] = -0.0731991291887152*G0_0_1 - 0.0731991291887099*G0_1_0 - 0.419818535052922*G0_1_1 - 0.0731991291887152*G2_0_1 - 0.0731991291887099*G2_1_0 - 0.419818535052922*G2_1_1;
    A[839] = 1.35633680555561*G0_0_0 + 0.783661265432123*G0_0_1 + 0.783661265432122*G0_1_0 + 0.210985725308642*G0_1_1 + 1.35633680555561*G2_0_0 + 0.783661265432123*G2_0_1 + 0.783661265432122*G2_1_0 + 0.210985725308642*G2_1_1;
    A[840] = 0.387524801587317*G0_0_0 - 0.471488508597902*G0_0_1 - 0.471488508597896*G0_1_0 - 0.318631503527342*G0_1_1 + 0.387524801587317*G2_0_0 - 0.471488508597902*G2_0_1 - 0.471488508597896*G2_1_0 - 0.318631503527342*G2_1_1;
    A[841] = 0.0430583112874756*G0_0_0 - 0.331548996913591*G0_0_1 - 0.331548996913594*G0_1_0 + 0.327243165784843*G0_1_1 + 0.0430583112874756*G2_0_0 - 0.331548996913591*G2_0_1 - 0.331548996913594*G2_1_0 + 0.327243165784843*G2_1_1;
    A[842] = 0.0731991291887146*G0_0_1 + 0.0731991291887107*G0_1_0 - 0.273420276675496*G0_1_1 + 0.0731991291887146*G2_0_1 + 0.0731991291887107*G2_1_0 - 0.273420276675496*G2_1_1;
    A[843] = 0.0495170579805794*G0_0_0 + 0.622192598104065*G0_0_1 + 0.62219259810406*G0_1_0 + 1.19486813822754*G0_1_1 + 0.0495170579805794*G2_0_0 + 0.622192598104065*G2_0_1 + 0.62219259810406*G2_1_0 + 1.19486813822754*G2_1_1;
    A[844] = 0.00430583112878154*G0_0_0 - 2.40911251653445*G0_0_1 - 2.40911251653445*G0_1_0 - 3.81066054894191*G0_1_1 + 0.00430583112878154*G2_0_0 - 2.40911251653445*G2_0_1 - 2.40911251653445*G2_1_0 - 3.81066054894191*G2_1_1;
    A[845] = 0.00430583112871381*G0_0_0 + 2.41341834766319*G0_0_1 + 2.41341834766319*G0_1_0 + 1.01187031525573*G0_1_1 + 0.00430583112871381*G2_0_0 + 2.41341834766319*G2_0_1 + 2.41341834766319*G2_1_0 + 1.01187031525573*G2_1_1;
    A[846] = 0.049517057980621*G0_0_0 - 0.572675540123461*G0_0_1 - 0.572675540123452*G0_1_0 + 3.26680143439978e-14*G0_1_1 + 0.049517057980621*G2_0_0 - 0.572675540123461*G2_0_1 - 0.572675540123452*G2_1_0 + 3.26680143439978e-14*G2_1_1;
    A[847] = -6.32957175925947*G0_0_0 - 3.05714010141102*G0_0_1 - 3.05714010141102*G0_1_0 - 1.8084490740741*G0_1_1 - 6.32957175925947*G2_0_0 - 3.05714010141102*G2_0_1 - 3.05714010141102*G2_1_0 - 1.8084490740741*G2_1_1;
    A[848] = 9.94646990740772*G0_0_0 + 4.97323495370383*G0_0_1 + 4.97323495370383*G0_1_0 + 8.65472056878335*G0_1_1 + 9.94646990740772*G2_0_0 + 4.97323495370383*G2_0_1 + 4.97323495370383*G2_1_0 + 8.65472056878335*G2_1_1;
    A[849] = -6.32957175925944*G0_0_0 - 3.27243165784839*G0_0_1 - 3.27243165784838*G0_1_0 - 2.02374063051149*G0_1_1 - 6.32957175925944*G2_0_0 - 3.27243165784839*G2_0_1 - 3.27243165784838*G2_1_0 - 2.02374063051149*G2_1_1;
    A[850] = -0.387524801587325*G0_0_0 + 2.55120494378314*G0_0_1 + 2.55120494378315*G0_1_0 - 0.387524801587348*G0_1_1 - 0.387524801587325*G2_0_0 + 2.55120494378314*G2_0_1 + 2.55120494378315*G2_1_0 - 0.387524801587348*G2_1_1;
    A[851] = -0.387524801587297*G0_0_0 - 2.93872974537045*G0_0_1 - 2.93872974537046*G0_1_0 - 5.87745949074094*G0_1_1 - 0.387524801587297*G2_0_0 - 2.93872974537045*G2_0_1 - 2.93872974537046*G2_1_0 - 5.87745949074094*G2_1_1;
    A[852] = -0.0861166225749446*G0_0_0 - 0.0430583112874736*G0_0_1 - 0.0430583112874722*G0_1_0 + 1.42092427248683*G0_1_1 - 0.0861166225749446*G2_0_0 - 0.0430583112874736*G2_0_1 - 0.0430583112874722*G2_1_0 + 1.42092427248683*G2_1_1;
    A[853] = 0.0;
    A[854] = 0.0;
    A[855] = 0.0;
    A[856] = 0.0;
    A[857] = 0.0;
    A[858] = 0.0;
    A[859] = 0.0;
    A[860] = 0.0;
    A[861] = 0.0;
    A[862] = 0.0;
    A[863] = 0.0;
    A[864] = 0.0;
    A[865] = 0.0;
    A[866] = 0.0;
    A[867] = 0.0;
    A[868] = 0.0;
    A[869] = 0.0;
    A[870] = 0.0;
    A[871] = 0.0;
    A[872] = 0.0;
    A[873] = 0.0;
    A[874] = -5.7353670634923*G4_0 - 5.73536706349227*G4_1;
    A[875] = 5.73536706349219*G4_0 - 1.54416410214075e-13*G4_1;
    A[876] = 1.51198498166139e-14*G4_0 - 1.2400793650794*G4_1;
    A[877] = -2.58730536994989e-13*G4_0 + 2.79017857142837*G4_1;
    A[878] = 2.79017857142867*G4_0 + 6.97544642857171*G4_1;
    A[879] = -7.04884284621898e-14*G4_0 + 2.79017857142865*G4_1;
    A[880] = -2.79017857142861*G4_0 + 4.18526785714303*G4_1;
    A[881] = 23.7165178571437*G4_0 + 20.9263392857151*G4_1;
    A[882] = -23.7165178571437*G4_0 - 2.79017857142867*G4_1;
    A[883] = 8.05305800342937e-14*G4_0 - 27.9017857142867*G4_1;
    A[884] = 0.107645778218695*G0_0_0 + 0.107645778218697*G0_0_1 + 0.107645778218695*G0_1_0 + 0.107645778218695*G0_1_1 + 0.107645778218695*G2_0_0 + 0.107645778218697*G2_0_1 + 0.107645778218695*G2_1_0 + 0.107645778218695*G2_1_1;
    A[885] = -0.21529155643739*G0_0_0 + 1.31800545819091e-14*G0_1_0 - 0.21529155643739*G2_0_0 + 1.31800545819091e-14*G2_1_0;
    A[886] = 0.107645778218701*G0_1_1 + 0.107645778218701*G2_1_1;
    A[887] = -2.82031938932988*G0_0_0 - 1.66205081569668*G0_0_1 - 1.66205081569668*G0_1_0 + 4.43145140808371e-14*G0_1_1 - 2.82031938932988*G2_0_0 - 1.66205081569668*G2_0_1 - 1.66205081569668*G2_1_0 + 4.43145140808371e-14*G2_1_1;
    A[888] = 0.73199129188715*G0_0_0 - 1.30897266313937*G0_0_1 - 1.30897266313938*G0_1_0 - 3.96136463844813*G0_1_1 + 0.73199129188715*G2_0_0 - 1.30897266313937*G2_0_1 - 1.30897266313938*G2_1_0 - 3.96136463844813*G2_1_1;
    A[889] = -0.516699735449747*G0_0_0 + 0.413359788359806*G0_0_1 + 0.413359788359819*G0_1_0 + 2.02374063051156*G0_1_1 - 0.516699735449747*G2_0_0 + 0.413359788359806*G2_0_1 + 0.413359788359819*G2_1_0 + 2.02374063051156*G2_1_1;
    A[890] = -0.262655698853625*G0_0_1 - 0.262655698853625*G0_1_0 - 0.990341159612035*G0_1_1 - 0.262655698853625*G2_0_1 - 0.262655698853625*G2_1_0 - 0.990341159612035*G2_1_1;
    A[891] = -0.667403824955926*G0_0_0 - 0.404748126102308*G0_0_1 - 0.404748126102312*G0_1_0 - 0.142092427248682*G0_1_1 - 0.667403824955926*G2_0_0 - 0.404748126102308*G2_0_1 - 0.404748126102312*G2_1_0 - 0.142092427248682*G2_1_1;
    A[892] = -0.344466490299839*G0_0_0 + 0.103339947089949*G0_0_1 + 0.103339947089952*G0_1_0 + 0.0344466490299855*G0_1_1 - 0.344466490299839*G2_0_0 + 0.103339947089949*G2_0_1 + 0.103339947089952*G2_1_0 + 0.0344466490299855*G2_1_1;
    A[893] = -0.516699735449749*G0_0_0 - 0.068893298059965*G0_0_1 - 0.0688932980599625*G0_1_0 + 0.0344466490299823*G0_1_1 - 0.516699735449749*G2_0_0 - 0.068893298059965*G2_0_1 - 0.0688932980599625*G2_1_0 + 0.0344466490299823*G2_1_1;
    A[894] = 0.262655698853623*G0_0_1 + 0.262655698853625*G0_1_0 - 0.142092427248683*G0_1_1 + 0.262655698853623*G2_0_1 + 0.262655698853625*G2_1_0 - 0.142092427248683*G2_1_1;
    A[895] = -0.46502976190476*G0_0_0 - 0.727685460758384*G0_0_1 - 0.727685460758387*G0_1_0 - 0.990341159612022*G0_1_1 - 0.46502976190476*G2_0_0 - 0.727685460758384*G2_0_1 - 0.727685460758387*G2_1_0 - 0.990341159612022*G2_1_1;
    A[896] = 0.680321318342144*G0_0_0 + 1.6103808421517*G0_0_1 + 1.6103808421517*G0_1_0 + 2.0237406305115*G0_1_1 + 0.680321318342144*G2_0_0 + 1.6103808421517*G2_0_1 + 1.6103808421517*G2_1_0 + 2.0237406305115*G2_1_1;
    A[897] = -0.611428020282173*G0_0_0 - 2.65239197530871*G0_0_1 - 2.65239197530871*G0_1_0 - 3.96136463844809*G0_1_1 - 0.611428020282173*G2_0_0 - 2.65239197530871*G2_0_1 - 2.65239197530871*G2_1_0 - 3.96136463844809*G2_1_1;
    A[898] = 0.503782242063486*G0_0_0 + 1.66205081569669*G0_0_1 + 1.66205081569669*G0_1_0 - 3.92366261009469e-14*G0_1_1 + 0.503782242063486*G2_0_0 + 1.66205081569669*G2_0_1 + 1.66205081569669*G2_1_0 - 3.92366261009469e-14*G2_1_1;
    A[899] = 2.75573192239866*G0_0_0 + 1.37786596119932*G0_0_1 + 1.37786596119932*G0_1_0 + 1.0333994708995*G0_1_1 + 2.75573192239866*G2_0_0 + 1.37786596119932*G2_0_1 + 1.37786596119932*G2_1_0 + 1.0333994708995*G2_1_1;
    A[900] = -6.32957175925943*G0_0_0 - 3.27243165784838*G0_0_1 - 3.27243165784839*G0_1_0 - 2.02374063051149*G0_1_1 - 6.32957175925943*G2_0_0 - 3.27243165784838*G2_0_1 - 3.27243165784839*G2_1_0 - 2.02374063051149*G2_1_1;
    A[901] = 7.06156305114658*G0_0_0 + 3.96136463844806*G0_0_1 + 3.96136463844806*G0_1_0 + 7.9227292768962*G0_1_1 + 7.06156305114658*G2_0_0 + 3.96136463844806*G2_0_1 + 3.96136463844806*G2_1_0 + 7.9227292768962*G2_1_1;
    A[902] = 1.42092427248683*G0_0_0 - 0.0430583112874701*G0_0_1 - 0.043058311287479*G0_1_0 - 0.0861166225749552*G0_1_1 + 1.42092427248683*G2_0_0 - 0.0430583112874701*G2_0_1 - 0.043058311287479*G2_1_0 - 0.0861166225749552*G2_1_1;
    A[903] = -1.80844907407414*G0_0_0 + 1.24869102733689*G0_0_1 + 1.2486910273369*G0_1_0 - 2.02374063051155*G0_1_1 - 1.80844907407414*G2_0_0 + 1.24869102733689*G2_0_1 + 1.2486910273369*G2_1_0 - 2.02374063051155*G2_1_1;
    A[904] = 1.0333994708995*G0_0_0 - 0.344466490299838*G0_0_1 - 0.344466490299856*G0_1_0 + 1.0333994708995*G0_1_1 + 1.0333994708995*G2_0_0 - 0.344466490299838*G2_0_1 - 0.344466490299856*G2_1_0 + 1.0333994708995*G2_1_1;
    A[905] = 0.0;
    A[906] = 0.0;
    A[907] = 0.0;
    A[908] = 0.0;
    A[909] = 0.0;
    A[910] = 0.0;
    A[911] = 0.0;
    A[912] = 0.0;
    A[913] = 0.0;
    A[914] = 0.0;
    A[915] = 0.0;
    A[916] = 0.0;
    A[917] = 0.0;
    A[918] = 0.0;
    A[919] = 0.0;
    A[920] = 0.0;
    A[921] = 0.0;
    A[922] = 0.0;
    A[923] = 0.0;
    A[924] = 0.0;
    A[925] = 0.0;
    A[926] = 0.620039682539714*G4_0 + 0.620039682539756*G4_1;
    A[927] = -9.9206349206352*G4_0 + 1.73967611150072e-13*G4_1;
    A[928] = -0.620039682539668*G4_1;
    A[929] = -13.9508928571432*G4_0 - 24.1815476190481*G4_1;
    A[930] = -0.930059523809583*G4_0 - 3.13499226578529e-14*G4_1;
    A[931] = 4.65029761904776*G4_0 + 3.72023809523825*G4_1;
    A[932] = 0.930059523809559*G4_0 - 3.72023809523826*G4_1;
    A[933] = -0.93005952380965*G4_0 + 2.98020072161953e-14*G4_1;
    A[934] = 10.2306547619052*G4_0 + 24.1815476190487*G4_1;
    A[935] = 9.30059523809546*G4_0 + 3.13436668113176e-13*G4_1;
    A[936] = -0.0538228891093465*G0_0_0 - 0.0538228891093469*G0_0_1 - 0.0538228891093494*G0_1_0 - 0.0538228891093501*G0_1_1 - 0.0538228891093465*G2_0_0 - 0.0538228891093469*G2_0_1 - 0.0538228891093494*G2_1_0 - 0.0538228891093501*G2_1_1;
    A[937] = 0.107645778218698*G0_0_0 + 0.107645778218698*G2_0_0;
    A[938] = -0.05382288910935*G0_1_1 - 0.05382288910935*G2_1_1;
    A[939] = -0.419818535052932*G0_0_0 - 0.0731991291887225*G0_0_1 - 0.0731991291887193*G0_1_0 - 0.419818535052932*G2_0_0 - 0.0731991291887225*G2_0_1 - 0.0731991291887193*G2_1_0;
    A[940] = 1.03339947089951*G0_0_0 + 0.374607308201078*G0_0_1 + 0.374607308201069*G0_1_0 + 0.0430583112874851*G0_1_1 + 1.03339947089951*G2_0_0 + 0.374607308201078*G2_0_1 + 0.374607308201069*G2_1_0 + 0.0430583112874851*G2_1_1;
    A[941] = 1.01187031525575*G0_0_0 + 0.859013310185189*G0_0_1 + 0.859013310185202*G0_1_0 + 0.387524801587297*G0_1_1 + 1.01187031525575*G2_0_0 + 0.859013310185189*G2_0_1 + 0.859013310185202*G2_1_0 + 0.387524801587297*G2_1_1;
    A[942] = 1.092181900475e-14*G0_0_0 + 0.572675540123482*G0_0_1 + 0.572675540123477*G0_1_0 + 1.35633680555561*G0_1_1 + 1.092181900475e-14*G2_0_0 + 0.572675540123482*G2_0_1 + 0.572675540123477*G2_1_0 + 1.35633680555561*G2_1_1;
    A[943] = 1.19486813822755*G0_0_0 + 0.622192598104068*G0_0_1 + 0.622192598104066*G0_1_0 + 0.0495170579805985*G0_1_1 + 1.19486813822755*G2_0_0 + 0.622192598104068*G2_0_1 + 0.622192598104066*G2_1_0 + 0.0495170579805985*G2_1_1;
    A[944] = -3.81066054894193*G0_0_0 - 2.40911251653446*G0_0_1 - 2.40911251653447*G0_1_0 + 0.00430583112875212*G0_1_1 - 3.81066054894193*G2_0_0 - 2.40911251653446*G2_0_1 - 2.40911251653447*G2_1_0 + 0.00430583112875212*G2_1_1;
    A[945] = 1.01187031525576*G0_0_0 + 2.41341834766321*G0_0_1 + 2.41341834766321*G0_1_0 + 0.00430583112874364*G0_1_1 + 1.01187031525576*G2_0_0 + 2.41341834766321*G2_0_1 + 2.41341834766321*G2_1_0 + 0.00430583112874364*G2_1_1;
    A[946] = -1.06165076729781e-14*G0_0_0 - 0.572675540123476*G0_0_1 - 0.572675540123477*G0_1_0 + 0.0495170579806044*G0_1_1 - 1.06165076729781e-14*G2_0_0 - 0.572675540123476*G2_0_1 - 0.572675540123477*G2_1_0 + 0.0495170579806044*G2_1_1;
    A[947] = 0.210985725308643*G0_0_0 + 0.783661265432122*G0_0_1 + 0.783661265432127*G0_1_0 + 1.3563368055556*G0_1_1 + 0.210985725308643*G2_0_0 + 0.783661265432122*G2_0_1 + 0.783661265432127*G2_1_0 + 1.3563368055556*G2_1_1;
    A[948] = -0.318631503527344*G0_0_0 - 0.471488508597898*G0_0_1 - 0.471488508597901*G0_1_0 + 0.38752480158733*G0_1_1 - 0.318631503527344*G2_0_0 - 0.471488508597898*G2_0_1 - 0.471488508597901*G2_1_0 + 0.38752480158733*G2_1_1;
    A[949] = 0.327243165784843*G0_0_0 - 0.331548996913589*G0_0_1 - 0.331548996913593*G0_1_0 + 0.0430583112874768*G0_1_1 + 0.327243165784843*G2_0_0 - 0.331548996913589*G2_0_1 - 0.331548996913593*G2_1_0 + 0.0430583112874768*G2_1_1;
    A[950] = -0.273420276675496*G0_0_0 + 0.0731991291887186*G0_0_1 + 0.0731991291887152*G0_1_0 - 0.273420276675496*G2_0_0 + 0.0731991291887186*G2_0_1 + 0.0731991291887152*G2_1_0;
    A[951] = -1.80844907407412*G0_0_0 - 3.05714010141102*G0_0_1 - 3.05714010141102*G0_1_0 - 6.32957175925948*G0_1_1 - 1.80844907407412*G2_0_0 - 3.05714010141102*G2_0_1 - 3.05714010141102*G2_1_0 - 6.32957175925948*G2_1_1;
    A[952] = -0.387524801587325*G0_0_0 + 2.55120494378315*G0_0_1 + 2.55120494378314*G0_1_0 - 0.387524801587348*G0_1_1 - 0.387524801587325*G2_0_0 + 2.55120494378315*G2_0_1 + 2.55120494378314*G2_1_0 - 0.387524801587348*G2_1_1;
    A[953] = 1.42092427248683*G0_0_0 - 0.043058311287479*G0_0_1 - 0.0430583112874702*G0_1_0 - 0.0861166225749552*G0_1_1 + 1.42092427248683*G2_0_0 - 0.043058311287479*G2_0_1 - 0.0430583112874702*G2_1_0 - 0.0861166225749552*G2_1_1;
    A[954] = 8.65472056878336*G0_0_0 + 4.97323495370386*G0_0_1 + 4.97323495370386*G0_1_0 + 9.94646990740775*G0_1_1 + 8.65472056878336*G2_0_0 + 4.97323495370386*G2_0_1 + 4.97323495370386*G2_1_0 + 9.94646990740775*G2_1_1;
    A[955] = -5.87745949074094*G0_0_0 - 2.93872974537045*G0_0_1 - 2.93872974537046*G0_1_0 - 0.387524801587285*G0_1_1 - 5.87745949074094*G2_0_0 - 2.93872974537045*G2_0_1 - 2.93872974537046*G2_1_0 - 0.387524801587285*G2_1_1;
    A[956] = -2.0237406305115*G0_0_0 - 3.27243165784843*G0_0_1 - 3.27243165784841*G0_1_0 - 6.32957175925947*G0_1_1 - 2.0237406305115*G2_0_0 - 3.27243165784843*G2_0_1 - 3.27243165784841*G2_1_0 - 6.32957175925947*G2_1_1;
    A[957] = 0.0;
    A[958] = 0.0;
    A[959] = 0.0;
    A[960] = 0.0;
    A[961] = 0.0;
    A[962] = 0.0;
    A[963] = 0.0;
    A[964] = 0.0;
    A[965] = 0.0;
    A[966] = 0.0;
    A[967] = 0.0;
    A[968] = 0.0;
    A[969] = 0.0;
    A[970] = 0.0;
    A[971] = 0.0;
    A[972] = 0.0;
    A[973] = 0.0;
    A[974] = 0.0;
    A[975] = 0.0;
    A[976] = 0.0;
    A[977] = 0.0;
    A[978] = -5.73536706349228*G4_0 - 5.73536706349225*G4_1;
    A[979] = -1.24007936507941*G4_0;
    A[980] = 3.60267371490863e-14*G4_0 + 5.73536706349225*G4_1;
    A[981] = 6.97544642857157*G4_0 + 2.79017857142861*G4_1;
    A[982] = 2.79017857142855*G4_0 - 1.07192033027559e-13*G4_1;
    A[983] = 20.926339285715*G4_0 + 23.7165178571437*G4_1;
    A[984] = -2.79017857142853*G4_0 - 23.7165178571436*G4_1;
    A[985] = 2.79017857142867*G4_0 - 3.7684428060708e-14*G4_1;
    A[986] = 4.18526785714293*G4_0 - 2.79017857142874*G4_1;
    A[987] = -27.9017857142867*G4_0 + 2.48747637071611e-13*G4_1;
    A[988] = 0.107645778218698*G0_0_0 + 0.107645778218697*G0_0_1 + 0.107645778218701*G0_1_0 + 0.107645778218701*G0_1_1 + 0.107645778218698*G2_0_0 + 0.107645778218697*G2_0_1 + 0.107645778218701*G2_1_0 + 0.107645778218701*G2_1_1;
    A[989] = -0.0538228891093489*G0_0_0 - 0.0538228891093489*G2_0_0;
    A[990] = -0.0538228891093543*G0_1_1 - 0.0538228891093543*G2_1_1;
    A[991] = 1.19486813822756*G0_0_0 + 0.572675540123479*G0_0_1 + 0.572675540123477*G0_1_0 + 1.19486813822756*G2_0_0 + 0.572675540123479*G2_0_1 + 0.572675540123477*G2_1_0;
    A[992] = -3.81066054894193*G0_0_0 - 1.40154803240746*G0_0_1 - 1.40154803240746*G0_1_0 + 1.01187031525577*G0_1_1 - 3.81066054894193*G2_0_0 - 1.40154803240746*G2_0_1 - 1.40154803240746*G2_1_0 + 1.01187031525577*G2_1_1;
    A[993] = 1.01187031525578*G0_0_0 - 1.40154803240744*G0_0_1 - 1.40154803240745*G0_1_0 - 3.81066054894192*G0_1_1 + 1.01187031525578*G2_0_0 - 1.40154803240744*G2_0_1 - 1.40154803240745*G2_1_0 - 3.81066054894192*G2_1_1;
    A[994] = -1.18308141061618e-14*G0_0_0 + 0.57267554012347*G0_0_1 + 0.57267554012346*G0_1_0 + 1.19486813822754*G0_1_1 - 1.18308141061618e-14*G2_0_0 + 0.57267554012347*G2_0_1 + 0.57267554012346*G2_1_0 + 1.19486813822754*G2_1_1;
    A[995] = -0.419818535052927*G0_0_0 - 0.346619405864206*G0_0_1 - 0.346619405864193*G0_1_0 - 0.273420276675492*G0_1_1 - 0.419818535052927*G2_0_0 - 0.346619405864206*G2_0_1 - 0.346619405864193*G2_1_0 - 0.273420276675492*G2_1_1;
    A[996] = 1.03339947089951*G0_0_0 + 0.658792162698434*G0_0_1 + 0.65879216269843*G0_1_0 + 0.327243165784839*G0_1_1 + 1.03339947089951*G2_0_0 + 0.658792162698434*G2_0_1 + 0.65879216269843*G2_1_0 + 0.327243165784839*G2_1_1;
    A[997] = 1.01187031525576*G0_0_0 + 0.152857005070549*G0_0_1 + 0.152857005070557*G0_1_0 - 0.318631503527348*G0_1_1 + 1.01187031525576*G2_0_0 + 0.152857005070549*G2_0_1 + 0.152857005070557*G2_1_0 - 0.318631503527348*G2_1_1;
    A[998] = 1.031813523511e-14*G0_0_0 - 0.572675540123472*G0_0_1 - 0.572675540123461*G0_1_0 + 0.210985725308654*G0_1_1 + 1.031813523511e-14*G2_0_0 - 0.572675540123472*G2_0_1 - 0.572675540123461*G2_1_0 + 0.210985725308654*G2_1_1;
    A[999] = -0.273420276675492*G0_0_0 - 0.346619405864208*G0_0_1 - 0.346619405864206*G0_1_0 - 0.419818535052906*G0_1_1 - 0.273420276675492*G2_0_0 - 0.346619405864208*G2_0_1 - 0.346619405864206*G2_1_0 - 0.419818535052906*G2_1_1;
    A[1000] = 0.32724316578484*G0_0_0 + 0.658792162698431*G0_0_1 + 0.658792162698431*G0_1_0 + 1.03339947089951*G0_1_1 + 0.32724316578484*G2_0_0 + 0.658792162698431*G2_0_1 + 0.658792162698431*G2_1_0 + 1.03339947089951*G2_1_1;
    A[1001] = -0.31863150352735*G0_0_0 + 0.152857005070546*G0_0_1 + 0.152857005070556*G0_1_0 + 1.01187031525578*G0_1_1 - 0.31863150352735*G2_0_0 + 0.152857005070546*G2_0_1 + 0.152857005070556*G2_1_0 + 1.01187031525578*G2_1_1;
    A[1002] = 0.210985725308654*G0_0_0 - 0.572675540123477*G0_0_1 - 0.572675540123481*G0_1_0 + 0.210985725308654*G2_0_0 - 0.572675540123477*G2_0_1 - 0.572675540123481*G2_1_0;
    A[1003] = 1.42092427248681*G0_0_0 + 1.46398258377429*G0_0_1 + 1.46398258377428*G0_1_0 + 1.42092427248679*G0_1_1 + 1.42092427248681*G2_0_0 + 1.46398258377429*G2_0_1 + 1.46398258377428*G2_1_0 + 1.42092427248679*G2_1_1;
    A[1004] = -0.387524801587297*G0_0_0 - 2.93872974537046*G0_0_1 - 2.93872974537045*G0_1_0 - 5.87745949074094*G0_1_1 - 0.387524801587297*G2_0_0 - 2.93872974537046*G2_0_1 - 2.93872974537045*G2_1_0 - 5.87745949074094*G2_1_1;
    A[1005] = -1.80844907407414*G0_0_0 + 1.2486910273369*G0_0_1 + 1.24869102733689*G0_1_0 - 2.02374063051155*G0_1_1 - 1.80844907407414*G2_0_0 + 1.2486910273369*G2_0_1 + 1.24869102733689*G2_1_0 - 2.02374063051155*G2_1_1;
    A[1006] = -5.87745949074094*G0_0_0 - 2.93872974537046*G0_0_1 - 2.93872974537045*G0_1_0 - 0.387524801587284*G0_1_1 - 5.87745949074094*G2_0_0 - 2.93872974537046*G2_0_1 - 2.93872974537045*G2_1_0 - 0.387524801587284*G2_1_1;
    A[1007] = 8.65472056878336*G0_0_0 + 3.68148561507948*G0_0_1 + 3.68148561507948*G0_1_0 + 8.65472056878336*G0_1_1 + 8.65472056878336*G2_0_0 + 3.68148561507948*G2_0_1 + 3.68148561507948*G2_1_0 + 8.65472056878336*G2_1_1;
    A[1008] = -2.02374063051155*G0_0_0 + 1.2486910273369*G0_0_1 + 1.24869102733689*G0_1_0 - 1.80844907407414*G0_1_1 - 2.02374063051155*G2_0_0 + 1.2486910273369*G2_0_1 + 1.24869102733689*G2_1_0 - 1.80844907407414*G2_1_1;
    A[1009] = 0.0;
    A[1010] = 0.0;
    A[1011] = 0.0;
    A[1012] = 0.0;
    A[1013] = 0.0;
    A[1014] = 0.0;
    A[1015] = 0.0;
    A[1016] = 0.0;
    A[1017] = 0.0;
    A[1018] = 0.0;
    A[1019] = 0.0;
    A[1020] = 0.0;
    A[1021] = 0.0;
    A[1022] = 0.0;
    A[1023] = 0.0;
    A[1024] = 0.0;
    A[1025] = 0.0;
    A[1026] = 0.0;
    A[1027] = 0.0;
    A[1028] = 0.0;
    A[1029] = 0.0;
    A[1030] = 1.24007936507942*G4_0 + 1.24007936507933*G4_1;
    A[1031] = 5.73536706349226*G4_0 - 2.28254914969028e-14*G4_1;
    A[1032] = -3.88855614374961e-14*G4_0 + 5.73536706349216*G4_1;
    A[1033] = -20.9263392857149*G4_0 + 2.79017857142865*G4_1;
    A[1034] = 2.79017857142868*G4_0 - 20.9263392857151*G4_1;
    A[1035] = -6.97544642857167*G4_0 - 4.18526785714311*G4_1;
    A[1036] = -2.79017857142876*G4_0 - 2.79017857142878*G4_1;
    A[1037] = -4.18526785714296*G4_0 - 6.97544642857184*G4_1;
    A[1038] = -2.7901785714286*G4_0 - 2.7901785714288*G4_1;
    A[1039] = 27.9017857142868*G4_0 + 27.9017857142862*G4_1;
    A[1040] = 0.107645778218695*G0_0_0 + 0.107645778218695*G0_0_1 + 0.107645778218697*G0_1_0 + 0.107645778218697*G0_1_1 + 0.107645778218695*G2_0_0 + 0.107645778218695*G2_0_1 + 0.107645778218697*G2_1_0 + 0.107645778218697*G2_1_1;
    A[1041] = 0.107645778218697*G0_0_0 + 0.107645778218697*G2_0_0;
    A[1042] = -0.215291556437395*G0_1_1 - 0.215291556437395*G2_1_1;
    A[1043] = -0.990341159612021*G0_0_0 - 0.262655698853624*G0_0_1 - 0.262655698853624*G0_1_0 - 0.990341159612021*G2_0_0 - 0.262655698853624*G2_0_1 - 0.262655698853624*G2_1_0;
    A[1044] = 2.02374063051153*G0_0_0 + 0.413359788359809*G0_0_1 + 0.413359788359804*G0_1_0 - 0.516699735449756*G0_1_1 + 2.02374063051153*G2_0_0 + 0.413359788359809*G2_0_1 + 0.413359788359804*G2_1_0 - 0.516699735449756*G2_1_1;
    A[1045] = -3.96136463844809*G0_0_0 - 1.30897266313936*G0_0_1 - 1.30897266313936*G0_1_0 + 0.731991291887165*G0_1_1 - 3.96136463844809*G2_0_0 - 1.30897266313936*G2_0_1 - 1.30897266313936*G2_1_0 + 0.731991291887165*G2_1_1;
    A[1046] = -1.66205081569671*G0_0_1 - 1.66205081569671*G0_1_0 - 2.8203193893299*G0_1_1 - 1.66205081569671*G2_0_1 - 1.66205081569671*G2_1_0 - 2.8203193893299*G2_1_1;
    A[1047] = -0.990341159612013*G0_0_0 - 0.727685460758387*G0_0_1 - 0.727685460758397*G0_1_0 - 0.465029761904772*G0_1_1 - 0.990341159612013*G2_0_0 - 0.727685460758387*G2_0_1 - 0.727685460758397*G2_1_0 - 0.465029761904772*G2_1_1;
    A[1048] = 2.02374063051152*G0_0_0 + 1.61038084215171*G0_0_1 + 1.61038084215172*G0_1_0 + 0.680321318342169*G0_1_1 + 2.02374063051152*G2_0_0 + 1.61038084215171*G2_0_1 + 1.61038084215172*G2_1_0 + 0.680321318342169*G2_1_1;
    A[1049] = -3.96136463844808*G0_0_0 - 2.65239197530872*G0_0_1 - 2.65239197530873*G0_1_0 - 0.611428020282207*G0_1_1 - 3.96136463844808*G2_0_0 - 2.65239197530872*G2_0_1 - 2.65239197530873*G2_1_0 - 0.611428020282207*G2_1_1;
    A[1050] = 1.6620508156967*G0_0_1 + 1.66205081569671*G0_1_0 + 0.503782242063509*G0_1_1 + 1.6620508156967*G2_0_1 + 1.66205081569671*G2_1_0 + 0.503782242063509*G2_1_1;
    A[1051] = -0.142092427248675*G0_0_0 - 0.404748126102306*G0_0_1 - 0.404748126102305*G0_1_0 - 0.667403824955933*G0_1_1 - 0.142092427248675*G2_0_0 - 0.404748126102306*G2_0_1 - 0.404748126102305*G2_1_0 - 0.667403824955933*G2_1_1;
    A[1052] = 0.0344466490299813*G0_0_0 + 0.103339947089946*G0_0_1 + 0.10333994708995*G0_1_0 - 0.344466490299843*G0_1_1 + 0.0344466490299813*G2_0_0 + 0.103339947089946*G2_0_1 + 0.10333994708995*G2_1_0 - 0.344466490299843*G2_1_1;
    A[1053] = 0.0344466490299831*G0_0_0 - 0.0688932980599634*G0_0_1 - 0.0688932980599677*G0_1_0 - 0.516699735449754*G0_1_1 + 0.0344466490299831*G2_0_0 - 0.0688932980599634*G2_0_1 - 0.0688932980599677*G2_1_0 - 0.516699735449754*G2_1_1;
    A[1054] = -0.142092427248682*G0_0_0 + 0.262655698853628*G0_0_1 + 0.262655698853626*G0_1_0 - 0.142092427248682*G2_0_0 + 0.262655698853628*G2_0_1 + 0.262655698853626*G2_1_0;
    A[1055] = 1.03339947089948*G0_0_0 + 1.37786596119934*G0_0_1 + 1.37786596119933*G0_1_0 + 2.75573192239869*G0_1_1 + 1.03339947089948*G2_0_0 + 1.37786596119934*G2_0_1 + 1.37786596119933*G2_1_0 + 2.75573192239869*G2_1_1;
    A[1056] = -0.0861166225749447*G0_0_0 - 0.0430583112874721*G0_0_1 - 0.0430583112874735*G0_1_0 + 1.42092427248683*G0_1_1 - 0.0861166225749447*G2_0_0 - 0.0430583112874721*G2_0_1 - 0.0430583112874735*G2_1_0 + 1.42092427248683*G2_1_1;
    A[1057] = 1.0333994708995*G0_0_0 - 0.344466490299856*G0_0_1 - 0.344466490299838*G0_1_0 + 1.0333994708995*G0_1_1 + 1.0333994708995*G2_0_0 - 0.344466490299856*G2_0_1 - 0.344466490299838*G2_1_0 + 1.0333994708995*G2_1_1;
    A[1058] = -2.0237406305115*G0_0_0 - 3.27243165784841*G0_0_1 - 3.27243165784843*G0_1_0 - 6.32957175925947*G0_1_1 - 2.0237406305115*G2_0_0 - 3.27243165784841*G2_0_1 - 3.27243165784843*G2_1_0 - 6.32957175925947*G2_1_1;
    A[1059] = -2.02374063051155*G0_0_0 + 1.24869102733689*G0_0_1 + 1.2486910273369*G0_1_0 - 1.80844907407414*G0_1_1 - 2.02374063051155*G2_0_0 + 1.24869102733689*G2_0_1 + 1.2486910273369*G2_1_0 - 1.80844907407414*G2_1_1;
    A[1060] = 7.92272927689616*G0_0_0 + 3.96136463844809*G0_0_1 + 3.96136463844809*G0_1_0 + 7.06156305114661*G0_1_1 + 7.92272927689616*G2_0_0 + 3.96136463844809*G2_0_1 + 3.96136463844809*G2_1_0 + 7.06156305114661*G2_1_1;
    A[1061] = 0.0;
    A[1062] = 0.0;
    A[1063] = 0.0;
    A[1064] = 0.0;
    A[1065] = 0.0;
    A[1066] = 0.0;
    A[1067] = 0.0;
    A[1068] = 0.0;
    A[1069] = 0.0;
    A[1070] = 0.0;
    A[1071] = 0.0;
    A[1072] = 0.0;
    A[1073] = 0.0;
    A[1074] = 0.0;
    A[1075] = 0.0;
    A[1076] = 0.0;
    A[1077] = 0.0;
    A[1078] = 0.0;
    A[1079] = 0.0;
    A[1080] = 0.0;
    A[1081] = 0.0;
    A[1082] = 0.620039682539737*G4_0 + 0.620039682539731*G4_1;
    A[1083] = -0.620039682539726*G4_0;
    A[1084] = -9.92063492063523*G4_1;
    A[1085] = 7.38853422888042e-14*G4_0 - 0.930059523809547*G4_1;
    A[1086] = -24.1815476190484*G4_0 - 13.9508928571432*G4_1;
    A[1087] = -6.14248235608628e-14*G4_0 - 0.930059523809603*G4_1;
    A[1088] = 24.1815476190483*G4_0 + 10.2306547619051*G4_1;
    A[1089] = 3.72023809523824*G4_0 + 4.65029761904782*G4_1;
    A[1090] = -3.72023809523822*G4_0 + 0.93005952380958*G4_1;
    A[1091] = 5.17736895022658e-14*G4_0 + 9.30059523809559*G4_1;
    A[1092] = 0.0;
    A[1093] = 0.0;
    A[1094] = 0.0;
    A[1095] = 0.0;
    A[1096] = 0.0;
    A[1097] = 0.0;
    A[1098] = 0.0;
    A[1099] = 0.0;
    A[1100] = 0.0;
    A[1101] = 0.0;
    A[1102] = 0.0;
    A[1103] = 0.0;
    A[1104] = 0.0;
    A[1105] = 0.0;
    A[1106] = 0.0;
    A[1107] = 0.0;
    A[1108] = 0.0;
    A[1109] = 0.0;
    A[1110] = 0.0;
    A[1111] = 0.0;
    A[1112] = 0.0;
    A[1113] = 0.342406580687844*G1_0_0 + 0.342406580687845*G1_0_1 + 0.342406580687845*G1_1_0 + 0.342406580687845*G1_1_1 + 0.342406580687844*G3_0_0 + 0.342406580687845*G3_0_1 + 0.342406580687845*G3_1_0 + 0.342406580687845*G3_1_1;
    A[1114] = -0.0409984016754854*G1_0_0 - 0.0409984016754864*G1_1_0 - 0.0409984016754854*G3_0_0 - 0.0409984016754864*G3_1_0;
    A[1115] = -0.0409984016754868*G1_0_1 - 0.0409984016754872*G1_1_1 - 0.0409984016754868*G3_0_1 - 0.0409984016754872*G3_1_1;
    A[1116] = -0.0408192791005292*G1_0_0 - 0.0408192791005295*G1_0_1 - 0.0408192791005308*G1_1_0 - 0.0408192791005325*G1_1_1 - 0.0408192791005292*G3_0_0 - 0.0408192791005295*G3_0_1 - 0.0408192791005308*G3_1_0 - 0.0408192791005325*G3_1_1;
    A[1117] = -0.0379774305555572*G1_0_0 - 0.0379774305555556*G1_0_1 - 0.0379774305555572*G1_1_0 - 0.0379774305555547*G1_1_1 - 0.0379774305555572*G3_0_0 - 0.0379774305555556*G3_0_1 - 0.0379774305555572*G3_1_0 - 0.0379774305555547*G3_1_1;
    A[1118] = -0.0379774305555547*G1_0_0 - 0.0379774305555569*G1_0_1 - 0.0379774305555548*G1_1_0 - 0.0379774305555577*G1_1_1 - 0.0379774305555547*G3_0_0 - 0.0379774305555569*G3_0_1 - 0.0379774305555548*G3_1_0 - 0.0379774305555577*G3_1_1;
    A[1119] = -0.0408192791005304*G1_0_0 - 0.0408192791005287*G1_0_1 - 0.0408192791005317*G1_1_0 - 0.0408192791005295*G1_1_1 - 0.0408192791005304*G3_0_0 - 0.0408192791005287*G3_0_1 - 0.0408192791005317*G3_1_0 - 0.0408192791005295*G3_1_1;
    A[1120] = 0.20228794642858*G1_0_0 - 0.648027584876568*G1_0_1 + 0.202287946428581*G1_1_0 - 0.648027584876568*G1_1_1 + 0.20228794642858*G3_0_0 - 0.648027584876568*G3_0_1 + 0.202287946428581*G3_1_0 - 0.648027584876568*G3_1_1;
    A[1121] = -0.0158454585537946*G1_0_0 + 0.594204695767216*G1_0_1 - 0.0158454585537932*G1_1_0 + 0.594204695767217*G1_1_1 - 0.0158454585537946*G3_0_0 + 0.594204695767216*G3_0_1 - 0.0158454585537932*G3_1_0 + 0.594204695767217*G3_1_1;
    A[1122] = -0.0696683476631403*G1_0_0 - 0.44995935295416*G1_0_1 - 0.0696683476631404*G1_1_0 - 0.449959352954161*G1_1_1 - 0.0696683476631403*G3_0_0 - 0.44995935295416*G3_0_1 - 0.0696683476631404*G3_1_0 - 0.449959352954161*G3_1_1;
    A[1123] = 0.0408192791005303*G1_0_0 + 0.202374063051154*G1_0_1 + 0.0408192791005316*G1_1_0 + 0.202374063051154*G1_1_1 + 0.0408192791005303*G3_0_0 + 0.202374063051154*G3_0_1 + 0.0408192791005316*G3_1_0 + 0.202374063051154*G3_1_1;
    A[1124] = -0.648027584876568*G1_0_0 + 0.202287946428581*G1_0_1 - 0.648027584876569*G1_1_0 + 0.20228794642858*G1_1_1 - 0.648027584876568*G3_0_0 + 0.202287946428581*G3_0_1 - 0.648027584876569*G3_1_0 + 0.20228794642858*G3_1_1;
    A[1125] = 0.594204695767216*G1_0_0 - 0.0158454585537941*G1_0_1 + 0.594204695767218*G1_1_0 - 0.0158454585537939*G1_1_1 + 0.594204695767216*G3_0_0 - 0.0158454585537941*G3_0_1 + 0.594204695767218*G3_1_0 - 0.0158454585537939*G3_1_1;
    A[1126] = -0.44995935295416*G1_0_0 - 0.0696683476631409*G1_0_1 - 0.449959352954161*G1_1_0 - 0.0696683476631423*G1_1_1 - 0.44995935295416*G3_0_0 - 0.0696683476631409*G3_0_1 - 0.449959352954161*G3_1_0 - 0.0696683476631423*G3_1_1;
    A[1127] = 0.202374063051153*G1_0_0 + 0.0408192791005288*G1_0_1 + 0.202374063051154*G1_1_0 + 0.0408192791005318*G1_1_1 + 0.202374063051153*G3_0_0 + 0.0408192791005288*G3_0_1 + 0.202374063051154*G3_1_0 + 0.0408192791005318*G3_1_1;
    A[1128] = -0.215291556437402*G1_0_0 - 0.215291556437401*G1_0_1 - 0.215291556437403*G1_1_0 - 0.215291556437399*G1_1_1 - 0.215291556437402*G3_0_0 - 0.215291556437401*G3_0_1 - 0.215291556437403*G3_1_0 - 0.215291556437399*G3_1_1;
    A[1129] = -0.0538228891093441*G1_0_0 - 0.0538228891093457*G1_0_1 - 0.0538228891093443*G1_1_0 - 0.053822889109345*G1_1_1 - 0.0538228891093441*G3_0_0 - 0.0538228891093457*G3_0_1 - 0.0538228891093443*G3_1_0 - 0.053822889109345*G3_1_1;
    A[1130] = 0.107645778218695*G1_0_0 + 0.107645778218695*G1_0_1 + 0.107645778218697*G1_1_0 + 0.107645778218695*G1_1_1 + 0.107645778218695*G3_0_0 + 0.107645778218695*G3_0_1 + 0.107645778218697*G3_1_0 + 0.107645778218695*G3_1_1;
    A[1131] = -0.0538228891093465*G1_0_0 - 0.0538228891093494*G1_0_1 - 0.0538228891093469*G1_1_0 - 0.0538228891093502*G1_1_1 - 0.0538228891093465*G3_0_0 - 0.0538228891093494*G3_0_1 - 0.0538228891093469*G3_1_0 - 0.0538228891093502*G3_1_1;
    A[1132] = 0.107645778218698*G1_0_0 + 0.107645778218701*G1_0_1 + 0.107645778218697*G1_1_0 + 0.107645778218701*G1_1_1 + 0.107645778218698*G3_0_0 + 0.107645778218701*G3_0_1 + 0.107645778218697*G3_1_0 + 0.107645778218701*G3_1_1;
    A[1133] = 0.107645778218695*G1_0_0 + 0.107645778218697*G1_0_1 + 0.107645778218695*G1_1_0 + 0.107645778218697*G1_1_1 + 0.107645778218695*G3_0_0 + 0.107645778218697*G3_0_1 + 0.107645778218695*G3_1_0 + 0.107645778218697*G3_1_1;
    A[1134] = -3.52678571428585*G5_0 - 3.52678571428585*G5_1;
    A[1135] = -0.426587301587306*G5_0 - 0.426587301587321*G5_1;
    A[1136] = -0.426587301587317*G5_0 - 0.426587301587322*G5_1;
    A[1137] = -0.494791666666666*G5_0 - 0.494791666666678*G5_1;
    A[1138] = -0.49479166666668*G5_0 - 0.494791666666691*G5_1;
    A[1139] = -2.35491071428581*G5_0 - 2.35491071428581*G5_1;
    A[1140] = 1.36532738095244*G5_0 + 1.36532738095242*G5_1;
    A[1141] = -2.35491071428582*G5_0 - 2.3549107142858*G5_1;
    A[1142] = 1.36532738095245*G5_0 + 1.36532738095244*G5_1;
    A[1143] = 0.751488095238121*G5_0 + 0.751488095238094*G5_1;
    A[1144] = 0.0;
    A[1145] = 0.0;
    A[1146] = 0.0;
    A[1147] = 0.0;
    A[1148] = 0.0;
    A[1149] = 0.0;
    A[1150] = 0.0;
    A[1151] = 0.0;
    A[1152] = 0.0;
    A[1153] = 0.0;
    A[1154] = 0.0;
    A[1155] = 0.0;
    A[1156] = 0.0;
    A[1157] = 0.0;
    A[1158] = 0.0;
    A[1159] = 0.0;
    A[1160] = 0.0;
    A[1161] = 0.0;
    A[1162] = 0.0;
    A[1163] = 0.0;
    A[1164] = 0.0;
    A[1165] = -0.0409984016754854*G1_0_0 - 0.0409984016754864*G1_0_1 - 0.0409984016754854*G3_0_0 - 0.0409984016754864*G3_0_1;
    A[1166] = 0.34240658068784*G1_0_0 + 0.34240658068784*G3_0_0;
    A[1167] = 0.0409984016754865*G1_0_1 + 0.0409984016754865*G3_0_1;
    A[1168] = 0.202287946428575*G1_0_0 + 0.850315531305139*G1_0_1 + 0.202287946428575*G3_0_0 + 0.850315531305139*G3_0_1;
    A[1169] = -0.0158454585537928*G1_0_0 - 0.610050154321012*G1_0_1 - 0.0158454585537928*G3_0_0 - 0.610050154321012*G3_0_1;
    A[1170] = -0.0696683476631408*G1_0_0 + 0.380291005291022*G1_0_1 - 0.0696683476631408*G3_0_0 + 0.380291005291022*G3_0_1;
    A[1171] = 0.04081927910053*G1_0_0 - 0.161554783950626*G1_0_1 + 0.04081927910053*G3_0_0 - 0.161554783950626*G3_0_1;
    A[1172] = -0.040819279100532*G1_0_0 - 0.040819279100532*G3_0_0;
    A[1173] = -0.0379774305555567*G1_0_0 - 0.0379774305555567*G3_0_0;
    A[1174] = -0.0379774305555565*G1_0_0 - 0.0379774305555565*G3_0_0;
    A[1175] = -0.04081927910053*G1_0_0 - 0.04081927910053*G3_0_0;
    A[1176] = 0.202374063051151*G1_0_0 + 0.16155478395062*G1_0_1 + 0.202374063051151*G3_0_0 + 0.16155478395062*G3_0_1;
    A[1177] = -0.449959352954155*G1_0_0 - 0.380291005291012*G1_0_1 - 0.449959352954155*G3_0_0 - 0.380291005291012*G3_0_1;
    A[1178] = 0.594204695767207*G1_0_0 + 0.610050154321001*G1_0_1 + 0.594204695767207*G3_0_0 + 0.610050154321001*G3_0_1;
    A[1179] = -0.648027584876558*G1_0_0 - 0.85031553130514*G1_0_1 - 0.648027584876558*G3_0_0 - 0.85031553130514*G3_0_1;
    A[1180] = 0.107645778218702*G1_0_0 + 0.107645778218702*G3_0_0;
    A[1181] = -0.0538228891093546*G1_0_0 - 1.11014238708858e-14*G1_0_1 - 0.0538228891093546*G3_0_0 - 1.11014238708858e-14*G3_0_1;
    A[1182] = -0.21529155643739*G1_0_0 + 1.31454143224982e-14*G1_0_1 - 0.21529155643739*G3_0_0 + 1.31454143224982e-14*G3_0_1;
    A[1183] = 0.107645778218698*G1_0_0 + 0.107645778218698*G3_0_0;
    A[1184] = -0.0538228891093489*G1_0_0 - 0.0538228891093489*G3_0_0;
    A[1185] = 0.107645778218697*G1_0_0 + 0.107645778218697*G3_0_0;
    A[1186] = 0.426587301587313*G5_0;
    A[1187] = 3.52678571428582*G5_0;
    A[1188] = 0.426587301587312*G5_0;
    A[1189] = 2.35491071428577*G5_0;
    A[1190] = -1.36532738095242*G5_0;
    A[1191] = 0.494791666666689*G5_0;
    A[1192] = 0.494791666666685*G5_0 + 1.8404990033843e-14*G5_1;
    A[1193] = -1.36532738095242*G5_0 - 1.38366286696512e-14*G5_1;
    A[1194] = 2.35491071428579*G5_0;
    A[1195] = -0.751488095238122*G5_0 + 3.1156682708041e-14*G5_1;
    A[1196] = 0.0;
    A[1197] = 0.0;
    A[1198] = 0.0;
    A[1199] = 0.0;
    A[1200] = 0.0;
    A[1201] = 0.0;
    A[1202] = 0.0;
    A[1203] = 0.0;
    A[1204] = 0.0;
    A[1205] = 0.0;
    A[1206] = 0.0;
    A[1207] = 0.0;
    A[1208] = 0.0;
    A[1209] = 0.0;
    A[1210] = 0.0;
    A[1211] = 0.0;
    A[1212] = 0.0;
    A[1213] = 0.0;
    A[1214] = 0.0;
    A[1215] = 0.0;
    A[1216] = 0.0;
    A[1217] = -0.0409984016754869*G1_1_0 - 0.0409984016754872*G1_1_1 - 0.0409984016754869*G3_1_0 - 0.0409984016754872*G3_1_1;
    A[1218] = 0.0409984016754865*G1_1_0 + 0.0409984016754865*G3_1_0;
    A[1219] = 0.342406580687844*G1_1_1 + 0.342406580687844*G3_1_1;
    A[1220] = -0.161554783950622*G1_1_0 + 0.0408192791005323*G1_1_1 - 0.161554783950622*G3_1_0 + 0.0408192791005323*G3_1_1;
    A[1221] = 0.380291005291021*G1_1_0 - 0.0696683476631425*G1_1_1 + 0.380291005291021*G3_1_0 - 0.0696683476631425*G3_1_1;
    A[1222] = -0.610050154321012*G1_1_0 - 0.0158454585537909*G1_1_1 - 0.610050154321012*G3_1_0 - 0.0158454585537909*G3_1_1;
    A[1223] = 0.850315531305148*G1_1_0 + 0.202287946428577*G1_1_1 + 0.850315531305148*G3_1_0 + 0.202287946428577*G3_1_1;
    A[1224] = 0.161554783950622*G1_1_0 + 0.202374063051155*G1_1_1 + 0.161554783950622*G3_1_0 + 0.202374063051155*G3_1_1;
    A[1225] = -0.38029100529102*G1_1_0 - 0.449959352954163*G1_1_1 - 0.38029100529102*G3_1_0 - 0.449959352954163*G3_1_1;
    A[1226] = 0.610050154321013*G1_1_0 + 0.594204695767222*G1_1_1 + 0.610050154321013*G3_1_0 + 0.594204695767222*G3_1_1;
    A[1227] = -0.850315531305148*G1_1_0 - 0.64802758487657*G1_1_1 - 0.850315531305148*G3_1_0 - 0.64802758487657*G3_1_1;
    A[1228] = -0.0408192791005325*G1_1_1 - 0.0408192791005325*G3_1_1;
    A[1229] = -0.0379774305555576*G1_1_1 - 0.0379774305555576*G3_1_1;
    A[1230] = -0.037977430555558*G1_1_1 - 0.037977430555558*G3_1_1;
    A[1231] = -0.0408192791005314*G1_1_1 - 0.0408192791005314*G3_1_1;
    A[1232] = 0.107645778218701*G1_1_1 + 0.107645778218701*G3_1_1;
    A[1233] = 0.1076457782187*G1_1_1 + 0.1076457782187*G3_1_1;
    A[1234] = 0.107645778218701*G1_1_1 + 0.107645778218701*G3_1_1;
    A[1235] = -0.05382288910935*G1_1_1 - 0.05382288910935*G3_1_1;
    A[1236] = -0.0538228891093543*G1_1_1 - 0.0538228891093543*G3_1_1;
    A[1237] = -0.215291556437395*G1_1_1 - 0.215291556437395*G3_1_1;
    A[1238] = 0.426587301587322*G5_1;
    A[1239] = 0.426587301587321*G5_1;
    A[1240] = 3.52678571428585*G5_1;
    A[1241] = -1.36532738095241*G5_1;
    A[1242] = 2.35491071428578*G5_1;
    A[1243] = -1.36532738095241*G5_1;
    A[1244] = 2.35491071428578*G5_1;
    A[1245] = 0.494791666666707*G5_1;
    A[1246] = 0.494791666666703*G5_1;
    A[1247] = -0.751488095238091*G5_1;
    A[1248] = 0.0;
    A[1249] = 0.0;
    A[1250] = 0.0;
    A[1251] = 0.0;
    A[1252] = 0.0;
    A[1253] = 0.0;
    A[1254] = 0.0;
    A[1255] = 0.0;
    A[1256] = 0.0;
    A[1257] = 0.0;
    A[1258] = 0.0;
    A[1259] = 0.0;
    A[1260] = 0.0;
    A[1261] = 0.0;
    A[1262] = 0.0;
    A[1263] = 0.0;
    A[1264] = 0.0;
    A[1265] = 0.0;
    A[1266] = 0.0;
    A[1267] = 0.0;
    A[1268] = 0.0;
    A[1269] = -0.0408192791005292*G1_0_0 - 0.0408192791005308*G1_0_1 - 0.0408192791005295*G1_1_0 - 0.0408192791005325*G1_1_1 - 0.0408192791005292*G3_0_0 - 0.0408192791005308*G3_0_1 - 0.0408192791005295*G3_1_0 - 0.0408192791005325*G3_1_1;
    A[1270] = 0.202287946428575*G1_0_0 + 0.850315531305139*G1_1_0 + 0.202287946428575*G3_0_0 + 0.850315531305139*G3_1_0;
    A[1271] = -0.161554783950622*G1_0_1 + 0.0408192791005323*G1_1_1 - 0.161554783950622*G3_0_1 + 0.0408192791005323*G3_1_1;
    A[1272] = 1.98929398148154*G1_0_0 + 1.2809847608025*G1_0_1 + 1.2809847608025*G1_1_0 + 2.56196952160501*G1_1_1 + 1.98929398148154*G3_0_0 + 1.2809847608025*G3_0_1 + 1.2809847608025*G3_1_0 + 2.56196952160501*G3_1_1;
    A[1273] = -0.906377452601441*G1_0_0 + 0.796578758818366*G1_0_1 - 0.529617228835997*G1_1_0 - 1.39508928571434*G1_1_1 - 0.906377452601441*G3_0_0 + 0.796578758818366*G3_0_1 - 0.529617228835997*G3_1_0 - 1.39508928571434*G3_1_1;
    A[1274] = 0.818107914462108*G1_0_0 - 0.482253086419768*G1_0_1 + 0.232514880952389*G1_1_0 + 0.895612874779583*G1_1_1 + 0.818107914462108*G3_0_0 - 0.482253086419768*G3_0_1 + 0.232514880952389*G3_1_0 + 0.895612874779583*G3_1_1;
    A[1275] = -0.340160659171087*G1_0_0 + 0.329396081349214*G1_0_1 - 0.0710462136243397*G1_1_0 - 0.340160659171096*G1_1_1 - 0.340160659171087*G3_0_0 + 0.329396081349214*G3_0_1 - 0.0710462136243397*G3_1_0 - 0.340160659171096*G3_1_1;
    A[1276] = 0.142092427248677*G1_0_0 + 0.0710462136243409*G1_0_1 + 0.0710462136243304*G1_1_0 + 0.142092427248677*G3_0_0 + 0.0710462136243409*G3_0_1 + 0.0710462136243304*G3_1_0;
    A[1277] = 0.131327849426818*G1_0_0 + 0.0301408179012438*G1_0_1 + 0.0301408179012414*G1_1_0 + 0.131327849426818*G3_0_0 + 0.0301408179012438*G3_0_1 + 0.0301408179012414*G3_1_0;
    A[1278] = 0.172233245149912*G1_0_0 + 0.0301408179012284*G1_0_1 + 0.0301408179012348*G1_1_0 + 0.172233245149912*G3_0_0 + 0.0301408179012284*G3_0_1 + 0.0301408179012348*G3_1_0;
    A[1279] = 0.340160659171087*G1_0_0 + 0.0710462136243471*G1_0_1 + 0.0710462136243396*G1_1_0 + 0.340160659171087*G3_0_0 + 0.0710462136243471*G3_0_1 + 0.0710462136243396*G3_1_0;
    A[1280] = 0.198068231922398*G1_0_0 + 0.269114445546733*G1_0_1 + 0.26911444554674*G1_1_0 + 0.34016065917107*G1_1_1 + 0.198068231922398*G3_0_0 + 0.269114445546733*G3_0_1 + 0.26911444554674*G3_1_0 + 0.34016065917107*G3_1_1;
    A[1281] = -0.359536899250438*G1_0_0 - 0.66309799382717*G1_0_1 - 0.663097993827168*G1_1_0 - 0.895612874779553*G1_1_1 - 0.359536899250438*G3_0_0 - 0.66309799382717*G3_0_1 - 0.663097993827168*G3_1_0 - 0.895612874779553*G3_1_1;
    A[1282] = 0.28633777006172*G1_0_0 + 0.865472056878325*G1_0_1 + 0.865472056878311*G1_1_0 + 1.39508928571431*G1_1_1 + 0.28633777006172*G3_0_0 + 0.865472056878325*G3_0_1 + 0.865472056878311*G3_1_0 + 1.39508928571431*G3_1_1;
    A[1283] = -0.286337770061726*G1_0_0 - 1.2809847608025*G1_0_1 - 1.28098476080249*G1_1_0 - 2.56196952160502*G1_1_1 - 0.286337770061726*G3_0_0 - 1.2809847608025*G3_0_1 - 1.28098476080249*G3_1_0 - 2.56196952160502*G3_1_1;
    A[1284] = -0.667403824955919*G1_0_0 - 0.262655698853611*G1_0_1 - 0.262655698853608*G1_1_0 + 2.14682872173855e-14*G1_1_1 - 0.667403824955919*G3_0_0 - 0.262655698853611*G3_0_1 - 0.262655698853608*G3_1_0 + 2.14682872173855e-14*G3_1_1;
    A[1285] = 1.35633680555558*G1_0_0 + 0.57267554012345*G1_0_1 + 0.572675540123458*G1_1_0 - 3.36966511551434e-14*G1_1_1 + 1.35633680555558*G3_0_0 + 0.57267554012345*G3_0_1 + 0.572675540123458*G3_1_0 - 3.36966511551434e-14*G3_1_1;
    A[1286] = -2.82031938932988*G1_0_0 - 1.66205081569668*G1_0_1 - 1.66205081569668*G1_1_0 + 4.43145411858914e-14*G1_1_1 - 2.82031938932988*G3_0_0 - 1.66205081569668*G3_0_1 - 1.66205081569668*G3_1_0 + 4.43145411858914e-14*G3_1_1;
    A[1287] = -0.419818535052932*G1_0_0 - 0.0731991291887193*G1_0_1 - 0.0731991291887225*G1_1_0 - 0.419818535052932*G3_0_0 - 0.0731991291887193*G3_0_1 - 0.0731991291887225*G3_1_0;
    A[1288] = 1.19486813822756*G1_0_0 + 0.572675540123477*G1_0_1 + 0.572675540123479*G1_1_0 + 1.19486813822756*G3_0_0 + 0.572675540123477*G3_0_1 + 0.572675540123479*G3_1_0;
    A[1289] = -0.990341159612021*G1_0_0 - 0.262655698853624*G1_0_1 - 0.262655698853624*G1_1_0 - 0.990341159612021*G3_0_0 - 0.262655698853624*G3_0_1 - 0.262655698853624*G3_1_0;
    A[1290] = 0.96106150793655*G5_0 + 0.961061507936569*G5_1;
    A[1291] = 5.76636904761923*G5_0 + 10.9126984126988*G5_1;
    A[1292] = 0.0620039682539768*G5_0 + 0.961061507936555*G5_1;
    A[1293] = 16.741071428572*G5_0 + 11.4397321428575*G5_1;
    A[1294] = -4.3712797619049*G5_0 - 5.11532738095255*G5_1;
    A[1295] = -1.86011904761911*G5_0 - 0.930059523809516*G5_1;
    A[1296] = -3.44122023809536*G5_0 - 0.93005952380958*G5_1;
    A[1297] = -4.18526785714295*G5_0 - 5.11532738095248*G5_1;
    A[1298] = 8.37053571428597*G5_0 + 11.4397321428575*G5_1;
    A[1299] = 7.99851190476219*G5_0 + 2.41815476190486*G5_1;
    A[1300] = 0.0;
    A[1301] = 0.0;
    A[1302] = 0.0;
    A[1303] = 0.0;
    A[1304] = 0.0;
    A[1305] = 0.0;
    A[1306] = 0.0;
    A[1307] = 0.0;
    A[1308] = 0.0;
    A[1309] = 0.0;
    A[1310] = 0.0;
    A[1311] = 0.0;
    A[1312] = 0.0;
    A[1313] = 0.0;
    A[1314] = 0.0;
    A[1315] = 0.0;
    A[1316] = 0.0;
    A[1317] = 0.0;
    A[1318] = 0.0;
    A[1319] = 0.0;
    A[1320] = 0.0;
    A[1321] = -0.0379774305555572*G1_0_0 - 0.0379774305555572*G1_0_1 - 0.0379774305555556*G1_1_0 - 0.0379774305555547*G1_1_1 - 0.0379774305555572*G3_0_0 - 0.0379774305555572*G3_0_1 - 0.0379774305555556*G3_1_0 - 0.0379774305555547*G3_1_1;
    A[1322] = -0.0158454585537928*G1_0_0 - 0.610050154321012*G1_1_0 - 0.0158454585537928*G3_0_0 - 0.610050154321012*G3_1_0;
    A[1323] = 0.380291005291021*G1_0_1 - 0.0696683476631425*G1_1_1 + 0.380291005291021*G3_0_1 - 0.0696683476631425*G3_1_1;
    A[1324] = -0.906377452601441*G1_0_0 - 0.529617228835997*G1_0_1 + 0.796578758818366*G1_1_0 - 1.39508928571434*G1_1_1 - 0.906377452601441*G3_0_0 - 0.529617228835997*G3_0_1 + 0.796578758818366*G3_1_0 - 1.39508928571434*G3_1_1;
    A[1325] = 3.07436342592603*G1_0_0 + 1.17549189814819*G1_0_1 + 1.17549189814819*G1_1_0 + 3.69440310846576*G1_1_1 + 3.07436342592603*G3_0_0 + 1.17549189814819*G3_0_1 + 1.17549189814819*G3_1_0 + 3.69440310846576*G3_1_1;
    A[1326] = -1.80414324294539*G1_0_0 + 0.699697558421536*G1_0_1 - 0.350925236992963*G1_1_0 - 1.80414324294541*G1_1_1 - 1.80414324294539*G3_0_0 + 0.699697558421536*G3_0_1 - 0.350925236992963*G3_1_0 - 1.80414324294541*G3_1_1;
    A[1327] = 0.895612874779579*G1_0_0 - 0.482253086419768*G1_0_1 + 0.232514880952391*G1_1_0 + 0.818107914462119*G1_1_1 + 0.895612874779579*G3_0_0 - 0.482253086419768*G3_0_1 + 0.232514880952391*G3_1_0 + 0.818107914462119*G3_1_1;
    A[1328] = 0.131327849426816*G1_0_0 + 0.101187031525579*G1_0_1 + 0.101187031525586*G1_1_0 + 0.0710462136243403*G1_1_1 + 0.131327849426816*G3_0_0 + 0.101187031525579*G3_0_1 + 0.101187031525586*G3_1_0 + 0.0710462136243403*G3_1_1;
    A[1329] = -0.297102347883613*G1_0_0 - 0.148551173941809*G1_0_1 - 0.14855117394181*G1_1_0 - 0.0172233245149936*G1_1_1 - 0.297102347883613*G3_0_0 - 0.148551173941809*G3_0_1 - 0.14855117394181*G3_1_0 - 0.0172233245149936*G3_1_1;
    A[1330] = -0.219597387566138*G1_0_0 - 0.0624345513668359*G1_0_1 - 0.0624345513668458*G1_1_0 - 0.0172233245149878*G1_1_1 - 0.219597387566138*G3_0_0 - 0.0624345513668359*G3_0_1 - 0.0624345513668458*G3_1_0 - 0.0172233245149878*G3_1_1;
    A[1331] = -0.895612874779579*G1_0_0 - 0.232514880952394*G1_0_1 - 0.232514880952391*G1_1_0 + 0.0710462136243408*G1_1_1 - 0.895612874779579*G3_0_0 - 0.232514880952394*G3_0_1 - 0.232514880952391*G3_1_0 + 0.0710462136243408*G3_1_1;
    A[1332] = 0.111951609347447*G1_0_0 + 0.142092427248682*G1_0_1 + 0.142092427248679*G1_1_0 + 0.172233245149923*G1_1_1 + 0.111951609347447*G3_0_0 + 0.142092427248682*G3_0_1 + 0.142092427248679*G3_1_0 + 0.172233245149923*G3_1_1;
    A[1333] = -0.111951609347446*G1_0_0 - 0.157162836199297*G1_0_1 - 0.157162836199294*G1_1_0 - 0.21959738756614*G1_1_1 - 0.111951609347446*G3_0_0 - 0.157162836199297*G3_0_1 - 0.157162836199294*G3_1_0 - 0.21959738756614*G3_1_1;
    A[1334] = 0.103339947089953*G1_0_0 + 0.133480764991191*G1_0_1 + 0.133480764991188*G1_1_0 + 0.266961529982381*G1_1_1 + 0.103339947089953*G3_0_0 + 0.133480764991191*G3_0_1 + 0.133480764991188*G3_1_0 + 0.266961529982381*G3_1_1;
    A[1335] = -0.0495170579806048*G1_0_0 + 0.529617228835998*G1_0_1 + 0.529617228835994*G1_1_0 + 1.39508928571435*G1_1_1 - 0.0495170579806048*G3_0_0 + 0.529617228835998*G3_0_1 + 0.529617228835994*G3_1_0 + 1.39508928571435*G3_1_1;
    A[1336] = -0.344466490299831*G1_0_0 - 0.447806437389786*G1_0_1 - 0.447806437389783*G1_1_0 - 0.516699735449765*G1_1_1 - 0.344466490299831*G3_0_0 - 0.447806437389786*G3_0_1 - 0.447806437389783*G3_1_0 - 0.516699735449765*G3_1_1;
    A[1337] = 0.387524801587309*G1_0_0 + 0.85901331018521*G1_0_1 + 0.859013310185201*G1_1_0 + 1.01187031525576*G1_1_1 + 0.387524801587309*G3_0_0 + 0.85901331018521*G3_0_1 + 0.859013310185201*G3_1_0 + 1.01187031525576*G3_1_1;
    A[1338] = 0.73199129188715*G1_0_0 - 1.30897266313938*G1_0_1 - 1.30897266313937*G1_1_0 - 3.96136463844813*G1_1_1 + 0.73199129188715*G3_0_0 - 1.30897266313938*G3_0_1 - 1.30897266313937*G3_1_0 - 3.96136463844813*G3_1_1;
    A[1339] = 1.03339947089951*G1_0_0 + 0.374607308201069*G1_0_1 + 0.374607308201078*G1_1_0 + 0.043058311287485*G1_1_1 + 1.03339947089951*G3_0_0 + 0.374607308201069*G3_0_1 + 0.374607308201078*G3_1_0 + 0.043058311287485*G3_1_1;
    A[1340] = -3.81066054894193*G1_0_0 - 1.40154803240746*G1_0_1 - 1.40154803240746*G1_1_0 + 1.01187031525577*G1_1_1 - 3.81066054894193*G3_0_0 - 1.40154803240746*G3_0_1 - 1.40154803240746*G3_1_0 + 1.01187031525577*G3_1_1;
    A[1341] = 2.02374063051153*G1_0_0 + 0.413359788359804*G1_0_1 + 0.413359788359809*G1_1_0 - 0.516699735449756*G1_1_1 + 2.02374063051153*G3_0_0 + 0.413359788359804*G3_0_1 + 0.413359788359809*G3_1_0 - 0.516699735449756*G3_1_1;
    A[1342] = 0.589037698412718*G5_0 + 0.589037698412686*G5_1;
    A[1343] = -3.90625000000014*G5_0 - 6.57242063492092*G5_1;
    A[1344] = 2.7281746031747*G5_0 + 1.2090773809524*G5_1;
    A[1345] = 12.555803571429*G5_0 + 18.787202380953*G5_1;
    A[1346] = 1.1160714285715*G5_0 - 0.930059523809507*G5_1;
    A[1347] = -1.39508928571434*G5_0 - 1.39508928571439*G5_1;
    A[1348] = 6.69642857142883*G5_0 + 2.32514880952394*G5_1;
    A[1349] = -0.930059523809587*G5_0 - 0.930059523809657*G5_1;
    A[1350] = -2.32514880952393*G5_0 - 5.39434523809554*G5_1;
    A[1351] = 2.2321428571429*G5_0 + 9.67261904761924*G5_1;
    A[1352] = 0.0;
    A[1353] = 0.0;
    A[1354] = 0.0;
    A[1355] = 0.0;
    A[1356] = 0.0;
    A[1357] = 0.0;
    A[1358] = 0.0;
    A[1359] = 0.0;
    A[1360] = 0.0;
    A[1361] = 0.0;
    A[1362] = 0.0;
    A[1363] = 0.0;
    A[1364] = 0.0;
    A[1365] = 0.0;
    A[1366] = 0.0;
    A[1367] = 0.0;
    A[1368] = 0.0;
    A[1369] = 0.0;
    A[1370] = 0.0;
    A[1371] = 0.0;
    A[1372] = 0.0;
    A[1373] = -0.0379774305555547*G1_0_0 - 0.0379774305555548*G1_0_1 - 0.0379774305555569*G1_1_0 - 0.0379774305555577*G1_1_1 - 0.0379774305555547*G3_0_0 - 0.0379774305555548*G3_0_1 - 0.0379774305555569*G3_1_0 - 0.0379774305555577*G3_1_1;
    A[1374] = -0.0696683476631408*G1_0_0 + 0.380291005291022*G1_1_0 - 0.0696683476631408*G3_0_0 + 0.380291005291022*G3_1_0;
    A[1375] = -0.610050154321012*G1_0_1 - 0.0158454585537909*G1_1_1 - 0.610050154321012*G3_0_1 - 0.0158454585537909*G3_1_1;
    A[1376] = 0.818107914462108*G1_0_0 + 0.232514880952389*G1_0_1 - 0.482253086419768*G1_1_0 + 0.895612874779583*G1_1_1 + 0.818107914462108*G3_0_0 + 0.232514880952389*G3_0_1 - 0.482253086419768*G3_1_0 + 0.895612874779583*G3_1_1;
    A[1377] = -1.80414324294539*G1_0_0 - 0.350925236992963*G1_0_1 + 0.699697558421536*G1_1_0 - 1.80414324294541*G1_1_1 - 1.80414324294539*G3_0_0 - 0.350925236992963*G3_0_1 + 0.699697558421536*G3_1_0 - 1.80414324294541*G3_1_1;
    A[1378] = 3.69440310846573*G1_0_0 + 1.17549189814818*G1_0_1 + 1.17549189814818*G1_1_0 + 3.07436342592604*G1_1_1 + 3.69440310846573*G3_0_0 + 1.17549189814818*G3_0_1 + 1.17549189814818*G3_1_0 + 3.07436342592604*G3_1_1;
    A[1379] = -1.39508928571434*G1_0_0 + 0.796578758818368*G1_0_1 - 0.529617228835997*G1_1_0 - 0.906377452601453*G1_1_1 - 1.39508928571434*G3_0_0 + 0.796578758818368*G3_0_1 - 0.529617228835997*G3_1_0 - 0.906377452601453*G3_1_1;
    A[1380] = 0.172233245149908*G1_0_0 + 0.14209242724867*G1_0_1 + 0.142092427248669*G1_1_0 + 0.111951609347442*G1_1_1 + 0.172233245149908*G3_0_0 + 0.14209242724867*G3_0_1 + 0.142092427248669*G3_1_0 + 0.111951609347442*G3_1_1;
    A[1381] = -0.219597387566132*G1_0_0 - 0.157162836199279*G1_0_1 - 0.157162836199287*G1_1_0 - 0.111951609347434*G1_1_1 - 0.219597387566132*G3_0_0 - 0.157162836199279*G3_0_1 - 0.157162836199287*G3_1_0 - 0.111951609347434*G3_1_1;
    A[1382] = 0.266961529982354*G1_0_0 + 0.133480764991168*G1_0_1 + 0.133480764991178*G1_1_0 + 0.103339947089942*G1_1_1 + 0.266961529982354*G3_0_0 + 0.133480764991168*G3_0_1 + 0.133480764991178*G3_1_0 + 0.103339947089942*G3_1_1;
    A[1383] = 1.39508928571434*G1_0_0 + 0.52961722883601*G1_0_1 + 0.529617228835997*G1_1_0 - 0.049517057980597*G1_1_1 + 1.39508928571434*G3_0_0 + 0.52961722883601*G3_0_1 + 0.529617228835997*G3_1_0 - 0.049517057980597*G3_1_1;
    A[1384] = 0.0710462136243352*G1_0_0 + 0.101187031525573*G1_0_1 + 0.101187031525574*G1_1_0 + 0.131327849426802*G1_1_1 + 0.0710462136243352*G3_0_0 + 0.101187031525573*G3_0_1 + 0.101187031525574*G3_1_0 + 0.131327849426802*G3_1_1;
    A[1385] = -0.017223324514988*G1_0_0 - 0.148551173941802*G1_0_1 - 0.148551173941803*G1_1_0 - 0.297102347883608*G1_1_1 - 0.017223324514988*G3_0_0 - 0.148551173941802*G3_0_1 - 0.148551173941803*G3_1_0 - 0.297102347883608*G3_1_1;
    A[1386] = -0.0172233245149941*G1_0_0 - 0.06243455136685*G1_0_1 - 0.062434551366849*G1_1_0 - 0.219597387566153*G1_1_1 - 0.0172233245149941*G3_0_0 - 0.06243455136685*G3_0_1 - 0.062434551366849*G3_1_0 - 0.219597387566153*G3_1_1;
    A[1387] = 0.0710462136243425*G1_0_0 - 0.23251488095239*G1_0_1 - 0.232514880952387*G1_1_0 - 0.895612874779584*G1_1_1 + 0.0710462136243425*G3_0_0 - 0.23251488095239*G3_0_1 - 0.232514880952387*G3_1_0 - 0.895612874779584*G3_1_1;
    A[1388] = -0.516699735449737*G1_0_0 - 0.447806437389781*G1_0_1 - 0.44780643738977*G1_1_0 - 0.344466490299817*G1_1_1 - 0.516699735449737*G3_0_0 - 0.447806437389781*G3_0_1 - 0.44780643738977*G3_1_0 - 0.344466490299817*G3_1_1;
    A[1389] = 0.043058311287468*G1_0_0 + 0.374607308201065*G1_0_1 + 0.374607308201064*G1_1_0 + 1.03339947089949*G1_1_1 + 0.043058311287468*G3_0_0 + 0.374607308201065*G3_0_1 + 0.374607308201064*G3_1_0 + 1.03339947089949*G3_1_1;
    A[1390] = -0.516699735449747*G1_0_0 + 0.413359788359819*G1_0_1 + 0.413359788359806*G1_1_0 + 2.02374063051156*G1_1_1 - 0.516699735449747*G3_0_0 + 0.413359788359819*G3_0_1 + 0.413359788359806*G3_1_0 + 2.02374063051156*G3_1_1;
    A[1391] = 1.01187031525575*G1_0_0 + 0.859013310185202*G1_0_1 + 0.859013310185189*G1_1_0 + 0.387524801587298*G1_1_1 + 1.01187031525575*G3_0_0 + 0.859013310185202*G3_0_1 + 0.859013310185189*G3_1_0 + 0.387524801587298*G3_1_1;
    A[1392] = 1.01187031525578*G1_0_0 - 1.40154803240745*G1_0_1 - 1.40154803240744*G1_1_0 - 3.81066054894193*G1_1_1 + 1.01187031525578*G3_0_0 - 1.40154803240745*G3_0_1 - 1.40154803240744*G3_1_0 - 3.81066054894193*G3_1_1;
    A[1393] = -3.96136463844809*G1_0_0 - 1.30897266313936*G1_0_1 - 1.30897266313936*G1_1_0 + 0.731991291887165*G1_1_1 - 3.96136463844809*G3_0_0 - 1.30897266313936*G3_0_1 - 1.30897266313936*G3_1_0 + 0.731991291887165*G3_1_1;
    A[1394] = 0.589037698412701*G5_0 + 0.589037698412741*G5_1;
    A[1395] = 1.20907738095243*G5_0 + 2.72817460317476*G5_1;
    A[1396] = -6.57242063492088*G5_0 - 3.9062500000001*G5_1;
    A[1397] = -0.930059523809561*G5_0 + 1.1160714285715*G5_1;
    A[1398] = 18.787202380953*G5_0 + 12.5558035714289*G5_1;
    A[1399] = -0.930059523809504*G5_0 - 0.93005952380948*G5_1;
    A[1400] = -5.39434523809543*G5_0 - 2.32514880952393*G5_1;
    A[1401] = -1.39508928571432*G5_0 - 1.39508928571425*G5_1;
    A[1402] = 2.32514880952392*G5_0 + 6.69642857142892*G5_1;
    A[1403] = 9.67261904761937*G5_0 + 2.23214285714307*G5_1;
    A[1404] = 0.0;
    A[1405] = 0.0;
    A[1406] = 0.0;
    A[1407] = 0.0;
    A[1408] = 0.0;
    A[1409] = 0.0;
    A[1410] = 0.0;
    A[1411] = 0.0;
    A[1412] = 0.0;
    A[1413] = 0.0;
    A[1414] = 0.0;
    A[1415] = 0.0;
    A[1416] = 0.0;
    A[1417] = 0.0;
    A[1418] = 0.0;
    A[1419] = 0.0;
    A[1420] = 0.0;
    A[1421] = 0.0;
    A[1422] = 0.0;
    A[1423] = 0.0;
    A[1424] = 0.0;
    A[1425] = -0.0408192791005304*G1_0_0 - 0.0408192791005317*G1_0_1 - 0.0408192791005287*G1_1_0 - 0.0408192791005294*G1_1_1 - 0.0408192791005304*G3_0_0 - 0.0408192791005317*G3_0_1 - 0.0408192791005287*G3_1_0 - 0.0408192791005294*G3_1_1;
    A[1426] = 0.04081927910053*G1_0_0 - 0.161554783950626*G1_1_0 + 0.04081927910053*G3_0_0 - 0.161554783950626*G3_1_0;
    A[1427] = 0.850315531305148*G1_0_1 + 0.202287946428577*G1_1_1 + 0.850315531305148*G3_0_1 + 0.202287946428577*G3_1_1;
    A[1428] = -0.340160659171087*G1_0_0 - 0.0710462136243397*G1_0_1 + 0.329396081349214*G1_1_0 - 0.340160659171096*G1_1_1 - 0.340160659171087*G3_0_0 - 0.0710462136243397*G3_0_1 + 0.329396081349214*G3_1_0 - 0.340160659171096*G3_1_1;
    A[1429] = 0.895612874779579*G1_0_0 + 0.232514880952391*G1_0_1 - 0.482253086419768*G1_1_0 + 0.818107914462119*G1_1_1 + 0.895612874779579*G3_0_0 + 0.232514880952391*G3_0_1 - 0.482253086419768*G3_1_0 + 0.818107914462119*G3_1_1;
    A[1430] = -1.39508928571434*G1_0_0 - 0.529617228835997*G1_0_1 + 0.796578758818368*G1_1_0 - 0.906377452601453*G1_1_1 - 1.39508928571434*G3_0_0 - 0.529617228835997*G3_0_1 + 0.796578758818368*G3_1_0 - 0.906377452601453*G3_1_1;
    A[1431] = 2.56196952160504*G1_0_0 + 1.28098476080252*G1_0_1 + 1.28098476080252*G1_1_0 + 1.98929398148156*G1_1_1 + 2.56196952160504*G3_0_0 + 1.28098476080252*G3_0_1 + 1.28098476080252*G3_1_0 + 1.98929398148156*G3_1_1;
    A[1432] = 0.34016065917109*G1_0_0 + 0.269114445546751*G1_0_1 + 0.269114445546749*G1_1_0 + 0.198068231922404*G1_1_1 + 0.34016065917109*G3_0_0 + 0.269114445546751*G3_0_1 + 0.269114445546749*G3_1_0 + 0.198068231922404*G3_1_1;
    A[1433] = -0.89561287477958*G1_0_0 - 0.663097993827194*G1_0_1 - 0.663097993827185*G1_1_0 - 0.359536899250453*G1_1_1 - 0.89561287477958*G3_0_0 - 0.663097993827194*G3_0_1 - 0.663097993827185*G3_1_0 - 0.359536899250453*G3_1_1;
    A[1434] = 1.39508928571435*G1_0_0 + 0.865472056878352*G1_0_1 + 0.865472056878341*G1_1_0 + 0.286337770061742*G1_1_1 + 1.39508928571435*G3_0_0 + 0.865472056878352*G3_0_1 + 0.865472056878341*G3_1_0 + 0.286337770061742*G3_1_1;
    A[1435] = -2.56196952160504*G1_0_0 - 1.28098476080252*G1_0_1 - 1.28098476080252*G1_1_0 - 0.286337770061739*G1_1_1 - 2.56196952160504*G3_0_0 - 1.28098476080252*G3_0_1 - 1.28098476080252*G3_1_0 - 0.286337770061739*G3_1_1;
    A[1436] = 0.0710462136243403*G1_0_1 + 0.0710462136243392*G1_1_0 + 0.142092427248686*G1_1_1 + 0.0710462136243403*G3_0_1 + 0.0710462136243392*G3_1_0 + 0.142092427248686*G3_1_1;
    A[1437] = 0.0301408179012369*G1_0_1 + 0.0301408179012378*G1_1_0 + 0.131327849426818*G1_1_1 + 0.0301408179012369*G3_0_1 + 0.0301408179012378*G3_1_0 + 0.131327849426818*G3_1_1;
    A[1438] = 0.0301408179012347*G1_0_1 + 0.0301408179012347*G1_1_0 + 0.172233245149919*G1_1_1 + 0.0301408179012347*G3_0_1 + 0.0301408179012347*G3_1_0 + 0.172233245149919*G3_1_1;
    A[1439] = 0.0710462136243432*G1_0_1 + 0.0710462136243427*G1_1_0 + 0.340160659171099*G1_1_1 + 0.0710462136243432*G3_0_1 + 0.0710462136243427*G3_1_0 + 0.340160659171099*G3_1_1;
    A[1440] = -0.262655698853627*G1_0_1 - 0.262655698853623*G1_1_0 - 0.66740382495594*G1_1_1 - 0.262655698853627*G3_0_1 - 0.262655698853623*G3_1_0 - 0.66740382495594*G3_1_1;
    A[1441] = -0.0731991291887099*G1_0_1 - 0.0731991291887152*G1_1_0 - 0.419818535052922*G1_1_1 - 0.0731991291887099*G3_0_1 - 0.0731991291887152*G3_1_0 - 0.419818535052922*G3_1_1;
    A[1442] = -0.262655698853625*G1_0_1 - 0.262655698853625*G1_1_0 - 0.990341159612035*G1_1_1 - 0.262655698853625*G3_0_1 - 0.262655698853625*G3_1_0 - 0.990341159612035*G3_1_1;
    A[1443] = 1.08940634291343e-14*G1_0_0 + 0.572675540123477*G1_0_1 + 0.572675540123482*G1_1_0 + 1.35633680555561*G1_1_1 + 1.08940634291343e-14*G3_0_0 + 0.572675540123477*G3_0_1 + 0.572675540123482*G3_1_0 + 1.35633680555561*G3_1_1;
    A[1444] = -1.18446918939696e-14*G1_0_0 + 0.57267554012346*G1_0_1 + 0.572675540123471*G1_1_0 + 1.19486813822754*G1_1_1 - 1.18446918939696e-14*G3_0_0 + 0.57267554012346*G3_0_1 + 0.572675540123471*G3_1_0 + 1.19486813822754*G3_1_1;
    A[1445] = -1.66205081569671*G1_0_1 - 1.66205081569671*G1_1_0 - 2.8203193893299*G1_1_1 - 1.66205081569671*G3_0_1 - 1.66205081569671*G3_1_0 - 2.8203193893299*G3_1_1;
    A[1446] = 0.961061507936543*G5_0 + 0.961061507936513*G5_1;
    A[1447] = 0.961061507936547*G5_0 + 0.0620039682539317*G5_1;
    A[1448] = 10.9126984126988*G5_0 + 5.76636904761923*G5_1;
    A[1449] = -5.11532738095258*G5_0 - 4.37127976190499*G5_1;
    A[1450] = 11.4397321428576*G5_0 + 16.7410714285721*G5_1;
    A[1451] = -5.11532738095258*G5_0 - 4.18526785714305*G5_1;
    A[1452] = 11.4397321428576*G5_0 + 8.37053571428604*G5_1;
    A[1453] = -0.930059523809572*G5_0 - 1.86011904761919*G5_1;
    A[1454] = -0.930059523809557*G5_0 - 3.44122023809546*G5_1;
    A[1455] = 2.41815476190488*G5_0 + 7.99851190476199*G5_1;
    A[1456] = 0.0;
    A[1457] = 0.0;
    A[1458] = 0.0;
    A[1459] = 0.0;
    A[1460] = 0.0;
    A[1461] = 0.0;
    A[1462] = 0.0;
    A[1463] = 0.0;
    A[1464] = 0.0;
    A[1465] = 0.0;
    A[1466] = 0.0;
    A[1467] = 0.0;
    A[1468] = 0.0;
    A[1469] = 0.0;
    A[1470] = 0.0;
    A[1471] = 0.0;
    A[1472] = 0.0;
    A[1473] = 0.0;
    A[1474] = 0.0;
    A[1475] = 0.0;
    A[1476] = 0.0;
    A[1477] = 0.20228794642858*G1_0_0 + 0.202287946428581*G1_0_1 - 0.648027584876568*G1_1_0 - 0.648027584876568*G1_1_1 + 0.20228794642858*G3_0_0 + 0.202287946428581*G3_0_1 - 0.648027584876568*G3_1_0 - 0.648027584876568*G3_1_1;
    A[1478] = -0.040819279100532*G1_0_0 - 0.040819279100532*G3_0_0;
    A[1479] = 0.161554783950622*G1_0_1 + 0.202374063051155*G1_1_1 + 0.161554783950622*G3_0_1 + 0.202374063051155*G3_1_1;
    A[1480] = 0.142092427248677*G1_0_0 + 0.0710462136243304*G1_0_1 + 0.0710462136243409*G1_1_0 + 0.142092427248677*G3_0_0 + 0.0710462136243304*G3_0_1 + 0.0710462136243409*G3_1_0;
    A[1481] = 0.131327849426816*G1_0_0 + 0.101187031525586*G1_0_1 + 0.101187031525579*G1_1_0 + 0.0710462136243403*G1_1_1 + 0.131327849426816*G3_0_0 + 0.101187031525586*G3_0_1 + 0.101187031525579*G3_1_0 + 0.0710462136243403*G3_1_1;
    A[1482] = 0.172233245149908*G1_0_0 + 0.142092427248669*G1_0_1 + 0.14209242724867*G1_1_0 + 0.111951609347442*G1_1_1 + 0.172233245149908*G3_0_0 + 0.142092427248669*G3_0_1 + 0.14209242724867*G3_1_0 + 0.111951609347442*G3_1_1;
    A[1483] = 0.34016065917109*G1_0_0 + 0.269114445546749*G1_0_1 + 0.269114445546751*G1_1_0 + 0.198068231922404*G1_1_1 + 0.34016065917109*G3_0_0 + 0.269114445546749*G3_0_1 + 0.269114445546751*G3_1_0 + 0.198068231922404*G3_1_1;
    A[1484] = 1.98929398148155*G1_0_0 + 0.708309220679037*G1_0_1 + 0.708309220679037*G1_1_0 + 1.98929398148155*G1_1_1 + 1.98929398148155*G3_0_0 + 0.708309220679037*G3_0_1 + 0.708309220679037*G3_1_0 + 1.98929398148155*G3_1_1;
    A[1485] = -0.906377452601436*G1_0_0 - 1.70295621141981*G1_0_1 - 0.37676022376544*G1_1_0 - 2.56842826829815*G1_1_1 - 0.906377452601436*G3_0_0 - 1.70295621141981*G3_0_1 - 0.37676022376544*G3_1_0 - 2.56842826829815*G3_1_1;
    A[1486] = 0.818107914462106*G1_0_0 + 1.30036100088188*G1_0_1 + 0.585593033509717*G1_1_0 + 1.96345899470906*G1_1_1 + 0.818107914462106*G3_0_0 + 1.30036100088188*G3_0_1 + 0.585593033509717*G3_1_0 + 1.96345899470906*G3_1_1;
    A[1487] = -0.34016065917109*G1_0_0 - 0.669556740520308*G1_0_1 - 0.269114445546751*G1_1_0 - 0.938671186067055*G1_1_1 - 0.34016065917109*G3_0_0 - 0.669556740520308*G3_0_1 - 0.269114445546751*G3_1_0 - 0.938671186067055*G3_1_1;
    A[1488] = -0.286337770061744*G1_0_0 + 0.994646990740774*G1_0_1 + 0.994646990740779*G1_1_0 - 0.286337770061737*G1_1_1 - 0.286337770061744*G3_0_0 + 0.994646990740774*G3_0_1 + 0.994646990740779*G3_1_0 - 0.286337770061737*G3_1_1;
    A[1489] = 0.286337770061744*G1_0_0 - 0.579134286816594*G1_0_1 - 0.5791342868166*G1_1_0 - 0.0495170579805984*G1_1_1 + 0.286337770061744*G3_0_0 - 0.579134286816594*G3_0_1 - 0.5791342868166*G3_1_0 - 0.0495170579805984*G3_1_1;
    A[1490] = -0.359536899250458*G1_0_0 + 0.303561094576729*G1_0_1 + 0.303561094576731*G1_1_0 + 0.0710462136243458*G1_1_1 - 0.359536899250458*G3_0_0 + 0.303561094576729*G3_0_1 + 0.303561094576731*G3_1_0 + 0.0710462136243458*G3_1_1;
    A[1491] = 0.198068231922409*G1_0_0 - 0.0710462136243352*G1_0_1 - 0.071046213624343*G1_1_0 + 0.198068231922409*G3_0_0 - 0.0710462136243352*G3_0_1 - 0.071046213624343*G3_1_0;
    A[1492] = -2.82031938932991*G1_0_0 - 1.15826857363319*G1_0_1 - 1.15826857363319*G1_1_0 + 0.503782242063511*G1_1_1 - 2.82031938932991*G3_0_0 - 1.15826857363319*G3_0_1 - 1.15826857363319*G3_1_0 + 0.503782242063511*G3_1_1;
    A[1493] = 1.35633680555561*G1_0_0 + 0.783661265432122*G1_0_1 + 0.783661265432123*G1_1_0 + 0.210985725308642*G1_1_1 + 1.35633680555561*G3_0_0 + 0.783661265432122*G3_0_1 + 0.783661265432123*G3_1_0 + 0.210985725308642*G3_1_1;
    A[1494] = -0.667403824955926*G1_0_0 - 0.404748126102312*G1_0_1 - 0.404748126102308*G1_1_0 - 0.142092427248682*G1_1_1 - 0.667403824955926*G3_0_0 - 0.404748126102312*G3_0_1 - 0.404748126102308*G3_1_0 - 0.142092427248682*G3_1_1;
    A[1495] = 1.19486813822755*G1_0_0 + 0.622192598104066*G1_0_1 + 0.622192598104068*G1_1_0 + 0.0495170579805985*G1_1_1 + 1.19486813822755*G3_0_0 + 0.622192598104066*G3_0_1 + 0.622192598104068*G3_1_0 + 0.0495170579805985*G3_1_1;
    A[1496] = -0.419818535052927*G1_0_0 - 0.346619405864193*G1_0_1 - 0.346619405864206*G1_1_0 - 0.273420276675492*G1_1_1 - 0.419818535052927*G3_0_0 - 0.346619405864193*G3_0_1 - 0.346619405864206*G3_1_0 - 0.273420276675492*G3_1_1;
    A[1497] = -0.990341159612012*G1_0_0 - 0.727685460758396*G1_0_1 - 0.727685460758387*G1_1_0 - 0.465029761904772*G1_1_1 - 0.990341159612012*G3_0_0 - 0.727685460758396*G3_0_1 - 0.727685460758387*G3_1_0 - 0.465029761904772*G3_1_1;
    A[1498] = -5.76636904761925*G5_0 + 5.14632936507955*G5_1;
    A[1499] = -0.96106150793657*G5_0;
    A[1500] = -0.0620039682539744*G5_0 + 0.899057539682581*G5_1;
    A[1501] = 1.86011904761909*G5_0 + 0.930059523809538*G5_1;
    A[1502] = 3.44122023809531*G5_0 + 2.51116071428579*G5_1;
    A[1503] = -16.7410714285721*G5_0 - 5.3013392857145*G5_1;
    A[1504] = 4.37127976190494*G5_0 - 0.744047619047603*G5_1;
    A[1505] = -8.37053571428601*G5_0 + 3.06919642857149*G5_1;
    A[1506] = 4.18526785714296*G5_0 - 0.9300595238096*G5_1;
    A[1507] = -7.99851190476227*G5_0 - 5.58035714285738*G5_1;
    A[1508] = 0.0;
    A[1509] = 0.0;
    A[1510] = 0.0;
    A[1511] = 0.0;
    A[1512] = 0.0;
    A[1513] = 0.0;
    A[1514] = 0.0;
    A[1515] = 0.0;
    A[1516] = 0.0;
    A[1517] = 0.0;
    A[1518] = 0.0;
    A[1519] = 0.0;
    A[1520] = 0.0;
    A[1521] = 0.0;
    A[1522] = 0.0;
    A[1523] = 0.0;
    A[1524] = 0.0;
    A[1525] = 0.0;
    A[1526] = 0.0;
    A[1527] = 0.0;
    A[1528] = 0.0;
    A[1529] = -0.0158454585537945*G1_0_0 - 0.0158454585537933*G1_0_1 + 0.594204695767217*G1_1_0 + 0.594204695767217*G1_1_1 - 0.0158454585537945*G3_0_0 - 0.0158454585537933*G3_0_1 + 0.594204695767217*G3_1_0 + 0.594204695767217*G3_1_1;
    A[1530] = -0.0379774305555567*G1_0_0 - 0.0379774305555567*G3_0_0;
    A[1531] = -0.38029100529102*G1_0_1 - 0.449959352954163*G1_1_1 - 0.38029100529102*G3_0_1 - 0.449959352954163*G3_1_1;
    A[1532] = 0.131327849426818*G1_0_0 + 0.0301408179012414*G1_0_1 + 0.0301408179012439*G1_1_0 + 0.131327849426818*G3_0_0 + 0.0301408179012414*G3_0_1 + 0.0301408179012439*G3_1_0;
    A[1533] = -0.297102347883613*G1_0_0 - 0.14855117394181*G1_0_1 - 0.148551173941809*G1_1_0 - 0.0172233245149936*G1_1_1 - 0.297102347883613*G3_0_0 - 0.14855117394181*G3_0_1 - 0.148551173941809*G3_1_0 - 0.0172233245149936*G3_1_1;
    A[1534] = -0.219597387566132*G1_0_0 - 0.157162836199287*G1_0_1 - 0.157162836199279*G1_1_0 - 0.111951609347434*G1_1_1 - 0.219597387566132*G3_0_0 - 0.157162836199287*G3_0_1 - 0.157162836199279*G3_1_0 - 0.111951609347434*G3_1_1;
    A[1535] = -0.89561287477958*G1_0_0 - 0.663097993827185*G1_0_1 - 0.663097993827194*G1_1_0 - 0.359536899250453*G1_1_1 - 0.89561287477958*G3_0_0 - 0.663097993827185*G3_0_1 - 0.663097993827194*G3_1_0 - 0.359536899250453*G3_1_1;
    A[1536] = -0.906377452601436*G1_0_0 - 0.37676022376544*G1_0_1 - 1.70295621141981*G1_1_0 - 2.56842826829815*G1_1_1 - 0.906377452601436*G3_0_0 - 0.37676022376544*G3_0_1 - 1.70295621141981*G3_1_0 - 2.56842826829815*G3_1_1;
    A[1537] = 3.07436342592603*G1_0_0 + 1.89887152777784*G1_0_1 + 1.89887152777784*G1_1_0 + 4.41778273809539*G1_1_1 + 3.07436342592603*G3_0_0 + 1.89887152777784*G3_0_1 + 1.89887152777784*G3_1_0 + 4.41778273809539*G3_1_1;
    A[1538] = -1.80414324294538*G1_0_0 - 2.50384080136693*G1_0_1 - 1.45321800595243*G1_1_0 - 3.95705880731936*G1_1_1 - 1.80414324294538*G3_0_0 - 2.50384080136693*G3_0_1 - 1.45321800595243*G3_1_0 - 3.95705880731936*G3_1_1;
    A[1539] = 0.89561287477958*G1_0_0 + 1.37786596119934*G1_0_1 + 0.663097993827194*G1_1_0 + 1.96345899470907*G1_1_1 + 0.89561287477958*G3_0_0 + 1.37786596119934*G3_0_1 + 0.663097993827194*G3_1_0 + 1.96345899470907*G3_1_1;
    A[1540] = -0.0495170579805974*G1_0_0 - 0.579134286816596*G1_0_1 - 0.579134286816599*G1_1_0 + 0.286337770061735*G1_1_1 - 0.0495170579805974*G3_0_0 - 0.579134286816596*G3_0_1 - 0.579134286816599*G3_1_0 + 0.286337770061735*G3_1_1;
    A[1541] = 0.103339947089949*G1_0_0 - 0.0301408179012378*G1_0_1 - 0.0301408179012375*G1_1_0 + 0.103339947089946*G1_1_1 + 0.103339947089949*G3_0_0 - 0.0301408179012378*G3_0_1 - 0.0301408179012375*G3_1_0 + 0.103339947089946*G3_1_1;
    A[1542] = -0.111951609347446*G1_0_0 + 0.0452112268518528*G1_0_1 + 0.0452112268518544*G1_1_0 - 0.0172233245149973*G1_1_1 - 0.111951609347446*G3_0_0 + 0.0452112268518528*G3_0_1 + 0.0452112268518544*G3_1_0 - 0.0172233245149973*G3_1_1;
    A[1543] = 0.111951609347447*G1_0_0 - 0.0301408179012401*G1_0_1 - 0.0301408179012355*G1_1_0 + 0.111951609347447*G3_0_0 - 0.0301408179012401*G3_0_1 - 0.0301408179012355*G3_1_0;
    A[1544] = 0.73199129188714*G1_0_0 + 2.04096395502652*G1_0_1 + 2.04096395502652*G1_1_0 - 0.611428020282208*G1_1_1 + 0.73199129188714*G3_0_0 + 2.04096395502652*G3_0_1 + 2.04096395502652*G3_1_0 - 0.611428020282208*G3_1_1;
    A[1545] = 0.387524801587317*G1_0_0 - 0.471488508597896*G1_0_1 - 0.471488508597902*G1_1_0 - 0.318631503527342*G1_1_1 + 0.387524801587317*G3_0_0 - 0.471488508597896*G3_0_1 - 0.471488508597902*G3_1_0 - 0.318631503527342*G3_1_1;
    A[1546] = -0.344466490299839*G1_0_0 + 0.103339947089952*G1_0_1 + 0.103339947089949*G1_1_0 + 0.0344466490299855*G1_1_1 - 0.344466490299839*G3_0_0 + 0.103339947089952*G3_0_1 + 0.103339947089949*G3_1_0 + 0.0344466490299855*G3_1_1;
    A[1547] = -3.81066054894193*G1_0_0 - 2.40911251653447*G1_0_1 - 2.40911251653446*G1_1_0 + 0.00430583112875206*G1_1_1 - 3.81066054894193*G3_0_0 - 2.40911251653447*G3_0_1 - 2.40911251653446*G3_1_0 + 0.00430583112875206*G3_1_1;
    A[1548] = 1.03339947089951*G1_0_0 + 0.65879216269843*G1_0_1 + 0.658792162698434*G1_1_0 + 0.327243165784839*G1_1_1 + 1.03339947089951*G3_0_0 + 0.65879216269843*G3_0_1 + 0.658792162698434*G3_1_0 + 0.327243165784839*G3_1_1;
    A[1549] = 2.02374063051151*G1_0_0 + 1.61038084215172*G1_0_1 + 1.61038084215171*G1_1_0 + 0.680321318342169*G1_1_1 + 2.02374063051151*G3_0_0 + 1.61038084215172*G3_0_1 + 1.61038084215171*G3_1_0 + 0.680321318342169*G3_1_1;
    A[1550] = 3.90625000000014*G5_0 - 2.66617063492071*G5_1;
    A[1551] = -0.589037698412715*G5_0 + 3.10168557504653e-14*G5_1;
    A[1552] = -2.72817460317471*G5_0 - 1.51909722222229*G5_1;
    A[1553] = 1.39508928571437*G5_0 + 1.10134124042816e-13*G5_1;
    A[1554] = -6.69642857142873*G5_0 - 4.37127976190489*G5_1;
    A[1555] = -12.555803571429*G5_0 + 6.23139880952409*G5_1;
    A[1556] = -1.11607142857154*G5_0 - 2.04613095238109*G5_1;
    A[1557] = 2.32514880952388*G5_0 - 3.06919642857148*G5_1;
    A[1558] = 0.930059523809594*G5_0 + 1.3345173490581e-13*G5_1;
    A[1559] = -2.23214285714294*G5_0 + 7.44047619047666*G5_1;
    A[1560] = 0.0;
    A[1561] = 0.0;
    A[1562] = 0.0;
    A[1563] = 0.0;
    A[1564] = 0.0;
    A[1565] = 0.0;
    A[1566] = 0.0;
    A[1567] = 0.0;
    A[1568] = 0.0;
    A[1569] = 0.0;
    A[1570] = 0.0;
    A[1571] = 0.0;
    A[1572] = 0.0;
    A[1573] = 0.0;
    A[1574] = 0.0;
    A[1575] = 0.0;
    A[1576] = 0.0;
    A[1577] = 0.0;
    A[1578] = 0.0;
    A[1579] = 0.0;
    A[1580] = 0.0;
    A[1581] = -0.0696683476631403*G1_0_0 - 0.0696683476631404*G1_0_1 - 0.44995935295416*G1_1_0 - 0.449959352954161*G1_1_1 - 0.0696683476631403*G3_0_0 - 0.0696683476631404*G3_0_1 - 0.44995935295416*G3_1_0 - 0.449959352954161*G3_1_1;
    A[1582] = -0.0379774305555565*G1_0_0 - 0.0379774305555565*G3_0_0;
    A[1583] = 0.610050154321013*G1_0_1 + 0.594204695767222*G1_1_1 + 0.610050154321013*G3_0_1 + 0.594204695767222*G3_1_1;
    A[1584] = 0.172233245149912*G1_0_0 + 0.0301408179012348*G1_0_1 + 0.0301408179012284*G1_1_0 + 0.172233245149912*G3_0_0 + 0.0301408179012348*G3_0_1 + 0.0301408179012284*G3_1_0;
    A[1585] = -0.219597387566138*G1_0_0 - 0.0624345513668458*G1_0_1 - 0.0624345513668358*G1_1_0 - 0.0172233245149878*G1_1_1 - 0.219597387566138*G3_0_0 - 0.0624345513668458*G3_0_1 - 0.0624345513668358*G3_1_0 - 0.0172233245149878*G3_1_1;
    A[1586] = 0.266961529982354*G1_0_0 + 0.133480764991178*G1_0_1 + 0.133480764991168*G1_1_0 + 0.103339947089942*G1_1_1 + 0.266961529982354*G3_0_0 + 0.133480764991178*G3_0_1 + 0.133480764991168*G3_1_0 + 0.103339947089942*G3_1_1;
    A[1587] = 1.39508928571435*G1_0_0 + 0.865472056878341*G1_0_1 + 0.865472056878352*G1_1_0 + 0.286337770061742*G1_1_1 + 1.39508928571435*G3_0_0 + 0.865472056878341*G3_0_1 + 0.865472056878352*G3_1_0 + 0.286337770061742*G3_1_1;
    A[1588] = 0.818107914462106*G1_0_0 + 0.585593033509717*G1_0_1 + 1.30036100088188*G1_1_0 + 1.96345899470906*G1_1_1 + 0.818107914462106*G3_0_0 + 0.585593033509717*G3_0_1 + 1.30036100088188*G3_1_0 + 1.96345899470906*G3_1_1;
    A[1589] = -1.80414324294538*G1_0_0 - 1.45321800595243*G1_0_1 - 2.50384080136693*G1_1_0 - 3.95705880731936*G1_1_1 - 1.80414324294538*G3_0_0 - 1.45321800595243*G3_0_1 - 2.50384080136693*G3_1_0 - 3.95705880731936*G3_1_1;
    A[1590] = 3.69440310846573*G1_0_0 + 2.51891121031755*G1_0_1 + 2.51891121031755*G1_1_0 + 4.4177827380954*G1_1_1 + 3.69440310846573*G3_0_0 + 2.51891121031755*G3_0_1 + 2.51891121031755*G3_1_0 + 4.4177827380954*G3_1_1;
    A[1591] = -1.39508928571435*G1_0_0 - 2.19166804453271*G1_0_1 - 0.865472056878353*G1_1_0 - 2.56842826829816*G1_1_1 - 1.39508928571435*G3_0_0 - 2.19166804453271*G3_0_1 - 0.865472056878353*G3_1_0 - 2.56842826829816*G3_1_1;
    A[1592] = 0.0710462136243386*G1_0_0 + 0.303561094576733*G1_0_1 + 0.303561094576729*G1_1_0 - 0.359536899250451*G1_1_1 + 0.0710462136243386*G3_0_0 + 0.303561094576733*G3_0_1 + 0.303561094576729*G3_1_0 - 0.359536899250451*G3_1_1;
    A[1593] = -0.0172233245149919*G1_0_0 + 0.0452112268518563*G1_0_1 + 0.0452112268518549*G1_1_0 - 0.111951609347445*G1_1_1 - 0.0172233245149919*G3_0_0 + 0.0452112268518563*G3_0_1 + 0.0452112268518549*G3_1_0 - 0.111951609347445*G3_1_1;
    A[1594] = -0.0172233245149903*G1_0_0 + 0.131327849426813*G1_0_1 + 0.131327849426812*G1_1_0 - 0.017223324514989*G1_1_1 - 0.0172233245149903*G3_0_0 + 0.131327849426813*G3_0_1 + 0.131327849426812*G3_1_0 - 0.017223324514989*G3_1_1;
    A[1595] = 0.0710462136243398*G1_0_0 - 0.0301408179012374*G1_0_1 - 0.0301408179012348*G1_1_0 + 0.0710462136243398*G3_0_0 - 0.0301408179012374*G3_0_1 - 0.0301408179012348*G3_1_0;
    A[1596] = -0.516699735449745*G1_0_0 - 0.930059523809558*G1_0_1 - 0.930059523809552*G1_1_0 + 0.680321318342178*G1_1_1 - 0.516699735449745*G3_0_0 - 0.930059523809558*G3_0_1 - 0.930059523809552*G3_1_0 + 0.680321318342178*G3_1_1;
    A[1597] = 0.0430583112874756*G1_0_0 - 0.331548996913594*G1_0_1 - 0.331548996913591*G1_1_0 + 0.327243165784843*G1_1_1 + 0.0430583112874756*G3_0_0 - 0.331548996913594*G3_0_1 - 0.331548996913591*G3_1_0 + 0.327243165784843*G3_1_1;
    A[1598] = -0.516699735449749*G1_0_0 - 0.0688932980599625*G1_0_1 - 0.068893298059965*G1_1_0 + 0.0344466490299823*G1_1_1 - 0.516699735449749*G3_0_0 - 0.0688932980599625*G3_0_1 - 0.068893298059965*G3_1_0 + 0.0344466490299823*G3_1_1;
    A[1599] = 1.01187031525576*G1_0_0 + 2.41341834766321*G1_0_1 + 2.41341834766321*G1_1_0 + 0.00430583112874371*G1_1_1 + 1.01187031525576*G3_0_0 + 2.41341834766321*G3_0_1 + 2.41341834766321*G3_1_0 + 0.00430583112874371*G3_1_1;
    A[1600] = 1.01187031525576*G1_0_0 + 0.152857005070557*G1_0_1 + 0.152857005070549*G1_1_0 - 0.318631503527348*G1_1_1 + 1.01187031525576*G3_0_0 + 0.152857005070557*G3_0_1 + 0.152857005070549*G3_1_0 - 0.318631503527348*G3_1_1;
    A[1601] = -3.96136463844808*G1_0_0 - 2.65239197530873*G1_0_1 - 2.65239197530872*G1_1_0 - 0.611428020282207*G1_1_1 - 3.96136463844808*G3_0_0 - 2.65239197530873*G3_0_1 - 2.65239197530872*G3_1_0 - 0.611428020282207*G3_1_1;
    A[1602] = -1.20907738095244*G5_0 + 1.51909722222226*G5_1;
    A[1603] = -0.589037698412709*G5_0 - 2.8269053764518e-14*G5_1;
    A[1604] = 6.57242063492089*G5_0 + 2.66617063492077*G5_1;
    A[1605] = 0.93005952380949*G5_0 - 5.97855098760647e-14*G5_1;
    A[1606] = 5.39434523809543*G5_0 + 3.06919642857156*G5_1;
    A[1607] = 0.930059523809564*G5_0 + 2.04613095238096*G5_1;
    A[1608] = -18.7872023809529*G5_0 - 6.23139880952396*G5_1;
    A[1609] = -2.32514880952392*G5_0 + 4.37127976190488*G5_1;
    A[1610] = 1.39508928571431*G5_0 - 7.22073225864484e-14*G5_1;
    A[1611] = -9.6726190476194*G5_0 - 7.44047619047655*G5_1;
    A[1612] = 0.0;
    A[1613] = 0.0;
    A[1614] = 0.0;
    A[1615] = 0.0;
    A[1616] = 0.0;
    A[1617] = 0.0;
    A[1618] = 0.0;
    A[1619] = 0.0;
    A[1620] = 0.0;
    A[1621] = 0.0;
    A[1622] = 0.0;
    A[1623] = 0.0;
    A[1624] = 0.0;
    A[1625] = 0.0;
    A[1626] = 0.0;
    A[1627] = 0.0;
    A[1628] = 0.0;
    A[1629] = 0.0;
    A[1630] = 0.0;
    A[1631] = 0.0;
    A[1632] = 0.0;
    A[1633] = 0.0408192791005303*G1_0_0 + 0.0408192791005316*G1_0_1 + 0.202374063051154*G1_1_0 + 0.202374063051154*G1_1_1 + 0.0408192791005303*G3_0_0 + 0.0408192791005316*G3_0_1 + 0.202374063051154*G3_1_0 + 0.202374063051154*G3_1_1;
    A[1634] = -0.04081927910053*G1_0_0 - 0.04081927910053*G3_0_0;
    A[1635] = -0.850315531305148*G1_0_1 - 0.64802758487657*G1_1_1 - 0.850315531305148*G3_0_1 - 0.64802758487657*G3_1_1;
    A[1636] = 0.340160659171087*G1_0_0 + 0.0710462136243396*G1_0_1 + 0.0710462136243471*G1_1_0 + 0.340160659171087*G3_0_0 + 0.0710462136243396*G3_0_1 + 0.0710462136243471*G3_1_0;
    A[1637] = -0.895612874779579*G1_0_0 - 0.232514880952391*G1_0_1 - 0.232514880952394*G1_1_0 + 0.0710462136243408*G1_1_1 - 0.895612874779579*G3_0_0 - 0.232514880952391*G3_0_1 - 0.232514880952394*G3_1_0 + 0.0710462136243408*G3_1_1;
    A[1638] = 1.39508928571434*G1_0_0 + 0.529617228835997*G1_0_1 + 0.52961722883601*G1_1_0 - 0.049517057980597*G1_1_1 + 1.39508928571434*G3_0_0 + 0.529617228835997*G3_0_1 + 0.52961722883601*G3_1_0 - 0.049517057980597*G3_1_1;
    A[1639] = -2.56196952160504*G1_0_0 - 1.28098476080252*G1_0_1 - 1.28098476080252*G1_1_0 - 0.286337770061739*G1_1_1 - 2.56196952160504*G3_0_0 - 1.28098476080252*G3_0_1 - 1.28098476080252*G3_1_0 - 0.286337770061739*G3_1_1;
    A[1640] = -0.34016065917109*G1_0_0 - 0.269114445546751*G1_0_1 - 0.669556740520307*G1_1_0 - 0.938671186067055*G1_1_1 - 0.34016065917109*G3_0_0 - 0.269114445546751*G3_0_1 - 0.669556740520307*G3_1_0 - 0.938671186067055*G3_1_1;
    A[1641] = 0.89561287477958*G1_0_0 + 0.663097993827194*G1_0_1 + 1.37786596119934*G1_1_0 + 1.96345899470907*G1_1_1 + 0.89561287477958*G3_0_0 + 0.663097993827194*G3_0_1 + 1.37786596119934*G3_1_0 + 1.96345899470907*G3_1_1;
    A[1642] = -1.39508928571435*G1_0_0 - 0.865472056878353*G1_0_1 - 2.19166804453271*G1_1_0 - 2.56842826829816*G1_1_1 - 1.39508928571435*G3_0_0 - 0.865472056878353*G3_0_1 - 2.19166804453271*G3_1_0 - 2.56842826829816*G3_1_1;
    A[1643] = 2.56196952160504*G1_0_0 + 1.28098476080252*G1_0_1 + 1.28098476080253*G1_1_0 + 1.98929398148156*G1_1_1 + 2.56196952160504*G3_0_0 + 1.28098476080252*G3_0_1 + 1.28098476080253*G3_1_0 + 1.98929398148156*G3_1_1;
    A[1644] = -0.0710462136243402*G1_0_1 - 0.0710462136243408*G1_1_0 + 0.198068231922404*G1_1_1 - 0.0710462136243402*G3_0_1 - 0.0710462136243408*G3_1_0 + 0.198068231922404*G3_1_1;
    A[1645] = -0.0301408179012373*G1_0_1 - 0.0301408179012366*G1_1_0 + 0.111951609347444*G1_1_1 - 0.0301408179012373*G3_0_1 - 0.0301408179012366*G3_1_0 + 0.111951609347444*G3_1_1;
    A[1646] = -0.0301408179012346*G1_0_1 - 0.0301408179012352*G1_1_0 + 0.0710462136243401*G1_1_1 - 0.0301408179012346*G3_0_1 - 0.0301408179012352*G3_1_0 + 0.0710462136243401*G3_1_1;
    A[1647] = -0.0710462136243431*G1_0_1 - 0.0710462136243424*G1_1_0 - 0.0710462136243431*G3_0_1 - 0.0710462136243424*G3_1_0;
    A[1648] = 0.262655698853627*G1_0_1 + 0.262655698853623*G1_1_0 - 0.465029761904781*G1_1_1 + 0.262655698853627*G3_0_1 + 0.262655698853623*G3_1_0 - 0.465029761904781*G3_1_1;
    A[1649] = 0.0731991291887107*G1_0_1 + 0.0731991291887147*G1_1_0 - 0.273420276675496*G1_1_1 + 0.0731991291887107*G3_0_1 + 0.0731991291887147*G3_1_0 - 0.273420276675496*G3_1_1;
    A[1650] = 0.262655698853625*G1_0_1 + 0.262655698853623*G1_1_0 - 0.142092427248683*G1_1_1 + 0.262655698853625*G3_0_1 + 0.262655698853623*G3_1_0 - 0.142092427248683*G3_1_1;
    A[1651] = -1.06165076729781e-14*G1_0_0 - 0.572675540123477*G1_0_1 - 0.572675540123476*G1_1_0 + 0.0495170579806044*G1_1_1 - 1.06165076729781e-14*G3_0_0 - 0.572675540123477*G3_0_1 - 0.572675540123476*G3_1_0 + 0.0495170579806044*G3_1_1;
    A[1652] = 1.03458908107257e-14*G1_0_0 - 0.572675540123461*G1_0_1 - 0.572675540123471*G1_1_0 + 0.210985725308654*G1_1_1 + 1.03458908107257e-14*G3_0_0 - 0.572675540123461*G3_0_1 - 0.572675540123471*G3_1_0 + 0.210985725308654*G3_1_1;
    A[1653] = 1.66205081569671*G1_0_1 + 1.6620508156967*G1_1_0 + 0.503782242063509*G1_1_1 + 1.66205081569671*G3_0_1 + 1.6620508156967*G3_1_0 + 0.503782242063509*G3_1_1;
    A[1654] = -0.961061507936543*G5_0 - 0.899057539682559*G5_1;
    A[1655] = -0.961061507936548*G5_0 + 2.82898704462298e-14*G5_1;
    A[1656] = -10.9126984126988*G5_0 - 5.14632936507956*G5_1;
    A[1657] = 5.11532738095258*G5_0 + 0.930059523809626*G5_1;
    A[1658] = -11.4397321428576*G5_0 - 3.06919642857154*G5_1;
    A[1659] = 5.11532738095258*G5_0 + 0.744047619047682*G5_1;
    A[1660] = -11.4397321428576*G5_0 + 5.30133928571446*G5_1;
    A[1661] = 0.930059523809576*G5_0 - 2.51116071428579*G5_1;
    A[1662] = 0.930059523809555*G5_0 - 0.930059523809489*G5_1;
    A[1663] = -2.41815476190488*G5_0 + 5.58035714285755*G5_1;
    A[1664] = 0.0;
    A[1665] = 0.0;
    A[1666] = 0.0;
    A[1667] = 0.0;
    A[1668] = 0.0;
    A[1669] = 0.0;
    A[1670] = 0.0;
    A[1671] = 0.0;
    A[1672] = 0.0;
    A[1673] = 0.0;
    A[1674] = 0.0;
    A[1675] = 0.0;
    A[1676] = 0.0;
    A[1677] = 0.0;
    A[1678] = 0.0;
    A[1679] = 0.0;
    A[1680] = 0.0;
    A[1681] = 0.0;
    A[1682] = 0.0;
    A[1683] = 0.0;
    A[1684] = 0.0;
    A[1685] = -0.648027584876568*G1_0_0 - 0.648027584876569*G1_0_1 + 0.202287946428581*G1_1_0 + 0.20228794642858*G1_1_1 - 0.648027584876568*G3_0_0 - 0.648027584876569*G3_0_1 + 0.202287946428581*G3_1_0 + 0.20228794642858*G3_1_1;
    A[1686] = 0.202374063051151*G1_0_0 + 0.16155478395062*G1_1_0 + 0.202374063051151*G3_0_0 + 0.16155478395062*G3_1_0;
    A[1687] = -0.0408192791005325*G1_1_1 - 0.0408192791005325*G3_1_1;
    A[1688] = 0.198068231922397*G1_0_0 + 0.26911444554674*G1_0_1 + 0.269114445546733*G1_1_0 + 0.34016065917107*G1_1_1 + 0.198068231922397*G3_0_0 + 0.26911444554674*G3_0_1 + 0.269114445546733*G3_1_0 + 0.34016065917107*G3_1_1;
    A[1689] = 0.111951609347447*G1_0_0 + 0.142092427248679*G1_0_1 + 0.142092427248682*G1_1_0 + 0.172233245149923*G1_1_1 + 0.111951609347447*G3_0_0 + 0.142092427248679*G3_0_1 + 0.142092427248682*G3_1_0 + 0.172233245149923*G3_1_1;
    A[1690] = 0.0710462136243352*G1_0_0 + 0.101187031525574*G1_0_1 + 0.101187031525573*G1_1_0 + 0.131327849426802*G1_1_1 + 0.0710462136243352*G3_0_0 + 0.101187031525574*G3_0_1 + 0.101187031525573*G3_1_0 + 0.131327849426802*G3_1_1;
    A[1691] = 0.0710462136243392*G1_0_1 + 0.0710462136243403*G1_1_0 + 0.142092427248686*G1_1_1 + 0.0710462136243392*G3_0_1 + 0.0710462136243403*G3_1_0 + 0.142092427248686*G3_1_1;
    A[1692] = -0.286337770061744*G1_0_0 + 0.994646990740779*G1_0_1 + 0.994646990740773*G1_1_0 - 0.286337770061737*G1_1_1 - 0.286337770061744*G3_0_0 + 0.994646990740779*G3_0_1 + 0.994646990740773*G3_1_0 - 0.286337770061737*G3_1_1;
    A[1693] = -0.0495170579805974*G1_0_0 - 0.579134286816599*G1_0_1 - 0.579134286816596*G1_1_0 + 0.286337770061735*G1_1_1 - 0.0495170579805974*G3_0_0 - 0.579134286816599*G3_0_1 - 0.579134286816596*G3_1_0 + 0.286337770061735*G3_1_1;
    A[1694] = 0.0710462136243386*G1_0_0 + 0.303561094576729*G1_0_1 + 0.303561094576733*G1_1_0 - 0.359536899250452*G1_1_1 + 0.0710462136243386*G3_0_0 + 0.303561094576729*G3_0_1 + 0.303561094576733*G3_1_0 - 0.359536899250452*G3_1_1;
    A[1695] = -0.0710462136243409*G1_0_1 - 0.0710462136243402*G1_1_0 + 0.198068231922404*G1_1_1 - 0.0710462136243409*G3_0_1 - 0.0710462136243402*G3_1_0 + 0.198068231922404*G3_1_1;
    A[1696] = 1.98929398148155*G1_0_0 + 0.708309220679033*G1_0_1 + 0.708309220679033*G1_1_0 + 1.98929398148155*G1_1_1 + 1.98929398148155*G3_0_0 + 0.708309220679033*G3_0_1 + 0.708309220679033*G3_1_0 + 1.98929398148155*G3_1_1;
    A[1697] = -2.56842826829815*G1_0_0 - 0.376760223765436*G1_0_1 - 1.70295621141981*G1_1_0 - 0.906377452601428*G1_1_1 - 2.56842826829815*G3_0_0 - 0.376760223765436*G3_0_1 - 1.70295621141981*G3_1_0 - 0.906377452601428*G3_1_1;
    A[1698] = 1.96345899470906*G1_0_0 + 0.585593033509713*G1_0_1 + 1.30036100088187*G1_1_0 + 0.818107914462102*G1_1_1 + 1.96345899470906*G3_0_0 + 0.585593033509713*G3_0_1 + 1.30036100088187*G3_1_0 + 0.818107914462102*G3_1_1;
    A[1699] = -0.938671186067048*G1_0_0 - 0.269114445546741*G1_0_1 - 0.669556740520299*G1_1_0 - 0.340160659171075*G1_1_1 - 0.938671186067048*G3_0_0 - 0.269114445546741*G3_0_1 - 0.669556740520299*G3_1_0 - 0.340160659171075*G3_1_1;
    A[1700] = 0.503782242063526*G1_0_0 - 1.15826857363319*G1_0_1 - 1.15826857363319*G1_1_0 - 2.8203193893299*G1_1_1 + 0.503782242063526*G3_0_0 - 1.15826857363319*G3_0_1 - 1.15826857363319*G3_1_0 - 2.8203193893299*G3_1_1;
    A[1701] = 0.0495170579805794*G1_0_0 + 0.62219259810406*G1_0_1 + 0.622192598104065*G1_1_0 + 1.19486813822754*G1_1_1 + 0.0495170579805794*G3_0_0 + 0.62219259810406*G3_0_1 + 0.622192598104065*G3_1_0 + 1.19486813822754*G3_1_1;
    A[1702] = -0.465029761904759*G1_0_0 - 0.727685460758387*G1_0_1 - 0.727685460758384*G1_1_0 - 0.990341159612022*G1_1_1 - 0.465029761904759*G3_0_0 - 0.727685460758387*G3_0_1 - 0.727685460758384*G3_1_0 - 0.990341159612022*G3_1_1;
    A[1703] = 0.210985725308643*G1_0_0 + 0.783661265432127*G1_0_1 + 0.783661265432122*G1_1_0 + 1.3563368055556*G1_1_1 + 0.210985725308643*G3_0_0 + 0.783661265432127*G3_0_1 + 0.783661265432122*G3_1_0 + 1.3563368055556*G3_1_1;
    A[1704] = -0.273420276675492*G1_0_0 - 0.346619405864205*G1_0_1 - 0.346619405864208*G1_1_0 - 0.419818535052906*G1_1_1 - 0.273420276675492*G3_0_0 - 0.346619405864205*G3_0_1 - 0.346619405864208*G3_1_0 - 0.419818535052906*G3_1_1;
    A[1705] = -0.142092427248675*G1_0_0 - 0.404748126102305*G1_0_1 - 0.404748126102306*G1_1_0 - 0.667403824955934*G1_1_1 - 0.142092427248675*G3_0_0 - 0.404748126102305*G3_0_1 - 0.404748126102306*G3_1_0 - 0.667403824955934*G3_1_1;
    A[1706] = 5.14632936507957*G5_0 - 5.76636904761925*G5_1;
    A[1707] = 0.899057539682545*G5_0 - 0.062003968254021*G5_1;
    A[1708] = -0.961061507936559*G5_1;
    A[1709] = 2.51116071428572*G5_0 + 3.44122023809524*G5_1;
    A[1710] = 0.930059523809533*G5_0 + 1.86011904761909*G5_1;
    A[1711] = 3.06919642857157*G5_0 - 8.370535714286*G5_1;
    A[1712] = -0.930059523809569*G5_0 + 4.18526785714297*G5_1;
    A[1713] = -5.30133928571445*G5_0 - 16.741071428572*G5_1;
    A[1714] = -0.744047619047665*G5_0 + 4.37127976190483*G5_1;
    A[1715] = -5.58035714285736*G5_0 - 7.99851190476239*G5_1;
    A[1716] = 0.0;
    A[1717] = 0.0;
    A[1718] = 0.0;
    A[1719] = 0.0;
    A[1720] = 0.0;
    A[1721] = 0.0;
    A[1722] = 0.0;
    A[1723] = 0.0;
    A[1724] = 0.0;
    A[1725] = 0.0;
    A[1726] = 0.0;
    A[1727] = 0.0;
    A[1728] = 0.0;
    A[1729] = 0.0;
    A[1730] = 0.0;
    A[1731] = 0.0;
    A[1732] = 0.0;
    A[1733] = 0.0;
    A[1734] = 0.0;
    A[1735] = 0.0;
    A[1736] = 0.0;
    A[1737] = 0.594204695767216*G1_0_0 + 0.594204695767218*G1_0_1 - 0.0158454585537941*G1_1_0 - 0.0158454585537939*G1_1_1 + 0.594204695767216*G3_0_0 + 0.594204695767218*G3_0_1 - 0.0158454585537941*G3_1_0 - 0.0158454585537939*G3_1_1;
    A[1738] = -0.449959352954155*G1_0_0 - 0.380291005291012*G1_1_0 - 0.449959352954155*G3_0_0 - 0.380291005291012*G3_1_0;
    A[1739] = -0.0379774305555575*G1_1_1 - 0.0379774305555575*G3_1_1;
    A[1740] = -0.359536899250438*G1_0_0 - 0.663097993827168*G1_0_1 - 0.66309799382717*G1_1_0 - 0.895612874779553*G1_1_1 - 0.359536899250438*G3_0_0 - 0.663097993827168*G3_0_1 - 0.66309799382717*G3_1_0 - 0.895612874779553*G3_1_1;
    A[1741] = -0.111951609347446*G1_0_0 - 0.157162836199294*G1_0_1 - 0.157162836199297*G1_1_0 - 0.21959738756614*G1_1_1 - 0.111951609347446*G3_0_0 - 0.157162836199294*G3_0_1 - 0.157162836199297*G3_1_0 - 0.21959738756614*G3_1_1;
    A[1742] = -0.017223324514988*G1_0_0 - 0.148551173941803*G1_0_1 - 0.148551173941802*G1_1_0 - 0.297102347883608*G1_1_1 - 0.017223324514988*G3_0_0 - 0.148551173941803*G3_0_1 - 0.148551173941802*G3_1_0 - 0.297102347883608*G3_1_1;
    A[1743] = 0.0301408179012378*G1_0_1 + 0.0301408179012369*G1_1_0 + 0.131327849426818*G1_1_1 + 0.0301408179012378*G3_0_1 + 0.0301408179012369*G3_1_0 + 0.131327849426818*G3_1_1;
    A[1744] = 0.286337770061744*G1_0_0 - 0.5791342868166*G1_0_1 - 0.579134286816594*G1_1_0 - 0.0495170579805984*G1_1_1 + 0.286337770061744*G3_0_0 - 0.5791342868166*G3_0_1 - 0.579134286816594*G3_1_0 - 0.0495170579805984*G3_1_1;
    A[1745] = 0.103339947089949*G1_0_0 - 0.0301408179012375*G1_0_1 - 0.0301408179012378*G1_1_0 + 0.103339947089946*G1_1_1 + 0.103339947089949*G3_0_0 - 0.0301408179012375*G3_0_1 - 0.0301408179012378*G3_1_0 + 0.103339947089946*G3_1_1;
    A[1746] = -0.0172233245149919*G1_0_0 + 0.0452112268518549*G1_0_1 + 0.0452112268518563*G1_1_0 - 0.111951609347445*G1_1_1 - 0.0172233245149919*G3_0_0 + 0.0452112268518549*G3_0_1 + 0.0452112268518563*G3_1_0 - 0.111951609347445*G3_1_1;
    A[1747] = -0.0301408179012366*G1_0_1 - 0.0301408179012373*G1_1_0 + 0.111951609347444*G1_1_1 - 0.0301408179012366*G3_0_1 - 0.0301408179012373*G3_1_0 + 0.111951609347444*G3_1_1;
    A[1748] = -2.56842826829815*G1_0_0 - 1.70295621141981*G1_0_1 - 0.376760223765436*G1_1_0 - 0.906377452601428*G1_1_1 - 2.56842826829815*G3_0_0 - 1.70295621141981*G3_0_1 - 0.376760223765436*G3_1_0 - 0.906377452601428*G3_1_1;
    A[1749] = 4.41778273809538*G1_0_0 + 1.89887152777782*G1_0_1 + 1.89887152777782*G1_1_0 + 3.07436342592602*G1_1_1 + 4.41778273809538*G3_0_0 + 1.89887152777782*G3_0_1 + 1.89887152777782*G3_1_0 + 3.07436342592602*G3_1_1;
    A[1750] = -3.95705880731934*G1_0_0 - 1.45321800595241*G1_0_1 - 2.50384080136691*G1_1_0 - 1.80414324294536*G1_1_1 - 3.95705880731934*G3_0_0 - 1.45321800595241*G3_0_1 - 2.50384080136691*G3_1_0 - 1.80414324294536*G3_1_1;
    A[1751] = 1.96345899470905*G1_0_0 + 0.66309799382717*G1_0_1 + 1.37786596119932*G1_1_0 + 0.895612874779554*G1_1_1 + 1.96345899470905*G3_0_0 + 0.66309799382717*G3_0_1 + 1.37786596119932*G3_1_0 + 0.895612874779554*G3_1_1;
    A[1752] = -0.611428020282231*G1_0_0 + 2.04096395502652*G1_0_1 + 2.04096395502651*G1_1_0 + 0.73199129188713*G1_1_1 - 0.611428020282231*G3_0_0 + 2.04096395502652*G3_0_1 + 2.04096395502651*G3_1_0 + 0.73199129188713*G3_1_1;
    A[1753] = 0.00430583112878148*G1_0_0 - 2.40911251653445*G1_0_1 - 2.40911251653445*G1_1_0 - 3.81066054894191*G1_1_1 + 0.00430583112878148*G3_0_0 - 2.40911251653445*G3_0_1 - 2.40911251653445*G3_1_0 - 3.81066054894191*G3_1_1;
    A[1754] = 0.680321318342144*G1_0_0 + 1.6103808421517*G1_0_1 + 1.6103808421517*G1_1_0 + 2.0237406305115*G1_1_1 + 0.680321318342144*G3_0_0 + 1.6103808421517*G3_0_1 + 1.6103808421517*G3_1_0 + 2.0237406305115*G3_1_1;
    A[1755] = -0.318631503527344*G1_0_0 - 0.471488508597901*G1_0_1 - 0.471488508597898*G1_1_0 + 0.38752480158733*G1_1_1 - 0.318631503527344*G3_0_0 - 0.471488508597901*G3_0_1 - 0.471488508597898*G3_1_0 + 0.38752480158733*G3_1_1;
    A[1756] = 0.32724316578484*G1_0_0 + 0.658792162698431*G1_0_1 + 0.658792162698431*G1_1_0 + 1.03339947089951*G1_1_1 + 0.32724316578484*G3_0_0 + 0.658792162698431*G3_0_1 + 0.658792162698431*G3_1_0 + 1.03339947089951*G3_1_1;
    A[1757] = 0.0344466490299813*G1_0_0 + 0.10333994708995*G1_0_1 + 0.103339947089946*G1_1_0 - 0.344466490299843*G1_1_1 + 0.0344466490299813*G3_0_0 + 0.10333994708995*G3_0_1 + 0.103339947089946*G3_1_0 - 0.344466490299843*G3_1_1;
    A[1758] = -2.66617063492074*G5_0 + 3.90625000000013*G5_1;
    A[1759] = -1.51909722222222*G5_0 - 2.72817460317461*G5_1;
    A[1760] = -0.589037698412712*G5_1;
    A[1761] = -4.37127976190476*G5_0 - 6.69642857142869*G5_1;
    A[1762] = 1.39508928571435*G5_1;
    A[1763] = -3.06919642857157*G5_0 + 2.32514880952386*G5_1;
    A[1764] = 1.44894404634222e-14*G5_0 + 0.930059523809585*G5_1;
    A[1765] = 6.23139880952405*G5_0 - 12.5558035714291*G5_1;
    A[1766] = -2.046130952381*G5_0 - 1.11607142857148*G5_1;
    A[1767] = 7.44047619047655*G5_0 - 2.23214285714287*G5_1;
    A[1768] = 0.0;
    A[1769] = 0.0;
    A[1770] = 0.0;
    A[1771] = 0.0;
    A[1772] = 0.0;
    A[1773] = 0.0;
    A[1774] = 0.0;
    A[1775] = 0.0;
    A[1776] = 0.0;
    A[1777] = 0.0;
    A[1778] = 0.0;
    A[1779] = 0.0;
    A[1780] = 0.0;
    A[1781] = 0.0;
    A[1782] = 0.0;
    A[1783] = 0.0;
    A[1784] = 0.0;
    A[1785] = 0.0;
    A[1786] = 0.0;
    A[1787] = 0.0;
    A[1788] = 0.0;
    A[1789] = -0.44995935295416*G1_0_0 - 0.449959352954161*G1_0_1 - 0.0696683476631409*G1_1_0 - 0.0696683476631423*G1_1_1 - 0.44995935295416*G3_0_0 - 0.449959352954161*G3_0_1 - 0.0696683476631409*G3_1_0 - 0.0696683476631423*G3_1_1;
    A[1790] = 0.594204695767207*G1_0_0 + 0.610050154321001*G1_1_0 + 0.594204695767207*G3_0_0 + 0.610050154321001*G3_1_0;
    A[1791] = -0.037977430555558*G1_1_1 - 0.037977430555558*G3_1_1;
    A[1792] = 0.28633777006172*G1_0_0 + 0.865472056878311*G1_0_1 + 0.865472056878325*G1_1_0 + 1.39508928571431*G1_1_1 + 0.28633777006172*G3_0_0 + 0.865472056878311*G3_0_1 + 0.865472056878325*G3_1_0 + 1.39508928571431*G3_1_1;
    A[1793] = 0.103339947089953*G1_0_0 + 0.133480764991188*G1_0_1 + 0.133480764991191*G1_1_0 + 0.266961529982381*G1_1_1 + 0.103339947089953*G3_0_0 + 0.133480764991188*G3_0_1 + 0.133480764991191*G3_1_0 + 0.266961529982381*G3_1_1;
    A[1794] = -0.0172233245149941*G1_0_0 - 0.0624345513668489*G1_0_1 - 0.06243455136685*G1_1_0 - 0.219597387566153*G1_1_1 - 0.0172233245149941*G3_0_0 - 0.0624345513668489*G3_0_1 - 0.06243455136685*G3_1_0 - 0.219597387566153*G3_1_1;
    A[1795] = 0.0301408179012346*G1_0_1 + 0.0301408179012347*G1_1_0 + 0.172233245149919*G1_1_1 + 0.0301408179012346*G3_0_1 + 0.0301408179012347*G3_1_0 + 0.172233245149919*G3_1_1;
    A[1796] = -0.359536899250458*G1_0_0 + 0.303561094576731*G1_0_1 + 0.303561094576729*G1_1_0 + 0.0710462136243458*G1_1_1 - 0.359536899250458*G3_0_0 + 0.303561094576731*G3_0_1 + 0.303561094576729*G3_1_0 + 0.0710462136243458*G3_1_1;
    A[1797] = -0.111951609347446*G1_0_0 + 0.0452112268518545*G1_0_1 + 0.0452112268518528*G1_1_0 - 0.0172233245149973*G1_1_1 - 0.111951609347446*G3_0_0 + 0.0452112268518545*G3_0_1 + 0.0452112268518528*G3_1_0 - 0.0172233245149973*G3_1_1;
    A[1798] = -0.0172233245149903*G1_0_0 + 0.131327849426812*G1_0_1 + 0.131327849426813*G1_1_0 - 0.017223324514989*G1_1_1 - 0.0172233245149903*G3_0_0 + 0.131327849426812*G3_0_1 + 0.131327849426813*G3_1_0 - 0.017223324514989*G3_1_1;
    A[1799] = -0.0301408179012353*G1_0_1 - 0.0301408179012346*G1_1_0 + 0.0710462136243401*G1_1_1 - 0.0301408179012353*G3_0_1 - 0.0301408179012346*G3_1_0 + 0.0710462136243401*G3_1_1;
    A[1800] = 1.96345899470906*G1_0_0 + 1.30036100088187*G1_0_1 + 0.585593033509713*G1_1_0 + 0.818107914462102*G1_1_1 + 1.96345899470906*G3_0_0 + 1.30036100088187*G3_0_1 + 0.585593033509713*G3_1_0 + 0.818107914462102*G3_1_1;
    A[1801] = -3.95705880731934*G1_0_0 - 2.50384080136691*G1_0_1 - 1.45321800595241*G1_1_0 - 1.80414324294536*G1_1_1 - 3.95705880731934*G3_0_0 - 2.50384080136691*G3_0_1 - 1.45321800595241*G3_1_0 - 1.80414324294536*G3_1_1;
    A[1802] = 4.41778273809537*G1_0_0 + 2.51891121031752*G1_0_1 + 2.51891121031752*G1_1_0 + 3.69440310846571*G1_1_1 + 4.41778273809537*G3_0_0 + 2.51891121031752*G3_0_1 + 2.51891121031752*G3_1_0 + 3.69440310846571*G3_1_1;
    A[1803] = -2.56842826829813*G1_0_0 - 0.865472056878313*G1_0_1 - 2.19166804453268*G1_1_0 - 1.39508928571432*G1_1_1 - 2.56842826829813*G3_0_0 - 0.865472056878313*G3_0_1 - 2.19166804453268*G3_1_0 - 1.39508928571432*G3_1_1;
    A[1804] = 0.680321318342197*G1_0_0 - 0.930059523809544*G1_0_1 - 0.930059523809541*G1_1_0 - 0.516699735449744*G1_1_1 + 0.680321318342197*G3_0_0 - 0.930059523809544*G3_0_1 - 0.930059523809541*G3_1_0 - 0.516699735449744*G3_1_1;
    A[1805] = 0.00430583112871386*G1_0_0 + 2.41341834766319*G1_0_1 + 2.41341834766319*G1_1_0 + 1.01187031525573*G1_1_1 + 0.00430583112871386*G3_0_0 + 2.41341834766319*G3_0_1 + 2.41341834766319*G3_1_0 + 1.01187031525573*G3_1_1;
    A[1806] = -0.611428020282173*G1_0_0 - 2.65239197530871*G1_0_1 - 2.6523919753087*G1_1_0 - 3.96136463844808*G1_1_1 - 0.611428020282173*G3_0_0 - 2.65239197530871*G3_0_1 - 2.6523919753087*G3_1_0 - 3.96136463844808*G3_1_1;
    A[1807] = 0.327243165784843*G1_0_0 - 0.331548996913593*G1_0_1 - 0.331548996913589*G1_1_0 + 0.0430583112874767*G1_1_1 + 0.327243165784843*G3_0_0 - 0.331548996913593*G3_0_1 - 0.331548996913589*G3_1_0 + 0.0430583112874767*G3_1_1;
    A[1808] = -0.31863150352735*G1_0_0 + 0.152857005070556*G1_0_1 + 0.152857005070546*G1_1_0 + 1.01187031525578*G1_1_1 - 0.31863150352735*G3_0_0 + 0.152857005070556*G3_0_1 + 0.152857005070546*G3_1_0 + 1.01187031525578*G3_1_1;
    A[1809] = 0.0344466490299831*G1_0_0 - 0.0688932980599677*G1_0_1 - 0.0688932980599634*G1_1_0 - 0.516699735449754*G1_1_1 + 0.0344466490299831*G3_0_0 - 0.0688932980599677*G3_0_1 - 0.0688932980599634*G3_1_0 - 0.516699735449754*G3_1_1;
    A[1810] = 1.51909722222228*G5_0 - 1.20907738095242*G5_1;
    A[1811] = 2.66617063492062*G5_0 + 6.57242063492078*G5_1;
    A[1812] = -1.74825431908943e-14*G5_0 - 0.589037698412728*G5_1;
    A[1813] = 3.06919642857137*G5_0 + 5.39434523809536*G5_1;
    A[1814] = 3.26561694352634e-14*G5_0 + 0.930059523809559*G5_1;
    A[1815] = 4.37127976190494*G5_0 - 2.32514880952387*G5_1;
    A[1816] = -3.45821461744666e-14*G5_0 + 1.39508928571431*G5_1;
    A[1817] = 2.04613095238102*G5_0 + 0.93005952380956*G5_1;
    A[1818] = -6.23139880952411*G5_0 - 18.7872023809531*G5_1;
    A[1819] = -7.44047619047659*G5_0 - 9.67261904761945*G5_1;
    A[1820] = 0.0;
    A[1821] = 0.0;
    A[1822] = 0.0;
    A[1823] = 0.0;
    A[1824] = 0.0;
    A[1825] = 0.0;
    A[1826] = 0.0;
    A[1827] = 0.0;
    A[1828] = 0.0;
    A[1829] = 0.0;
    A[1830] = 0.0;
    A[1831] = 0.0;
    A[1832] = 0.0;
    A[1833] = 0.0;
    A[1834] = 0.0;
    A[1835] = 0.0;
    A[1836] = 0.0;
    A[1837] = 0.0;
    A[1838] = 0.0;
    A[1839] = 0.0;
    A[1840] = 0.0;
    A[1841] = 0.202374063051153*G1_0_0 + 0.202374063051154*G1_0_1 + 0.0408192791005288*G1_1_0 + 0.0408192791005318*G1_1_1 + 0.202374063051153*G3_0_0 + 0.202374063051154*G3_0_1 + 0.0408192791005288*G3_1_0 + 0.0408192791005318*G3_1_1;
    A[1842] = -0.648027584876558*G1_0_0 - 0.85031553130514*G1_1_0 - 0.648027584876558*G3_0_0 - 0.85031553130514*G3_1_0;
    A[1843] = -0.0408192791005314*G1_1_1 - 0.0408192791005314*G3_1_1;
    A[1844] = -0.286337770061726*G1_0_0 - 1.28098476080249*G1_0_1 - 1.28098476080251*G1_1_0 - 2.56196952160502*G1_1_1 - 0.286337770061726*G3_0_0 - 1.28098476080249*G3_0_1 - 1.28098476080251*G3_1_0 - 2.56196952160502*G3_1_1;
    A[1845] = -0.0495170579806048*G1_0_0 + 0.529617228835994*G1_0_1 + 0.529617228835998*G1_1_0 + 1.39508928571435*G1_1_1 - 0.0495170579806048*G3_0_0 + 0.529617228835994*G3_0_1 + 0.529617228835998*G3_1_0 + 1.39508928571435*G3_1_1;
    A[1846] = 0.0710462136243425*G1_0_0 - 0.232514880952387*G1_0_1 - 0.23251488095239*G1_1_0 - 0.895612874779584*G1_1_1 + 0.0710462136243425*G3_0_0 - 0.232514880952387*G3_0_1 - 0.23251488095239*G3_1_0 - 0.895612874779584*G3_1_1;
    A[1847] = 0.0710462136243427*G1_0_1 + 0.0710462136243432*G1_1_0 + 0.340160659171099*G1_1_1 + 0.0710462136243427*G3_0_1 + 0.0710462136243432*G3_1_0 + 0.340160659171099*G3_1_1;
    A[1848] = 0.198068231922409*G1_0_0 - 0.071046213624343*G1_0_1 - 0.0710462136243352*G1_1_0 + 0.198068231922409*G3_0_0 - 0.071046213624343*G3_0_1 - 0.0710462136243352*G3_1_0;
    A[1849] = 0.111951609347447*G1_0_0 - 0.0301408179012355*G1_0_1 - 0.0301408179012401*G1_1_0 + 0.111951609347447*G3_0_0 - 0.0301408179012355*G3_0_1 - 0.0301408179012401*G3_1_0;
    A[1850] = 0.0710462136243399*G1_0_0 - 0.0301408179012347*G1_0_1 - 0.0301408179012374*G1_1_0 + 0.0710462136243399*G3_0_0 - 0.0301408179012347*G3_0_1 - 0.0301408179012374*G3_1_0;
    A[1851] = -0.0710462136243424*G1_0_1 - 0.0710462136243431*G1_1_0 - 0.0710462136243424*G3_0_1 - 0.0710462136243431*G3_1_0;
    A[1852] = -0.938671186067048*G1_0_0 - 0.669556740520299*G1_0_1 - 0.269114445546741*G1_1_0 - 0.340160659171075*G1_1_1 - 0.938671186067048*G3_0_0 - 0.669556740520299*G3_0_1 - 0.269114445546741*G3_1_0 - 0.340160659171075*G3_1_1;
    A[1853] = 1.96345899470905*G1_0_0 + 1.37786596119932*G1_0_1 + 0.66309799382717*G1_1_0 + 0.895612874779554*G1_1_1 + 1.96345899470905*G3_0_0 + 1.37786596119932*G3_0_1 + 0.66309799382717*G3_1_0 + 0.895612874779554*G3_1_1;
    A[1854] = -2.56842826829813*G1_0_0 - 2.19166804453268*G1_0_1 - 0.865472056878313*G1_1_0 - 1.39508928571432*G1_1_1 - 2.56842826829813*G3_0_0 - 2.19166804453268*G3_0_1 - 0.865472056878313*G3_1_0 - 1.39508928571432*G3_1_1;
    A[1855] = 1.98929398148153*G1_0_0 + 1.2809847608025*G1_0_1 + 1.2809847608025*G1_1_0 + 2.56196952160502*G1_1_1 + 1.98929398148153*G3_0_0 + 1.2809847608025*G3_0_1 + 1.2809847608025*G3_1_0 + 2.56196952160502*G3_1_1;
    A[1856] = -0.46502976190479*G1_0_0 + 0.262655698853616*G1_0_1 + 0.262655698853612*G1_1_0 - 1.73921749398176e-14*G1_1_1 - 0.46502976190479*G3_0_0 + 0.262655698853616*G3_0_1 + 0.262655698853612*G3_1_0 - 1.73921749398176e-14*G3_1_1;
    A[1857] = 0.0495170579806208*G1_0_0 - 0.572675540123452*G1_0_1 - 0.572675540123461*G1_1_0 + 3.25500802526857e-14*G1_1_1 + 0.0495170579806208*G3_0_0 - 0.572675540123452*G3_0_1 - 0.572675540123461*G3_1_0 + 3.25500802526857e-14*G3_1_1;
    A[1858] = 0.503782242063486*G1_0_0 + 1.66205081569669*G1_0_1 + 1.66205081569669*G1_1_0 - 3.93545872973133e-14*G1_1_1 + 0.503782242063486*G3_0_0 + 1.66205081569669*G3_0_1 + 1.66205081569669*G3_1_0 - 3.93545872973133e-14*G3_1_1;
    A[1859] = -0.273420276675496*G1_0_0 + 0.0731991291887152*G1_0_1 + 0.0731991291887186*G1_1_0 - 0.273420276675496*G3_0_0 + 0.0731991291887152*G3_0_1 + 0.0731991291887186*G3_1_0;
    A[1860] = 0.210985725308655*G1_0_0 - 0.572675540123481*G1_0_1 - 0.572675540123477*G1_1_0 + 0.210985725308655*G3_0_0 - 0.572675540123481*G3_0_1 - 0.572675540123477*G3_1_0;
    A[1861] = -0.142092427248682*G1_0_0 + 0.262655698853626*G1_0_1 + 0.262655698853628*G1_1_0 - 0.142092427248682*G3_0_0 + 0.262655698853626*G3_0_1 + 0.262655698853628*G3_1_0;
    A[1862] = -0.899057539682572*G5_0 - 0.961061507936549*G5_1;
    A[1863] = -5.14632936507947*G5_0 - 10.9126984126988*G5_1;
    A[1864] = 1.0994677390741e-14*G5_0 - 0.961061507936533*G5_1;
    A[1865] = -3.06919642857145*G5_0 - 11.4397321428575*G5_1;
    A[1866] = 0.930059523809538*G5_0 + 5.11532738095258*G5_1;
    A[1867] = -2.51116071428583*G5_0 + 0.930059523809559*G5_1;
    A[1868] = -0.930059523809535*G5_0 + 0.930059523809611*G5_1;
    A[1869] = 0.744047619047615*G5_0 + 5.11532738095255*G5_1;
    A[1870] = 5.30133928571453*G5_0 - 11.4397321428575*G5_1;
    A[1871] = 5.58035714285741*G5_0 - 2.4181547619047*G5_1;
    A[1872] = 0.0;
    A[1873] = 0.0;
    A[1874] = 0.0;
    A[1875] = 0.0;
    A[1876] = 0.0;
    A[1877] = 0.0;
    A[1878] = 0.0;
    A[1879] = 0.0;
    A[1880] = 0.0;
    A[1881] = 0.0;
    A[1882] = 0.0;
    A[1883] = 0.0;
    A[1884] = 0.0;
    A[1885] = 0.0;
    A[1886] = 0.0;
    A[1887] = 0.0;
    A[1888] = 0.0;
    A[1889] = 0.0;
    A[1890] = 0.0;
    A[1891] = 0.0;
    A[1892] = 0.0;
    A[1893] = -0.215291556437402*G1_0_0 - 0.215291556437403*G1_0_1 - 0.215291556437401*G1_1_0 - 0.215291556437399*G1_1_1 - 0.215291556437402*G3_0_0 - 0.215291556437403*G3_0_1 - 0.215291556437401*G3_1_0 - 0.215291556437399*G3_1_1;
    A[1894] = 0.107645778218702*G1_0_0 + 0.107645778218702*G3_0_0;
    A[1895] = 0.107645778218701*G1_1_1 + 0.107645778218701*G3_1_1;
    A[1896] = -0.667403824955919*G1_0_0 - 0.262655698853608*G1_0_1 - 0.262655698853611*G1_1_0 + 2.14435674078528e-14*G1_1_1 - 0.667403824955919*G3_0_0 - 0.262655698853608*G3_0_1 - 0.262655698853611*G3_1_0 + 2.14435674078528e-14*G3_1_1;
    A[1897] = -0.344466490299831*G1_0_0 - 0.447806437389783*G1_0_1 - 0.447806437389786*G1_1_0 - 0.516699735449765*G1_1_1 - 0.344466490299831*G3_0_0 - 0.447806437389783*G3_0_1 - 0.447806437389786*G3_1_0 - 0.516699735449765*G3_1_1;
    A[1898] = -0.516699735449737*G1_0_0 - 0.44780643738977*G1_0_1 - 0.447806437389781*G1_1_0 - 0.344466490299817*G1_1_1 - 0.516699735449737*G3_0_0 - 0.44780643738977*G3_0_1 - 0.447806437389781*G3_1_0 - 0.344466490299817*G3_1_1;
    A[1899] = -0.262655698853623*G1_0_1 - 0.262655698853627*G1_1_0 - 0.66740382495594*G1_1_1 - 0.262655698853623*G3_0_1 - 0.262655698853627*G3_1_0 - 0.66740382495594*G3_1_1;
    A[1900] = -2.82031938932991*G1_0_0 - 1.15826857363319*G1_0_1 - 1.15826857363319*G1_1_0 + 0.503782242063511*G1_1_1 - 2.82031938932991*G3_0_0 - 1.15826857363319*G3_0_1 - 1.15826857363319*G3_1_0 + 0.503782242063511*G3_1_1;
    A[1901] = 0.73199129188714*G1_0_0 + 2.04096395502652*G1_0_1 + 2.04096395502652*G1_1_0 - 0.611428020282208*G1_1_1 + 0.73199129188714*G3_0_0 + 2.04096395502652*G3_0_1 + 2.04096395502652*G3_1_0 - 0.611428020282208*G3_1_1;
    A[1902] = -0.516699735449745*G1_0_0 - 0.930059523809552*G1_0_1 - 0.930059523809558*G1_1_0 + 0.680321318342178*G1_1_1 - 0.516699735449745*G3_0_0 - 0.930059523809552*G3_0_1 - 0.930059523809558*G3_1_0 + 0.680321318342178*G3_1_1;
    A[1903] = 0.262655698853623*G1_0_1 + 0.262655698853627*G1_1_0 - 0.465029761904781*G1_1_1 + 0.262655698853623*G3_0_1 + 0.262655698853627*G3_1_0 - 0.465029761904781*G3_1_1;
    A[1904] = 0.503782242063526*G1_0_0 - 1.15826857363319*G1_0_1 - 1.15826857363319*G1_1_0 - 2.8203193893299*G1_1_1 + 0.503782242063526*G3_0_0 - 1.15826857363319*G3_0_1 - 1.15826857363319*G3_1_0 - 2.8203193893299*G3_1_1;
    A[1905] = -0.611428020282231*G1_0_0 + 2.04096395502651*G1_0_1 + 2.04096395502652*G1_1_0 + 0.731991291887129*G1_1_1 - 0.611428020282231*G3_0_0 + 2.04096395502651*G3_0_1 + 2.04096395502652*G3_1_0 + 0.731991291887129*G3_1_1;
    A[1906] = 0.680321318342197*G1_0_0 - 0.930059523809541*G1_0_1 - 0.930059523809544*G1_1_0 - 0.516699735449744*G1_1_1 + 0.680321318342197*G3_0_0 - 0.930059523809541*G3_0_1 - 0.930059523809544*G3_1_0 - 0.516699735449744*G3_1_1;
    A[1907] = -0.46502976190479*G1_0_0 + 0.262655698853612*G1_0_1 + 0.262655698853616*G1_1_0 - 1.73674551302849e-14*G1_1_1 - 0.46502976190479*G3_0_0 + 0.262655698853612*G3_0_1 + 0.262655698853616*G3_1_0 - 1.73674551302849e-14*G3_1_1;
    A[1908] = 7.06156305114663*G1_0_0 + 3.1001984126985*G1_0_1 + 3.1001984126985*G1_1_0 + 7.06156305114663*G1_1_1 + 7.06156305114663*G3_0_0 + 3.1001984126985*G3_0_1 + 3.1001984126985*G3_1_0 + 7.06156305114663*G3_1_1;
    A[1909] = -6.32957175925947*G1_0_0 - 3.05714010141102*G1_0_1 - 3.05714010141102*G1_1_0 - 1.8084490740741*G1_1_1 - 6.32957175925947*G3_0_0 - 3.05714010141102*G3_0_1 - 3.05714010141102*G3_1_0 - 1.8084490740741*G3_1_1;
    A[1910] = 2.75573192239866*G1_0_0 + 1.37786596119932*G1_0_1 + 1.37786596119932*G1_1_0 + 1.0333994708995*G1_1_1 + 2.75573192239866*G3_0_0 + 1.37786596119932*G3_0_1 + 1.37786596119932*G3_1_0 + 1.0333994708995*G3_1_1;
    A[1911] = -1.80844907407412*G1_0_0 - 3.05714010141102*G1_0_1 - 3.05714010141102*G1_1_0 - 6.32957175925948*G1_1_1 - 1.80844907407412*G3_0_0 - 3.05714010141102*G3_0_1 - 3.05714010141102*G3_1_0 - 6.32957175925948*G3_1_1;
    A[1912] = 1.42092427248681*G1_0_0 + 1.46398258377428*G1_0_1 + 1.46398258377429*G1_1_0 + 1.42092427248679*G1_1_1 + 1.42092427248681*G3_0_0 + 1.46398258377428*G3_0_1 + 1.46398258377429*G3_1_0 + 1.42092427248679*G3_1_1;
    A[1913] = 1.03339947089948*G1_0_0 + 1.37786596119933*G1_0_1 + 1.37786596119934*G1_1_0 + 2.75573192239869*G1_1_1 + 1.03339947089948*G3_0_0 + 1.37786596119933*G3_0_1 + 1.37786596119934*G3_1_0 + 2.75573192239869*G3_1_1;
    A[1914] = 9.9206349206353*G5_0 + 9.92063492063526*G5_1;
    A[1915] = -0.620039682539645*G5_0 + 6.15080902877096e-14*G5_1;
    A[1916] = -0.620039682539688*G5_1;
    A[1917] = -4.65029761904763*G5_0 - 0.93005952380943*G5_1;
    A[1918] = -0.930059523809475*G5_0 - 4.65029761904777*G5_1;
    A[1919] = 13.9508928571435*G5_0 - 10.2306547619051*G5_1;
    A[1920] = 0.930059523809488*G5_0 + 0.930059523809527*G5_1;
    A[1921] = -10.2306547619051*G5_0 + 13.9508928571434*G5_1;
    A[1922] = 0.93005952380959*G5_0 + 0.930059523809633*G5_1;
    A[1923] = -9.30059523809544*G5_0 - 9.30059523809561*G5_1;
    A[1924] = 0.0;
    A[1925] = 0.0;
    A[1926] = 0.0;
    A[1927] = 0.0;
    A[1928] = 0.0;
    A[1929] = 0.0;
    A[1930] = 0.0;
    A[1931] = 0.0;
    A[1932] = 0.0;
    A[1933] = 0.0;
    A[1934] = 0.0;
    A[1935] = 0.0;
    A[1936] = 0.0;
    A[1937] = 0.0;
    A[1938] = 0.0;
    A[1939] = 0.0;
    A[1940] = 0.0;
    A[1941] = 0.0;
    A[1942] = 0.0;
    A[1943] = 0.0;
    A[1944] = 0.0;
    A[1945] = -0.0538228891093441*G1_0_0 - 0.0538228891093443*G1_0_1 - 0.0538228891093457*G1_1_0 - 0.053822889109345*G1_1_1 - 0.0538228891093441*G3_0_0 - 0.0538228891093443*G3_0_1 - 0.0538228891093457*G3_1_0 - 0.053822889109345*G3_1_1;
    A[1946] = -0.0538228891093546*G1_0_0 - 1.11013696607772e-14*G1_1_0 - 0.0538228891093546*G3_0_0 - 1.11013696607772e-14*G3_1_0;
    A[1947] = 0.1076457782187*G1_1_1 + 0.1076457782187*G3_1_1;
    A[1948] = 1.35633680555558*G1_0_0 + 0.572675540123458*G1_0_1 + 0.57267554012345*G1_1_0 - 3.35925677465848e-14*G1_1_1 + 1.35633680555558*G3_0_0 + 0.572675540123458*G3_0_1 + 0.57267554012345*G3_1_0 - 3.35925677465848e-14*G3_1_1;
    A[1949] = 0.387524801587309*G1_0_0 + 0.859013310185201*G1_0_1 + 0.85901331018521*G1_1_0 + 1.01187031525576*G1_1_1 + 0.387524801587309*G3_0_0 + 0.859013310185201*G3_0_1 + 0.85901331018521*G3_1_0 + 1.01187031525576*G3_1_1;
    A[1950] = 0.0430583112874681*G1_0_0 + 0.374607308201064*G1_0_1 + 0.374607308201065*G1_1_0 + 1.03339947089949*G1_1_1 + 0.0430583112874681*G3_0_0 + 0.374607308201064*G3_0_1 + 0.374607308201065*G3_1_0 + 1.03339947089949*G3_1_1;
    A[1951] = -0.0731991291887152*G1_0_1 - 0.0731991291887099*G1_1_0 - 0.419818535052922*G1_1_1 - 0.0731991291887152*G3_0_1 - 0.0731991291887099*G3_1_0 - 0.419818535052922*G3_1_1;
    A[1952] = 1.35633680555561*G1_0_0 + 0.783661265432123*G1_0_1 + 0.783661265432122*G1_1_0 + 0.210985725308642*G1_1_1 + 1.35633680555561*G3_0_0 + 0.783661265432123*G3_0_1 + 0.783661265432122*G3_1_0 + 0.210985725308642*G3_1_1;
    A[1953] = 0.387524801587317*G1_0_0 - 0.471488508597902*G1_0_1 - 0.471488508597896*G1_1_0 - 0.318631503527342*G1_1_1 + 0.387524801587317*G3_0_0 - 0.471488508597902*G3_0_1 - 0.471488508597896*G3_1_0 - 0.318631503527342*G3_1_1;
    A[1954] = 0.0430583112874756*G1_0_0 - 0.331548996913591*G1_0_1 - 0.331548996913594*G1_1_0 + 0.327243165784843*G1_1_1 + 0.0430583112874756*G3_0_0 - 0.331548996913591*G3_0_1 - 0.331548996913594*G3_1_0 + 0.327243165784843*G3_1_1;
    A[1955] = 0.0731991291887146*G1_0_1 + 0.0731991291887107*G1_1_0 - 0.273420276675496*G1_1_1 + 0.0731991291887146*G3_0_1 + 0.0731991291887107*G3_1_0 - 0.273420276675496*G3_1_1;
    A[1956] = 0.0495170579805794*G1_0_0 + 0.622192598104065*G1_0_1 + 0.62219259810406*G1_1_0 + 1.19486813822754*G1_1_1 + 0.0495170579805794*G3_0_0 + 0.622192598104065*G3_0_1 + 0.62219259810406*G3_1_0 + 1.19486813822754*G3_1_1;
    A[1957] = 0.00430583112878154*G1_0_0 - 2.40911251653445*G1_0_1 - 2.40911251653445*G1_1_0 - 3.81066054894191*G1_1_1 + 0.00430583112878154*G3_0_0 - 2.40911251653445*G3_0_1 - 2.40911251653445*G3_1_0 - 3.81066054894191*G3_1_1;
    A[1958] = 0.00430583112871381*G1_0_0 + 2.41341834766319*G1_0_1 + 2.41341834766319*G1_1_0 + 1.01187031525573*G1_1_1 + 0.00430583112871381*G3_0_0 + 2.41341834766319*G3_0_1 + 2.41341834766319*G3_1_0 + 1.01187031525573*G3_1_1;
    A[1959] = 0.049517057980621*G1_0_0 - 0.572675540123461*G1_0_1 - 0.572675540123452*G1_1_0 + 3.26680143439978e-14*G1_1_1 + 0.049517057980621*G3_0_0 - 0.572675540123461*G3_0_1 - 0.572675540123452*G3_1_0 + 3.26680143439978e-14*G3_1_1;
    A[1960] = -6.32957175925947*G1_0_0 - 3.05714010141102*G1_0_1 - 3.05714010141102*G1_1_0 - 1.8084490740741*G1_1_1 - 6.32957175925947*G3_0_0 - 3.05714010141102*G3_0_1 - 3.05714010141102*G3_1_0 - 1.8084490740741*G3_1_1;
    A[1961] = 9.94646990740772*G1_0_0 + 4.97323495370383*G1_0_1 + 4.97323495370383*G1_1_0 + 8.65472056878335*G1_1_1 + 9.94646990740772*G3_0_0 + 4.97323495370383*G3_0_1 + 4.97323495370383*G3_1_0 + 8.65472056878335*G3_1_1;
    A[1962] = -6.32957175925944*G1_0_0 - 3.27243165784839*G1_0_1 - 3.27243165784838*G1_1_0 - 2.02374063051149*G1_1_1 - 6.32957175925944*G3_0_0 - 3.27243165784839*G3_0_1 - 3.27243165784838*G3_1_0 - 2.02374063051149*G3_1_1;
    A[1963] = -0.387524801587325*G1_0_0 + 2.55120494378314*G1_0_1 + 2.55120494378315*G1_1_0 - 0.387524801587348*G1_1_1 - 0.387524801587325*G3_0_0 + 2.55120494378314*G3_0_1 + 2.55120494378315*G3_1_0 - 0.387524801587348*G3_1_1;
    A[1964] = -0.387524801587297*G1_0_0 - 2.93872974537045*G1_0_1 - 2.93872974537046*G1_1_0 - 5.87745949074094*G1_1_1 - 0.387524801587297*G3_0_0 - 2.93872974537045*G3_0_1 - 2.93872974537046*G3_1_0 - 5.87745949074094*G3_1_1;
    A[1965] = -0.0861166225749446*G1_0_0 - 0.0430583112874736*G1_0_1 - 0.0430583112874722*G1_1_0 + 1.42092427248683*G1_1_1 - 0.0861166225749446*G3_0_0 - 0.0430583112874736*G3_0_1 - 0.0430583112874722*G3_1_0 + 1.42092427248683*G3_1_1;
    A[1966] = -5.7353670634923*G5_0 - 5.73536706349227*G5_1;
    A[1967] = 5.73536706349219*G5_0 - 1.54416410214075e-13*G5_1;
    A[1968] = 1.51198498166139e-14*G5_0 - 1.2400793650794*G5_1;
    A[1969] = -2.58730536994989e-13*G5_0 + 2.79017857142837*G5_1;
    A[1970] = 2.79017857142867*G5_0 + 6.97544642857171*G5_1;
    A[1971] = -7.04884284621898e-14*G5_0 + 2.79017857142865*G5_1;
    A[1972] = -2.79017857142861*G5_0 + 4.18526785714303*G5_1;
    A[1973] = 23.7165178571437*G5_0 + 20.9263392857151*G5_1;
    A[1974] = -23.7165178571437*G5_0 - 2.79017857142867*G5_1;
    A[1975] = 8.05305800342937e-14*G5_0 - 27.9017857142867*G5_1;
    A[1976] = 0.0;
    A[1977] = 0.0;
    A[1978] = 0.0;
    A[1979] = 0.0;
    A[1980] = 0.0;
    A[1981] = 0.0;
    A[1982] = 0.0;
    A[1983] = 0.0;
    A[1984] = 0.0;
    A[1985] = 0.0;
    A[1986] = 0.0;
    A[1987] = 0.0;
    A[1988] = 0.0;
    A[1989] = 0.0;
    A[1990] = 0.0;
    A[1991] = 0.0;
    A[1992] = 0.0;
    A[1993] = 0.0;
    A[1994] = 0.0;
    A[1995] = 0.0;
    A[1996] = 0.0;
    A[1997] = 0.107645778218695*G1_0_0 + 0.107645778218697*G1_0_1 + 0.107645778218695*G1_1_0 + 0.107645778218695*G1_1_1 + 0.107645778218695*G3_0_0 + 0.107645778218697*G3_0_1 + 0.107645778218695*G3_1_0 + 0.107645778218695*G3_1_1;
    A[1998] = -0.21529155643739*G1_0_0 + 1.31800545819091e-14*G1_1_0 - 0.21529155643739*G3_0_0 + 1.31800545819091e-14*G3_1_0;
    A[1999] = 0.107645778218701*G1_1_1 + 0.107645778218701*G3_1_1;
    A[2000] = -2.82031938932988*G1_0_0 - 1.66205081569668*G1_0_1 - 1.66205081569668*G1_1_0 + 4.43145140808371e-14*G1_1_1 - 2.82031938932988*G3_0_0 - 1.66205081569668*G3_0_1 - 1.66205081569668*G3_1_0 + 4.43145140808371e-14*G3_1_1;
    A[2001] = 0.73199129188715*G1_0_0 - 1.30897266313937*G1_0_1 - 1.30897266313938*G1_1_0 - 3.96136463844813*G1_1_1 + 0.73199129188715*G3_0_0 - 1.30897266313937*G3_0_1 - 1.30897266313938*G3_1_0 - 3.96136463844813*G3_1_1;
    A[2002] = -0.516699735449747*G1_0_0 + 0.413359788359806*G1_0_1 + 0.413359788359819*G1_1_0 + 2.02374063051156*G1_1_1 - 0.516699735449747*G3_0_0 + 0.413359788359806*G3_0_1 + 0.413359788359819*G3_1_0 + 2.02374063051156*G3_1_1;
    A[2003] = -0.262655698853625*G1_0_1 - 0.262655698853625*G1_1_0 - 0.990341159612035*G1_1_1 - 0.262655698853625*G3_0_1 - 0.262655698853625*G3_1_0 - 0.990341159612035*G3_1_1;
    A[2004] = -0.667403824955926*G1_0_0 - 0.404748126102308*G1_0_1 - 0.404748126102312*G1_1_0 - 0.142092427248682*G1_1_1 - 0.667403824955926*G3_0_0 - 0.404748126102308*G3_0_1 - 0.404748126102312*G3_1_0 - 0.142092427248682*G3_1_1;
    A[2005] = -0.344466490299839*G1_0_0 + 0.103339947089949*G1_0_1 + 0.103339947089952*G1_1_0 + 0.0344466490299855*G1_1_1 - 0.344466490299839*G3_0_0 + 0.103339947089949*G3_0_1 + 0.103339947089952*G3_1_0 + 0.0344466490299855*G3_1_1;
    A[2006] = -0.516699735449749*G1_0_0 - 0.068893298059965*G1_0_1 - 0.0688932980599625*G1_1_0 + 0.0344466490299823*G1_1_1 - 0.516699735449749*G3_0_0 - 0.068893298059965*G3_0_1 - 0.0688932980599625*G3_1_0 + 0.0344466490299823*G3_1_1;
    A[2007] = 0.262655698853623*G1_0_1 + 0.262655698853625*G1_1_0 - 0.142092427248683*G1_1_1 + 0.262655698853623*G3_0_1 + 0.262655698853625*G3_1_0 - 0.142092427248683*G3_1_1;
    A[2008] = -0.46502976190476*G1_0_0 - 0.727685460758384*G1_0_1 - 0.727685460758387*G1_1_0 - 0.990341159612022*G1_1_1 - 0.46502976190476*G3_0_0 - 0.727685460758384*G3_0_1 - 0.727685460758387*G3_1_0 - 0.990341159612022*G3_1_1;
    A[2009] = 0.680321318342144*G1_0_0 + 1.6103808421517*G1_0_1 + 1.6103808421517*G1_1_0 + 2.0237406305115*G1_1_1 + 0.680321318342144*G3_0_0 + 1.6103808421517*G3_0_1 + 1.6103808421517*G3_1_0 + 2.0237406305115*G3_1_1;
    A[2010] = -0.611428020282173*G1_0_0 - 2.65239197530871*G1_0_1 - 2.65239197530871*G1_1_0 - 3.96136463844809*G1_1_1 - 0.611428020282173*G3_0_0 - 2.65239197530871*G3_0_1 - 2.65239197530871*G3_1_0 - 3.96136463844809*G3_1_1;
    A[2011] = 0.503782242063486*G1_0_0 + 1.66205081569669*G1_0_1 + 1.66205081569669*G1_1_0 - 3.92366261009469e-14*G1_1_1 + 0.503782242063486*G3_0_0 + 1.66205081569669*G3_0_1 + 1.66205081569669*G3_1_0 - 3.92366261009469e-14*G3_1_1;
    A[2012] = 2.75573192239866*G1_0_0 + 1.37786596119932*G1_0_1 + 1.37786596119932*G1_1_0 + 1.0333994708995*G1_1_1 + 2.75573192239866*G3_0_0 + 1.37786596119932*G3_0_1 + 1.37786596119932*G3_1_0 + 1.0333994708995*G3_1_1;
    A[2013] = -6.32957175925943*G1_0_0 - 3.27243165784838*G1_0_1 - 3.27243165784839*G1_1_0 - 2.02374063051149*G1_1_1 - 6.32957175925943*G3_0_0 - 3.27243165784838*G3_0_1 - 3.27243165784839*G3_1_0 - 2.02374063051149*G3_1_1;
    A[2014] = 7.06156305114658*G1_0_0 + 3.96136463844806*G1_0_1 + 3.96136463844806*G1_1_0 + 7.9227292768962*G1_1_1 + 7.06156305114658*G3_0_0 + 3.96136463844806*G3_0_1 + 3.96136463844806*G3_1_0 + 7.9227292768962*G3_1_1;
    A[2015] = 1.42092427248683*G1_0_0 - 0.0430583112874701*G1_0_1 - 0.043058311287479*G1_1_0 - 0.0861166225749552*G1_1_1 + 1.42092427248683*G3_0_0 - 0.0430583112874701*G3_0_1 - 0.043058311287479*G3_1_0 - 0.0861166225749552*G3_1_1;
    A[2016] = -1.80844907407414*G1_0_0 + 1.24869102733689*G1_0_1 + 1.2486910273369*G1_1_0 - 2.02374063051155*G1_1_1 - 1.80844907407414*G3_0_0 + 1.24869102733689*G3_0_1 + 1.2486910273369*G3_1_0 - 2.02374063051155*G3_1_1;
    A[2017] = 1.0333994708995*G1_0_0 - 0.344466490299838*G1_0_1 - 0.344466490299856*G1_1_0 + 1.0333994708995*G1_1_1 + 1.0333994708995*G3_0_0 - 0.344466490299838*G3_0_1 - 0.344466490299856*G3_1_0 + 1.0333994708995*G3_1_1;
    A[2018] = 0.620039682539714*G5_0 + 0.620039682539756*G5_1;
    A[2019] = -9.9206349206352*G5_0 + 1.73967611150072e-13*G5_1;
    A[2020] = -0.620039682539668*G5_1;
    A[2021] = -13.9508928571432*G5_0 - 24.1815476190481*G5_1;
    A[2022] = -0.930059523809583*G5_0 - 3.13499226578529e-14*G5_1;
    A[2023] = 4.65029761904776*G5_0 + 3.72023809523825*G5_1;
    A[2024] = 0.930059523809559*G5_0 - 3.72023809523826*G5_1;
    A[2025] = -0.93005952380965*G5_0 + 2.98020072161953e-14*G5_1;
    A[2026] = 10.2306547619052*G5_0 + 24.1815476190487*G5_1;
    A[2027] = 9.30059523809546*G5_0 + 3.13436668113176e-13*G5_1;
    A[2028] = 0.0;
    A[2029] = 0.0;
    A[2030] = 0.0;
    A[2031] = 0.0;
    A[2032] = 0.0;
    A[2033] = 0.0;
    A[2034] = 0.0;
    A[2035] = 0.0;
    A[2036] = 0.0;
    A[2037] = 0.0;
    A[2038] = 0.0;
    A[2039] = 0.0;
    A[2040] = 0.0;
    A[2041] = 0.0;
    A[2042] = 0.0;
    A[2043] = 0.0;
    A[2044] = 0.0;
    A[2045] = 0.0;
    A[2046] = 0.0;
    A[2047] = 0.0;
    A[2048] = 0.0;
    A[2049] = -0.0538228891093465*G1_0_0 - 0.0538228891093469*G1_0_1 - 0.0538228891093494*G1_1_0 - 0.0538228891093501*G1_1_1 - 0.0538228891093465*G3_0_0 - 0.0538228891093469*G3_0_1 - 0.0538228891093494*G3_1_0 - 0.0538228891093501*G3_1_1;
    A[2050] = 0.107645778218698*G1_0_0 + 0.107645778218698*G3_0_0;
    A[2051] = -0.05382288910935*G1_1_1 - 0.05382288910935*G3_1_1;
    A[2052] = -0.419818535052932*G1_0_0 - 0.0731991291887225*G1_0_1 - 0.0731991291887193*G1_1_0 - 0.419818535052932*G3_0_0 - 0.0731991291887225*G3_0_1 - 0.0731991291887193*G3_1_0;
    A[2053] = 1.03339947089951*G1_0_0 + 0.374607308201078*G1_0_1 + 0.374607308201069*G1_1_0 + 0.0430583112874851*G1_1_1 + 1.03339947089951*G3_0_0 + 0.374607308201078*G3_0_1 + 0.374607308201069*G3_1_0 + 0.0430583112874851*G3_1_1;
    A[2054] = 1.01187031525575*G1_0_0 + 0.859013310185189*G1_0_1 + 0.859013310185202*G1_1_0 + 0.387524801587297*G1_1_1 + 1.01187031525575*G3_0_0 + 0.859013310185189*G3_0_1 + 0.859013310185202*G3_1_0 + 0.387524801587297*G3_1_1;
    A[2055] = 1.092181900475e-14*G1_0_0 + 0.572675540123482*G1_0_1 + 0.572675540123477*G1_1_0 + 1.35633680555561*G1_1_1 + 1.092181900475e-14*G3_0_0 + 0.572675540123482*G3_0_1 + 0.572675540123477*G3_1_0 + 1.35633680555561*G3_1_1;
    A[2056] = 1.19486813822755*G1_0_0 + 0.622192598104068*G1_0_1 + 0.622192598104066*G1_1_0 + 0.0495170579805985*G1_1_1 + 1.19486813822755*G3_0_0 + 0.622192598104068*G3_0_1 + 0.622192598104066*G3_1_0 + 0.0495170579805985*G3_1_1;
    A[2057] = -3.81066054894193*G1_0_0 - 2.40911251653446*G1_0_1 - 2.40911251653447*G1_1_0 + 0.00430583112875212*G1_1_1 - 3.81066054894193*G3_0_0 - 2.40911251653446*G3_0_1 - 2.40911251653447*G3_1_0 + 0.00430583112875212*G3_1_1;
    A[2058] = 1.01187031525576*G1_0_0 + 2.41341834766321*G1_0_1 + 2.41341834766321*G1_1_0 + 0.00430583112874364*G1_1_1 + 1.01187031525576*G3_0_0 + 2.41341834766321*G3_0_1 + 2.41341834766321*G3_1_0 + 0.00430583112874364*G3_1_1;
    A[2059] = -1.06165076729781e-14*G1_0_0 - 0.572675540123476*G1_0_1 - 0.572675540123477*G1_1_0 + 0.0495170579806044*G1_1_1 - 1.06165076729781e-14*G3_0_0 - 0.572675540123476*G3_0_1 - 0.572675540123477*G3_1_0 + 0.0495170579806044*G3_1_1;
    A[2060] = 0.210985725308643*G1_0_0 + 0.783661265432122*G1_0_1 + 0.783661265432127*G1_1_0 + 1.3563368055556*G1_1_1 + 0.210985725308643*G3_0_0 + 0.783661265432122*G3_0_1 + 0.783661265432127*G3_1_0 + 1.3563368055556*G3_1_1;
    A[2061] = -0.318631503527344*G1_0_0 - 0.471488508597898*G1_0_1 - 0.471488508597901*G1_1_0 + 0.38752480158733*G1_1_1 - 0.318631503527344*G3_0_0 - 0.471488508597898*G3_0_1 - 0.471488508597901*G3_1_0 + 0.38752480158733*G3_1_1;
    A[2062] = 0.327243165784843*G1_0_0 - 0.331548996913589*G1_0_1 - 0.331548996913593*G1_1_0 + 0.0430583112874768*G1_1_1 + 0.327243165784843*G3_0_0 - 0.331548996913589*G3_0_1 - 0.331548996913593*G3_1_0 + 0.0430583112874768*G3_1_1;
    A[2063] = -0.273420276675496*G1_0_0 + 0.0731991291887186*G1_0_1 + 0.0731991291887152*G1_1_0 - 0.273420276675496*G3_0_0 + 0.0731991291887186*G3_0_1 + 0.0731991291887152*G3_1_0;
    A[2064] = -1.80844907407412*G1_0_0 - 3.05714010141102*G1_0_1 - 3.05714010141102*G1_1_0 - 6.32957175925948*G1_1_1 - 1.80844907407412*G3_0_0 - 3.05714010141102*G3_0_1 - 3.05714010141102*G3_1_0 - 6.32957175925948*G3_1_1;
    A[2065] = -0.387524801587325*G1_0_0 + 2.55120494378315*G1_0_1 + 2.55120494378314*G1_1_0 - 0.387524801587348*G1_1_1 - 0.387524801587325*G3_0_0 + 2.55120494378315*G3_0_1 + 2.55120494378314*G3_1_0 - 0.387524801587348*G3_1_1;
    A[2066] = 1.42092427248683*G1_0_0 - 0.043058311287479*G1_0_1 - 0.0430583112874702*G1_1_0 - 0.0861166225749552*G1_1_1 + 1.42092427248683*G3_0_0 - 0.043058311287479*G3_0_1 - 0.0430583112874702*G3_1_0 - 0.0861166225749552*G3_1_1;
    A[2067] = 8.65472056878336*G1_0_0 + 4.97323495370386*G1_0_1 + 4.97323495370386*G1_1_0 + 9.94646990740775*G1_1_1 + 8.65472056878336*G3_0_0 + 4.97323495370386*G3_0_1 + 4.97323495370386*G3_1_0 + 9.94646990740775*G3_1_1;
    A[2068] = -5.87745949074094*G1_0_0 - 2.93872974537045*G1_0_1 - 2.93872974537046*G1_1_0 - 0.387524801587285*G1_1_1 - 5.87745949074094*G3_0_0 - 2.93872974537045*G3_0_1 - 2.93872974537046*G3_1_0 - 0.387524801587285*G3_1_1;
    A[2069] = -2.0237406305115*G1_0_0 - 3.27243165784843*G1_0_1 - 3.27243165784841*G1_1_0 - 6.32957175925947*G1_1_1 - 2.0237406305115*G3_0_0 - 3.27243165784843*G3_0_1 - 3.27243165784841*G3_1_0 - 6.32957175925947*G3_1_1;
    A[2070] = -5.73536706349228*G5_0 - 5.73536706349225*G5_1;
    A[2071] = -1.24007936507941*G5_0;
    A[2072] = 3.60267371490863e-14*G5_0 + 5.73536706349225*G5_1;
    A[2073] = 6.97544642857157*G5_0 + 2.79017857142861*G5_1;
    A[2074] = 2.79017857142855*G5_0 - 1.07192033027559e-13*G5_1;
    A[2075] = 20.926339285715*G5_0 + 23.7165178571437*G5_1;
    A[2076] = -2.79017857142853*G5_0 - 23.7165178571436*G5_1;
    A[2077] = 2.79017857142867*G5_0 - 3.7684428060708e-14*G5_1;
    A[2078] = 4.18526785714293*G5_0 - 2.79017857142874*G5_1;
    A[2079] = -27.9017857142867*G5_0 + 2.48747637071611e-13*G5_1;
    A[2080] = 0.0;
    A[2081] = 0.0;
    A[2082] = 0.0;
    A[2083] = 0.0;
    A[2084] = 0.0;
    A[2085] = 0.0;
    A[2086] = 0.0;
    A[2087] = 0.0;
    A[2088] = 0.0;
    A[2089] = 0.0;
    A[2090] = 0.0;
    A[2091] = 0.0;
    A[2092] = 0.0;
    A[2093] = 0.0;
    A[2094] = 0.0;
    A[2095] = 0.0;
    A[2096] = 0.0;
    A[2097] = 0.0;
    A[2098] = 0.0;
    A[2099] = 0.0;
    A[2100] = 0.0;
    A[2101] = 0.107645778218698*G1_0_0 + 0.107645778218697*G1_0_1 + 0.107645778218701*G1_1_0 + 0.107645778218701*G1_1_1 + 0.107645778218698*G3_0_0 + 0.107645778218697*G3_0_1 + 0.107645778218701*G3_1_0 + 0.107645778218701*G3_1_1;
    A[2102] = -0.0538228891093489*G1_0_0 - 0.0538228891093489*G3_0_0;
    A[2103] = -0.0538228891093543*G1_1_1 - 0.0538228891093543*G3_1_1;
    A[2104] = 1.19486813822756*G1_0_0 + 0.572675540123479*G1_0_1 + 0.572675540123477*G1_1_0 + 1.19486813822756*G3_0_0 + 0.572675540123479*G3_0_1 + 0.572675540123477*G3_1_0;
    A[2105] = -3.81066054894193*G1_0_0 - 1.40154803240746*G1_0_1 - 1.40154803240746*G1_1_0 + 1.01187031525577*G1_1_1 - 3.81066054894193*G3_0_0 - 1.40154803240746*G3_0_1 - 1.40154803240746*G3_1_0 + 1.01187031525577*G3_1_1;
    A[2106] = 1.01187031525578*G1_0_0 - 1.40154803240744*G1_0_1 - 1.40154803240745*G1_1_0 - 3.81066054894192*G1_1_1 + 1.01187031525578*G3_0_0 - 1.40154803240744*G3_0_1 - 1.40154803240745*G3_1_0 - 3.81066054894192*G3_1_1;
    A[2107] = -1.18308141061618e-14*G1_0_0 + 0.57267554012347*G1_0_1 + 0.57267554012346*G1_1_0 + 1.19486813822754*G1_1_1 - 1.18308141061618e-14*G3_0_0 + 0.57267554012347*G3_0_1 + 0.57267554012346*G3_1_0 + 1.19486813822754*G3_1_1;
    A[2108] = -0.419818535052927*G1_0_0 - 0.346619405864206*G1_0_1 - 0.346619405864193*G1_1_0 - 0.273420276675492*G1_1_1 - 0.419818535052927*G3_0_0 - 0.346619405864206*G3_0_1 - 0.346619405864193*G3_1_0 - 0.273420276675492*G3_1_1;
    A[2109] = 1.03339947089951*G1_0_0 + 0.658792162698434*G1_0_1 + 0.65879216269843*G1_1_0 + 0.327243165784839*G1_1_1 + 1.03339947089951*G3_0_0 + 0.658792162698434*G3_0_1 + 0.65879216269843*G3_1_0 + 0.327243165784839*G3_1_1;
    A[2110] = 1.01187031525576*G1_0_0 + 0.152857005070549*G1_0_1 + 0.152857005070557*G1_1_0 - 0.318631503527348*G1_1_1 + 1.01187031525576*G3_0_0 + 0.152857005070549*G3_0_1 + 0.152857005070557*G3_1_0 - 0.318631503527348*G3_1_1;
    A[2111] = 1.031813523511e-14*G1_0_0 - 0.572675540123472*G1_0_1 - 0.572675540123461*G1_1_0 + 0.210985725308654*G1_1_1 + 1.031813523511e-14*G3_0_0 - 0.572675540123472*G3_0_1 - 0.572675540123461*G3_1_0 + 0.210985725308654*G3_1_1;
    A[2112] = -0.273420276675492*G1_0_0 - 0.346619405864208*G1_0_1 - 0.346619405864206*G1_1_0 - 0.419818535052906*G1_1_1 - 0.273420276675492*G3_0_0 - 0.346619405864208*G3_0_1 - 0.346619405864206*G3_1_0 - 0.419818535052906*G3_1_1;
    A[2113] = 0.32724316578484*G1_0_0 + 0.658792162698431*G1_0_1 + 0.658792162698431*G1_1_0 + 1.03339947089951*G1_1_1 + 0.32724316578484*G3_0_0 + 0.658792162698431*G3_0_1 + 0.658792162698431*G3_1_0 + 1.03339947089951*G3_1_1;
    A[2114] = -0.31863150352735*G1_0_0 + 0.152857005070546*G1_0_1 + 0.152857005070556*G1_1_0 + 1.01187031525578*G1_1_1 - 0.31863150352735*G3_0_0 + 0.152857005070546*G3_0_1 + 0.152857005070556*G3_1_0 + 1.01187031525578*G3_1_1;
    A[2115] = 0.210985725308654*G1_0_0 - 0.572675540123477*G1_0_1 - 0.572675540123481*G1_1_0 + 0.210985725308654*G3_0_0 - 0.572675540123477*G3_0_1 - 0.572675540123481*G3_1_0;
    A[2116] = 1.42092427248681*G1_0_0 + 1.46398258377429*G1_0_1 + 1.46398258377428*G1_1_0 + 1.42092427248679*G1_1_1 + 1.42092427248681*G3_0_0 + 1.46398258377429*G3_0_1 + 1.46398258377428*G3_1_0 + 1.42092427248679*G3_1_1;
    A[2117] = -0.387524801587297*G1_0_0 - 2.93872974537046*G1_0_1 - 2.93872974537045*G1_1_0 - 5.87745949074094*G1_1_1 - 0.387524801587297*G3_0_0 - 2.93872974537046*G3_0_1 - 2.93872974537045*G3_1_0 - 5.87745949074094*G3_1_1;
    A[2118] = -1.80844907407414*G1_0_0 + 1.2486910273369*G1_0_1 + 1.24869102733689*G1_1_0 - 2.02374063051155*G1_1_1 - 1.80844907407414*G3_0_0 + 1.2486910273369*G3_0_1 + 1.24869102733689*G3_1_0 - 2.02374063051155*G3_1_1;
    A[2119] = -5.87745949074094*G1_0_0 - 2.93872974537046*G1_0_1 - 2.93872974537045*G1_1_0 - 0.387524801587284*G1_1_1 - 5.87745949074094*G3_0_0 - 2.93872974537046*G3_0_1 - 2.93872974537045*G3_1_0 - 0.387524801587284*G3_1_1;
    A[2120] = 8.65472056878336*G1_0_0 + 3.68148561507948*G1_0_1 + 3.68148561507948*G1_1_0 + 8.65472056878336*G1_1_1 + 8.65472056878336*G3_0_0 + 3.68148561507948*G3_0_1 + 3.68148561507948*G3_1_0 + 8.65472056878336*G3_1_1;
    A[2121] = -2.02374063051155*G1_0_0 + 1.2486910273369*G1_0_1 + 1.24869102733689*G1_1_0 - 1.80844907407414*G1_1_1 - 2.02374063051155*G3_0_0 + 1.2486910273369*G3_0_1 + 1.24869102733689*G3_1_0 - 1.80844907407414*G3_1_1;
    A[2122] = 1.24007936507942*G5_0 + 1.24007936507933*G5_1;
    A[2123] = 5.73536706349226*G5_0 - 2.28254914969028e-14*G5_1;
    A[2124] = -3.88855614374961e-14*G5_0 + 5.73536706349216*G5_1;
    A[2125] = -20.9263392857149*G5_0 + 2.79017857142865*G5_1;
    A[2126] = 2.79017857142868*G5_0 - 20.9263392857151*G5_1;
    A[2127] = -6.97544642857167*G5_0 - 4.18526785714311*G5_1;
    A[2128] = -2.79017857142876*G5_0 - 2.79017857142878*G5_1;
    A[2129] = -4.18526785714296*G5_0 - 6.97544642857184*G5_1;
    A[2130] = -2.7901785714286*G5_0 - 2.7901785714288*G5_1;
    A[2131] = 27.9017857142868*G5_0 + 27.9017857142862*G5_1;
    A[2132] = 0.0;
    A[2133] = 0.0;
    A[2134] = 0.0;
    A[2135] = 0.0;
    A[2136] = 0.0;
    A[2137] = 0.0;
    A[2138] = 0.0;
    A[2139] = 0.0;
    A[2140] = 0.0;
    A[2141] = 0.0;
    A[2142] = 0.0;
    A[2143] = 0.0;
    A[2144] = 0.0;
    A[2145] = 0.0;
    A[2146] = 0.0;
    A[2147] = 0.0;
    A[2148] = 0.0;
    A[2149] = 0.0;
    A[2150] = 0.0;
    A[2151] = 0.0;
    A[2152] = 0.0;
    A[2153] = 0.107645778218695*G1_0_0 + 0.107645778218695*G1_0_1 + 0.107645778218697*G1_1_0 + 0.107645778218697*G1_1_1 + 0.107645778218695*G3_0_0 + 0.107645778218695*G3_0_1 + 0.107645778218697*G3_1_0 + 0.107645778218697*G3_1_1;
    A[2154] = 0.107645778218697*G1_0_0 + 0.107645778218697*G3_0_0;
    A[2155] = -0.215291556437395*G1_1_1 - 0.215291556437395*G3_1_1;
    A[2156] = -0.990341159612021*G1_0_0 - 0.262655698853624*G1_0_1 - 0.262655698853624*G1_1_0 - 0.990341159612021*G3_0_0 - 0.262655698853624*G3_0_1 - 0.262655698853624*G3_1_0;
    A[2157] = 2.02374063051153*G1_0_0 + 0.413359788359809*G1_0_1 + 0.413359788359804*G1_1_0 - 0.516699735449756*G1_1_1 + 2.02374063051153*G3_0_0 + 0.413359788359809*G3_0_1 + 0.413359788359804*G3_1_0 - 0.516699735449756*G3_1_1;
    A[2158] = -3.96136463844809*G1_0_0 - 1.30897266313936*G1_0_1 - 1.30897266313936*G1_1_0 + 0.731991291887165*G1_1_1 - 3.96136463844809*G3_0_0 - 1.30897266313936*G3_0_1 - 1.30897266313936*G3_1_0 + 0.731991291887165*G3_1_1;
    A[2159] = -1.66205081569671*G1_0_1 - 1.66205081569671*G1_1_0 - 2.8203193893299*G1_1_1 - 1.66205081569671*G3_0_1 - 1.66205081569671*G3_1_0 - 2.8203193893299*G3_1_1;
    A[2160] = -0.990341159612013*G1_0_0 - 0.727685460758387*G1_0_1 - 0.727685460758397*G1_1_0 - 0.465029761904772*G1_1_1 - 0.990341159612013*G3_0_0 - 0.727685460758387*G3_0_1 - 0.727685460758397*G3_1_0 - 0.465029761904772*G3_1_1;
    A[2161] = 2.02374063051152*G1_0_0 + 1.61038084215171*G1_0_1 + 1.61038084215172*G1_1_0 + 0.680321318342169*G1_1_1 + 2.02374063051152*G3_0_0 + 1.61038084215171*G3_0_1 + 1.61038084215172*G3_1_0 + 0.680321318342169*G3_1_1;
    A[2162] = -3.96136463844808*G1_0_0 - 2.65239197530872*G1_0_1 - 2.65239197530873*G1_1_0 - 0.611428020282207*G1_1_1 - 3.96136463844808*G3_0_0 - 2.65239197530872*G3_0_1 - 2.65239197530873*G3_1_0 - 0.611428020282207*G3_1_1;
    A[2163] = 1.6620508156967*G1_0_1 + 1.66205081569671*G1_1_0 + 0.503782242063509*G1_1_1 + 1.6620508156967*G3_0_1 + 1.66205081569671*G3_1_0 + 0.503782242063509*G3_1_1;
    A[2164] = -0.142092427248675*G1_0_0 - 0.404748126102306*G1_0_1 - 0.404748126102305*G1_1_0 - 0.667403824955933*G1_1_1 - 0.142092427248675*G3_0_0 - 0.404748126102306*G3_0_1 - 0.404748126102305*G3_1_0 - 0.667403824955933*G3_1_1;
    A[2165] = 0.0344466490299813*G1_0_0 + 0.103339947089946*G1_0_1 + 0.10333994708995*G1_1_0 - 0.344466490299843*G1_1_1 + 0.0344466490299813*G3_0_0 + 0.103339947089946*G3_0_1 + 0.10333994708995*G3_1_0 - 0.344466490299843*G3_1_1;
    A[2166] = 0.0344466490299831*G1_0_0 - 0.0688932980599634*G1_0_1 - 0.0688932980599677*G1_1_0 - 0.516699735449754*G1_1_1 + 0.0344466490299831*G3_0_0 - 0.0688932980599634*G3_0_1 - 0.0688932980599677*G3_1_0 - 0.516699735449754*G3_1_1;
    A[2167] = -0.142092427248682*G1_0_0 + 0.262655698853628*G1_0_1 + 0.262655698853626*G1_1_0 - 0.142092427248682*G3_0_0 + 0.262655698853628*G3_0_1 + 0.262655698853626*G3_1_0;
    A[2168] = 1.03339947089948*G1_0_0 + 1.37786596119934*G1_0_1 + 1.37786596119933*G1_1_0 + 2.75573192239869*G1_1_1 + 1.03339947089948*G3_0_0 + 1.37786596119934*G3_0_1 + 1.37786596119933*G3_1_0 + 2.75573192239869*G3_1_1;
    A[2169] = -0.0861166225749447*G1_0_0 - 0.0430583112874721*G1_0_1 - 0.0430583112874735*G1_1_0 + 1.42092427248683*G1_1_1 - 0.0861166225749447*G3_0_0 - 0.0430583112874721*G3_0_1 - 0.0430583112874735*G3_1_0 + 1.42092427248683*G3_1_1;
    A[2170] = 1.0333994708995*G1_0_0 - 0.344466490299856*G1_0_1 - 0.344466490299838*G1_1_0 + 1.0333994708995*G1_1_1 + 1.0333994708995*G3_0_0 - 0.344466490299856*G3_0_1 - 0.344466490299838*G3_1_0 + 1.0333994708995*G3_1_1;
    A[2171] = -2.0237406305115*G1_0_0 - 3.27243165784841*G1_0_1 - 3.27243165784843*G1_1_0 - 6.32957175925947*G1_1_1 - 2.0237406305115*G3_0_0 - 3.27243165784841*G3_0_1 - 3.27243165784843*G3_1_0 - 6.32957175925947*G3_1_1;
    A[2172] = -2.02374063051155*G1_0_0 + 1.24869102733689*G1_0_1 + 1.2486910273369*G1_1_0 - 1.80844907407414*G1_1_1 - 2.02374063051155*G3_0_0 + 1.24869102733689*G3_0_1 + 1.2486910273369*G3_1_0 - 1.80844907407414*G3_1_1;
    A[2173] = 7.92272927689616*G1_0_0 + 3.96136463844809*G1_0_1 + 3.96136463844809*G1_1_0 + 7.06156305114661*G1_1_1 + 7.92272927689616*G3_0_0 + 3.96136463844809*G3_0_1 + 3.96136463844809*G3_1_0 + 7.06156305114661*G3_1_1;
    A[2174] = 0.620039682539737*G5_0 + 0.620039682539731*G5_1;
    A[2175] = -0.620039682539726*G5_0;
    A[2176] = -9.92063492063523*G5_1;
    A[2177] = 7.38853422888042e-14*G5_0 - 0.930059523809547*G5_1;
    A[2178] = -24.1815476190484*G5_0 - 13.9508928571432*G5_1;
    A[2179] = -6.14248235608628e-14*G5_0 - 0.930059523809603*G5_1;
    A[2180] = 24.1815476190483*G5_0 + 10.2306547619051*G5_1;
    A[2181] = 3.72023809523824*G5_0 + 4.65029761904782*G5_1;
    A[2182] = -3.72023809523822*G5_0 + 0.93005952380958*G5_1;
    A[2183] = 5.17736895022658e-14*G5_0 + 9.30059523809559*G5_1;
    A[2184] = -0.0352678571428585*G7_0 - 0.0352678571428585*G7_1;
    A[2185] = 0.00426587301587313*G7_0;
    A[2186] = 0.00426587301587322*G7_1;
    A[2187] = 0.0096106150793655*G7_0 + 0.00961061507936569*G7_1;
    A[2188] = 0.00589037698412718*G7_0 + 0.00589037698412686*G7_1;
    A[2189] = 0.00589037698412701*G7_0 + 0.00589037698412741*G7_1;
    A[2190] = 0.00961061507936544*G7_0 + 0.00961061507936513*G7_1;
    A[2191] = -0.0576636904761925*G7_0 + 0.0514632936507955*G7_1;
    A[2192] = 0.0390625000000014*G7_0 - 0.0266617063492071*G7_1;
    A[2193] = -0.0120907738095244*G7_0 + 0.0151909722222227*G7_1;
    A[2194] = -0.00961061507936544*G7_0 - 0.00899057539682559*G7_1;
    A[2195] = 0.0514632936507956*G7_0 - 0.0576636904761924*G7_1;
    A[2196] = -0.0266617063492074*G7_0 + 0.0390625000000013*G7_1;
    A[2197] = 0.0151909722222228*G7_0 - 0.0120907738095242*G7_1;
    A[2198] = -0.00899057539682572*G7_0 - 0.00961061507936549*G7_1;
    A[2199] = 0.099206349206353*G7_0 + 0.0992063492063526*G7_1;
    A[2200] = -0.0573536706349231*G7_0 - 0.0573536706349228*G7_1;
    A[2201] = 0.00620039682539714*G7_0 + 0.00620039682539756*G7_1;
    A[2202] = -0.0573536706349228*G7_0 - 0.0573536706349225*G7_1;
    A[2203] = 0.0124007936507941*G7_0 + 0.0124007936507933*G7_1;
    A[2204] = 0.00620039682539738*G7_0 + 0.00620039682539731*G7_1;
    A[2205] = -0.0352678571428585*G8_0 - 0.0352678571428585*G8_1;
    A[2206] = 0.00426587301587313*G8_0;
    A[2207] = 0.00426587301587322*G8_1;
    A[2208] = 0.0096106150793655*G8_0 + 0.00961061507936569*G8_1;
    A[2209] = 0.00589037698412718*G8_0 + 0.00589037698412686*G8_1;
    A[2210] = 0.00589037698412701*G8_0 + 0.00589037698412741*G8_1;
    A[2211] = 0.00961061507936544*G8_0 + 0.00961061507936513*G8_1;
    A[2212] = -0.0576636904761925*G8_0 + 0.0514632936507955*G8_1;
    A[2213] = 0.0390625000000014*G8_0 - 0.0266617063492071*G8_1;
    A[2214] = -0.0120907738095244*G8_0 + 0.0151909722222227*G8_1;
    A[2215] = -0.00961061507936544*G8_0 - 0.00899057539682559*G8_1;
    A[2216] = 0.0514632936507956*G8_0 - 0.0576636904761924*G8_1;
    A[2217] = -0.0266617063492074*G8_0 + 0.0390625000000013*G8_1;
    A[2218] = 0.0151909722222228*G8_0 - 0.0120907738095242*G8_1;
    A[2219] = -0.00899057539682572*G8_0 - 0.00961061507936549*G8_1;
    A[2220] = 0.099206349206353*G8_0 + 0.0992063492063526*G8_1;
    A[2221] = -0.0573536706349231*G8_0 - 0.0573536706349228*G8_1;
    A[2222] = 0.00620039682539714*G8_0 + 0.00620039682539756*G8_1;
    A[2223] = -0.0573536706349228*G8_0 - 0.0573536706349225*G8_1;
    A[2224] = 0.0124007936507941*G8_0 + 0.0124007936507933*G8_1;
    A[2225] = 0.00620039682539738*G8_0 + 0.00620039682539731*G8_1;
    A[2226] = -5.6547619047621e-05*G6_;
    A[2227] = -8.18452380952412e-06*G6_;
    A[2228] = -8.1845238095241e-06*G6_;
    A[2229] = -2.00892857142864e-05*G6_;
    A[2230] = -2.00892857142864e-05*G6_;
    A[2231] = -1.33928571428576e-05*G6_;
    A[2232] = 0.0;
    A[2233] = -1.33928571428576e-05*G6_;
    A[2234] = 0.0;
    A[2235] = -2.67857142857153e-05*G6_;
    A[2236] = -0.00426587301587306*G7_0 - 0.00426587301587321*G7_1;
    A[2237] = 0.0352678571428582*G7_0;
    A[2238] = 0.00426587301587321*G7_1;
    A[2239] = 0.0576636904761923*G7_0 + 0.109126984126988*G7_1;
    A[2240] = -0.0390625000000014*G7_0 - 0.0657242063492092*G7_1;
    A[2241] = 0.0120907738095243*G7_0 + 0.0272817460317476*G7_1;
    A[2242] = 0.00961061507936547*G7_0 + 0.000620039682539316*G7_1;
    A[2243] = -0.0096106150793657*G7_0;
    A[2244] = -0.00589037698412715*G7_0;
    A[2245] = -0.00589037698412709*G7_0;
    A[2246] = -0.00961061507936548*G7_0;
    A[2247] = 0.00899057539682545*G7_0 - 0.000620039682540201*G7_1;
    A[2248] = -0.0151909722222222*G7_0 - 0.0272817460317461*G7_1;
    A[2249] = 0.0266617063492062*G7_0 + 0.0657242063492078*G7_1;
    A[2250] = -0.0514632936507947*G7_0 - 0.109126984126988*G7_1;
    A[2251] = -0.00620039682539644*G7_0;
    A[2252] = 0.0573536706349219*G7_0;
    A[2253] = -0.099206349206352*G7_0;
    A[2254] = -0.0124007936507941*G7_0;
    A[2255] = 0.0573536706349226*G7_0;
    A[2256] = -0.00620039682539726*G7_0;
    A[2257] = -0.00426587301587306*G8_0 - 0.00426587301587321*G8_1;
    A[2258] = 0.0352678571428582*G8_0;
    A[2259] = 0.00426587301587321*G8_1;
    A[2260] = 0.0576636904761923*G8_0 + 0.109126984126988*G8_1;
    A[2261] = -0.0390625000000014*G8_0 - 0.0657242063492092*G8_1;
    A[2262] = 0.0120907738095243*G8_0 + 0.0272817460317476*G8_1;
    A[2263] = 0.00961061507936547*G8_0 + 0.000620039682539316*G8_1;
    A[2264] = -0.0096106150793657*G8_0;
    A[2265] = -0.00589037698412715*G8_0;
    A[2266] = -0.00589037698412709*G8_0;
    A[2267] = -0.00961061507936548*G8_0;
    A[2268] = 0.00899057539682545*G8_0 - 0.000620039682540201*G8_1;
    A[2269] = -0.0151909722222222*G8_0 - 0.0272817460317461*G8_1;
    A[2270] = 0.0266617063492062*G8_0 + 0.0657242063492078*G8_1;
    A[2271] = -0.0514632936507947*G8_0 - 0.109126984126988*G8_1;
    A[2272] = -0.00620039682539644*G8_0;
    A[2273] = 0.0573536706349219*G8_0;
    A[2274] = -0.099206349206352*G8_0;
    A[2275] = -0.0124007936507941*G8_0;
    A[2276] = 0.0573536706349226*G8_0;
    A[2277] = -0.00620039682539726*G8_0;
    A[2278] = -8.18452380952412e-06*G6_;
    A[2279] = -5.65476190476211e-05*G6_;
    A[2280] = -8.18452380952411e-06*G6_;
    A[2281] = -1.33928571428576e-05*G6_;
    A[2282] = 0.0;
    A[2283] = -2.00892857142864e-05*G6_;
    A[2284] = -2.00892857142864e-05*G6_;
    A[2285] = 0.0;
    A[2286] = -1.33928571428578e-05*G6_;
    A[2287] = -2.67857142857153e-05*G6_;
    A[2288] = -0.00426587301587317*G7_0 - 0.00426587301587322*G7_1;
    A[2289] = 0.00426587301587312*G7_0;
    A[2290] = 0.0352678571428585*G7_1;
    A[2291] = 0.000620039682539769*G7_0 + 0.00961061507936555*G7_1;
    A[2292] = 0.0272817460317471*G7_0 + 0.012090773809524*G7_1;
    A[2293] = -0.0657242063492088*G7_0 - 0.039062500000001*G7_1;
    A[2294] = 0.109126984126988*G7_0 + 0.0576636904761923*G7_1;
    A[2295] = -0.000620039682539741*G7_0 + 0.00899057539682581*G7_1;
    A[2296] = -0.0272817460317471*G7_0 - 0.0151909722222229*G7_1;
    A[2297] = 0.0657242063492089*G7_0 + 0.0266617063492077*G7_1;
    A[2298] = -0.109126984126988*G7_0 - 0.0514632936507956*G7_1;
    A[2299] = -0.0096106150793656*G7_1;
    A[2300] = -0.00589037698412712*G7_1;
    A[2301] = -0.00589037698412728*G7_1;
    A[2302] = -0.00961061507936533*G7_1;
    A[2303] = -0.00620039682539688*G7_1;
    A[2304] = -0.012400793650794*G7_1;
    A[2305] = -0.00620039682539668*G7_1;
    A[2306] = 0.0573536706349225*G7_1;
    A[2307] = 0.0573536706349217*G7_1;
    A[2308] = -0.0992063492063523*G7_1;
    A[2309] = -0.00426587301587317*G8_0 - 0.00426587301587322*G8_1;
    A[2310] = 0.00426587301587312*G8_0;
    A[2311] = 0.0352678571428585*G8_1;
    A[2312] = 0.000620039682539769*G8_0 + 0.00961061507936555*G8_1;
    A[2313] = 0.0272817460317471*G8_0 + 0.012090773809524*G8_1;
    A[2314] = -0.0657242063492088*G8_0 - 0.039062500000001*G8_1;
    A[2315] = 0.109126984126988*G8_0 + 0.0576636904761923*G8_1;
    A[2316] = -0.000620039682539741*G8_0 + 0.00899057539682581*G8_1;
    A[2317] = -0.0272817460317471*G8_0 - 0.0151909722222229*G8_1;
    A[2318] = 0.0657242063492089*G8_0 + 0.0266617063492077*G8_1;
    A[2319] = -0.109126984126988*G8_0 - 0.0514632936507956*G8_1;
    A[2320] = -0.0096106150793656*G8_1;
    A[2321] = -0.00589037698412712*G8_1;
    A[2322] = -0.00589037698412728*G8_1;
    A[2323] = -0.00961061507936533*G8_1;
    A[2324] = -0.00620039682539688*G8_1;
    A[2325] = -0.012400793650794*G8_1;
    A[2326] = -0.00620039682539668*G8_1;
    A[2327] = 0.0573536706349225*G8_1;
    A[2328] = 0.0573536706349217*G8_1;
    A[2329] = -0.0992063492063523*G8_1;
    A[2330] = -8.1845238095241e-06*G6_;
    A[2331] = -8.18452380952411e-06*G6_;
    A[2332] = -5.6547619047621e-05*G6_;
    A[2333] = 0.0;
    A[2334] = -1.33928571428576e-05*G6_;
    A[2335] = 0.0;
    A[2336] = -1.33928571428577e-05*G6_;
    A[2337] = -2.00892857142864e-05*G6_;
    A[2338] = -2.00892857142864e-05*G6_;
    A[2339] = -2.67857142857152e-05*G6_;
    A[2340] = -0.00494791666666666*G7_0 - 0.00494791666666678*G7_1;
    A[2341] = 0.0235491071428577*G7_0;
    A[2342] = -0.0136532738095241*G7_1;
    A[2343] = 0.16741071428572*G7_0 + 0.114397321428575*G7_1;
    A[2344] = 0.12555803571429*G7_0 + 0.18787202380953*G7_1;
    A[2345] = -0.00930059523809561*G7_0 + 0.0111607142857149*G7_1;
    A[2346] = -0.0511532738095258*G7_0 - 0.0437127976190499*G7_1;
    A[2347] = 0.0186011904761909*G7_0 + 0.00930059523809539*G7_1;
    A[2348] = 0.0139508928571437*G7_0;
    A[2349] = 0.00930059523809489*G7_0;
    A[2350] = 0.0511532738095258*G7_0 + 0.00930059523809625*G7_1;
    A[2351] = 0.0251116071428572*G7_0 + 0.0344122023809524*G7_1;
    A[2352] = -0.0437127976190477*G7_0 - 0.0669642857142869*G7_1;
    A[2353] = 0.0306919642857137*G7_0 + 0.0539434523809536*G7_1;
    A[2354] = -0.0306919642857145*G7_0 - 0.114397321428575*G7_1;
    A[2355] = -0.0465029761904763*G7_0 - 0.00930059523809431*G7_1;
    A[2356] = 0.0279017857142837*G7_1;
    A[2357] = -0.139508928571432*G7_0 - 0.241815476190481*G7_1;
    A[2358] = 0.0697544642857157*G7_0 + 0.027901785714286*G7_1;
    A[2359] = -0.209263392857149*G7_0 + 0.0279017857142866*G7_1;
    A[2360] = -0.00930059523809545*G7_1;
    A[2361] = -0.00494791666666666*G8_0 - 0.00494791666666678*G8_1;
    A[2362] = 0.0235491071428577*G8_0;
    A[2363] = -0.0136532738095241*G8_1;
    A[2364] = 0.16741071428572*G8_0 + 0.114397321428575*G8_1;
    A[2365] = 0.12555803571429*G8_0 + 0.18787202380953*G8_1;
    A[2366] = -0.00930059523809561*G8_0 + 0.0111607142857149*G8_1;
    A[2367] = -0.0511532738095258*G8_0 - 0.0437127976190499*G8_1;
    A[2368] = 0.0186011904761909*G8_0 + 0.00930059523809539*G8_1;
    A[2369] = 0.0139508928571437*G8_0;
    A[2370] = 0.00930059523809489*G8_0;
    A[2371] = 0.0511532738095258*G8_0 + 0.00930059523809625*G8_1;
    A[2372] = 0.0251116071428572*G8_0 + 0.0344122023809524*G8_1;
    A[2373] = -0.0437127976190477*G8_0 - 0.0669642857142869*G8_1;
    A[2374] = 0.0306919642857137*G8_0 + 0.0539434523809536*G8_1;
    A[2375] = -0.0306919642857145*G8_0 - 0.114397321428575*G8_1;
    A[2376] = -0.0465029761904763*G8_0 - 0.00930059523809431*G8_1;
    A[2377] = 0.0279017857142837*G8_1;
    A[2378] = -0.139508928571432*G8_0 - 0.241815476190481*G8_1;
    A[2379] = 0.0697544642857157*G8_0 + 0.027901785714286*G8_1;
    A[2380] = -0.209263392857149*G8_0 + 0.0279017857142866*G8_1;
    A[2381] = -0.00930059523809545*G8_1;
    A[2382] = -2.00892857142864e-05*G6_;
    A[2383] = -1.33928571428576e-05*G6_;
    A[2384] = 0.0;
    A[2385] = -0.000401785714285728*G6_;
    A[2386] = 0.000140625000000005*G6_;
    A[2387] = 4.01785714285728e-05*G6_;
    A[2388] = 0.000100446428571432*G6_;
    A[2389] = 0.000100446428571432*G6_;
    A[2390] = -0.000200892857142864*G6_;
    A[2391] = -0.000120535714285718*G6_;
    A[2392] = -0.0049479166666668*G7_0 - 0.00494791666666691*G7_1;
    A[2393] = -0.0136532738095242*G7_0;
    A[2394] = 0.0235491071428578*G7_1;
    A[2395] = -0.043712797619049*G7_0 - 0.0511532738095255*G7_1;
    A[2396] = 0.011160714285715*G7_0 - 0.00930059523809507*G7_1;
    A[2397] = 0.18787202380953*G7_0 + 0.125558035714289*G7_1;
    A[2398] = 0.114397321428576*G7_0 + 0.167410714285721*G7_1;
    A[2399] = 0.0344122023809531*G7_0 + 0.0251116071428579*G7_1;
    A[2400] = -0.0669642857142873*G7_0 - 0.0437127976190489*G7_1;
    A[2401] = 0.0539434523809543*G7_0 + 0.0306919642857157*G7_1;
    A[2402] = -0.114397321428576*G7_0 - 0.0306919642857154*G7_1;
    A[2403] = 0.00930059523809532*G7_0 + 0.0186011904761909*G7_1;
    A[2404] = 0.0139508928571435*G7_1;
    A[2405] = 0.00930059523809558*G7_1;
    A[2406] = 0.00930059523809539*G7_0 + 0.0511532738095258*G7_1;
    A[2407] = -0.00930059523809477*G7_0 - 0.0465029761904776*G7_1;
    A[2408] = 0.0279017857142867*G7_0 + 0.0697544642857171*G7_1;
    A[2409] = -0.00930059523809584*G7_0;
    A[2410] = 0.0279017857142855*G7_0;
    A[2411] = 0.0279017857142868*G7_0 - 0.209263392857151*G7_1;
    A[2412] = -0.241815476190484*G7_0 - 0.139508928571432*G7_1;
    A[2413] = -0.0049479166666668*G8_0 - 0.00494791666666691*G8_1;
    A[2414] = -0.0136532738095242*G8_0;
    A[2415] = 0.0235491071428578*G8_1;
    A[2416] = -0.043712797619049*G8_0 - 0.0511532738095255*G8_1;
    A[2417] = 0.011160714285715*G8_0 - 0.00930059523809507*G8_1;
    A[2418] = 0.18787202380953*G8_0 + 0.125558035714289*G8_1;
    A[2419] = 0.114397321428576*G8_0 + 0.167410714285721*G8_1;
    A[2420] = 0.0344122023809531*G8_0 + 0.0251116071428579*G8_1;
    A[2421] = -0.0669642857142873*G8_0 - 0.0437127976190489*G8_1;
    A[2422] = 0.0539434523809543*G8_0 + 0.0306919642857157*G8_1;
    A[2423] = -0.114397321428576*G8_0 - 0.0306919642857154*G8_1;
    A[2424] = 0.00930059523809532*G8_0 + 0.0186011904761909*G8_1;
    A[2425] = 0.0139508928571435*G8_1;
    A[2426] = 0.00930059523809558*G8_1;
    A[2427] = 0.00930059523809539*G8_0 + 0.0511532738095258*G8_1;
    A[2428] = -0.00930059523809477*G8_0 - 0.0465029761904776*G8_1;
    A[2429] = 0.0279017857142867*G8_0 + 0.0697544642857171*G8_1;
    A[2430] = -0.00930059523809584*G8_0;
    A[2431] = 0.0279017857142855*G8_0;
    A[2432] = 0.0279017857142868*G8_0 - 0.209263392857151*G8_1;
    A[2433] = -0.241815476190484*G8_0 - 0.139508928571432*G8_1;
    A[2434] = -2.00892857142864e-05*G6_;
    A[2435] = 0.0;
    A[2436] = -1.33928571428576e-05*G6_;
    A[2437] = 0.000140625000000005*G6_;
    A[2438] = -0.000401785714285728*G6_;
    A[2439] = 0.000100446428571432*G6_;
    A[2440] = -0.000200892857142864*G6_;
    A[2441] = 4.01785714285728e-05*G6_;
    A[2442] = 0.000100446428571432*G6_;
    A[2443] = -0.000120535714285718*G6_;
    A[2444] = -0.0235491071428581*G7_0 - 0.0235491071428581*G7_1;
    A[2445] = 0.00494791666666689*G7_0;
    A[2446] = -0.0136532738095241*G7_1;
    A[2447] = -0.0186011904761911*G7_0 - 0.00930059523809516*G7_1;
    A[2448] = -0.0139508928571434*G7_0 - 0.0139508928571439*G7_1;
    A[2449] = -0.00930059523809504*G7_0 - 0.0093005952380948*G7_1;
    A[2450] = -0.0511532738095258*G7_0 - 0.0418526785714305*G7_1;
    A[2451] = -0.167410714285721*G7_0 - 0.053013392857145*G7_1;
    A[2452] = -0.12555803571429*G7_0 + 0.0623139880952409*G7_1;
    A[2453] = 0.00930059523809564*G7_0 + 0.0204613095238096*G7_1;
    A[2454] = 0.0511532738095258*G7_0 + 0.00744047619047682*G7_1;
    A[2455] = 0.0306919642857157*G7_0 - 0.08370535714286*G7_1;
    A[2456] = -0.0306919642857157*G7_0 + 0.0232514880952386*G7_1;
    A[2457] = 0.0437127976190495*G7_0 - 0.0232514880952387*G7_1;
    A[2458] = -0.0251116071428583*G7_0 + 0.00930059523809559*G7_1;
    A[2459] = 0.139508928571435*G7_0 - 0.102306547619051*G7_1;
    A[2460] = 0.0279017857142865*G7_1;
    A[2461] = 0.0465029761904776*G7_0 + 0.0372023809523825*G7_1;
    A[2462] = 0.20926339285715*G7_0 + 0.237165178571437*G7_1;
    A[2463] = -0.0697544642857167*G7_0 - 0.0418526785714311*G7_1;
    A[2464] = -0.00930059523809603*G7_1;
    A[2465] = -0.0235491071428581*G8_0 - 0.0235491071428581*G8_1;
    A[2466] = 0.00494791666666689*G8_0;
    A[2467] = -0.0136532738095241*G8_1;
    A[2468] = -0.0186011904761911*G8_0 - 0.00930059523809516*G8_1;
    A[2469] = -0.0139508928571434*G8_0 - 0.0139508928571439*G8_1;
    A[2470] = -0.00930059523809504*G8_0 - 0.0093005952380948*G8_1;
    A[2471] = -0.0511532738095258*G8_0 - 0.0418526785714305*G8_1;
    A[2472] = -0.167410714285721*G8_0 - 0.053013392857145*G8_1;
    A[2473] = -0.12555803571429*G8_0 + 0.0623139880952409*G8_1;
    A[2474] = 0.00930059523809564*G8_0 + 0.0204613095238096*G8_1;
    A[2475] = 0.0511532738095258*G8_0 + 0.00744047619047682*G8_1;
    A[2476] = 0.0306919642857157*G8_0 - 0.08370535714286*G8_1;
    A[2477] = -0.0306919642857157*G8_0 + 0.0232514880952386*G8_1;
    A[2478] = 0.0437127976190495*G8_0 - 0.0232514880952387*G8_1;
    A[2479] = -0.0251116071428583*G8_0 + 0.00930059523809559*G8_1;
    A[2480] = 0.139508928571435*G8_0 - 0.102306547619051*G8_1;
    A[2481] = 0.0279017857142865*G8_1;
    A[2482] = 0.0465029761904776*G8_0 + 0.0372023809523825*G8_1;
    A[2483] = 0.20926339285715*G8_0 + 0.237165178571437*G8_1;
    A[2484] = -0.0697544642857167*G8_0 - 0.0418526785714311*G8_1;
    A[2485] = -0.00930059523809603*G8_1;
    A[2486] = -1.33928571428576e-05*G6_;
    A[2487] = -2.00892857142864e-05*G6_;
    A[2488] = 0.0;
    A[2489] = 4.01785714285728e-05*G6_;
    A[2490] = 0.000100446428571432*G6_;
    A[2491] = -0.000401785714285728*G6_;
    A[2492] = 0.000140625000000005*G6_;
    A[2493] = -0.000200892857142864*G6_;
    A[2494] = 0.000100446428571432*G6_;
    A[2495] = -0.000120535714285718*G6_;
    A[2496] = 0.0136532738095244*G7_0 + 0.0136532738095242*G7_1;
    A[2497] = 0.00494791666666684*G7_0;
    A[2498] = 0.0235491071428578*G7_1;
    A[2499] = -0.0344122023809536*G7_0 - 0.0093005952380958*G7_1;
    A[2500] = 0.0669642857142883*G7_0 + 0.0232514880952394*G7_1;
    A[2501] = -0.0539434523809543*G7_0 - 0.0232514880952393*G7_1;
    A[2502] = 0.114397321428576*G7_0 + 0.0837053571428604*G7_1;
    A[2503] = 0.0437127976190494*G7_0 - 0.00744047619047603*G7_1;
    A[2504] = -0.0111607142857154*G7_0 - 0.0204613095238109*G7_1;
    A[2505] = -0.187872023809529*G7_0 - 0.0623139880952395*G7_1;
    A[2506] = -0.114397321428576*G7_0 + 0.0530133928571446*G7_1;
    A[2507] = -0.0093005952380957*G7_0 + 0.0418526785714297*G7_1;
    A[2508] = 0.00930059523809584*G7_1;
    A[2509] = 0.0139508928571431*G7_1;
    A[2510] = -0.00930059523809535*G7_0 + 0.0093005952380961*G7_1;
    A[2511] = 0.00930059523809492*G7_0 + 0.00930059523809527*G7_1;
    A[2512] = -0.0279017857142861*G7_0 + 0.0418526785714303*G7_1;
    A[2513] = 0.0093005952380956*G7_0 - 0.0372023809523826*G7_1;
    A[2514] = -0.0279017857142852*G7_0 - 0.237165178571436*G7_1;
    A[2515] = -0.0279017857142877*G7_0 - 0.0279017857142878*G7_1;
    A[2516] = 0.241815476190483*G7_0 + 0.102306547619051*G7_1;
    A[2517] = 0.0136532738095244*G8_0 + 0.0136532738095242*G8_1;
    A[2518] = 0.00494791666666684*G8_0;
    A[2519] = 0.0235491071428578*G8_1;
    A[2520] = -0.0344122023809536*G8_0 - 0.0093005952380958*G8_1;
    A[2521] = 0.0669642857142883*G8_0 + 0.0232514880952394*G8_1;
    A[2522] = -0.0539434523809543*G8_0 - 0.0232514880952393*G8_1;
    A[2523] = 0.114397321428576*G8_0 + 0.0837053571428604*G8_1;
    A[2524] = 0.0437127976190494*G8_0 - 0.00744047619047603*G8_1;
    A[2525] = -0.0111607142857154*G8_0 - 0.0204613095238109*G8_1;
    A[2526] = -0.187872023809529*G8_0 - 0.0623139880952395*G8_1;
    A[2527] = -0.114397321428576*G8_0 + 0.0530133928571446*G8_1;
    A[2528] = -0.0093005952380957*G8_0 + 0.0418526785714297*G8_1;
    A[2529] = 0.00930059523809584*G8_1;
    A[2530] = 0.0139508928571431*G8_1;
    A[2531] = -0.00930059523809535*G8_0 + 0.0093005952380961*G8_1;
    A[2532] = 0.00930059523809492*G8_0 + 0.00930059523809527*G8_1;
    A[2533] = -0.0279017857142861*G8_0 + 0.0418526785714303*G8_1;
    A[2534] = 0.0093005952380956*G8_0 - 0.0372023809523826*G8_1;
    A[2535] = -0.0279017857142852*G8_0 - 0.237165178571436*G8_1;
    A[2536] = -0.0279017857142877*G8_0 - 0.0279017857142878*G8_1;
    A[2537] = 0.241815476190483*G8_0 + 0.102306547619051*G8_1;
    A[2538] = 0.0;
    A[2539] = -2.00892857142864e-05*G6_;
    A[2540] = -1.33928571428577e-05*G6_;
    A[2541] = 0.000100446428571432*G6_;
    A[2542] = -0.000200892857142864*G6_;
    A[2543] = 0.000140625000000005*G6_;
    A[2544] = -0.000401785714285728*G6_;
    A[2545] = 0.000100446428571432*G6_;
    A[2546] = 4.01785714285728e-05*G6_;
    A[2547] = -0.000120535714285718*G6_;
    A[2548] = -0.0235491071428582*G7_0 - 0.023549107142858*G7_1;
    A[2549] = -0.0136532738095242*G7_0;
    A[2550] = 0.00494791666666707*G7_1;
    A[2551] = -0.0418526785714295*G7_0 - 0.0511532738095248*G7_1;
    A[2552] = -0.00930059523809587*G7_0 - 0.00930059523809657*G7_1;
    A[2553] = -0.0139508928571432*G7_0 - 0.0139508928571425*G7_1;
    A[2554] = -0.00930059523809572*G7_0 - 0.0186011904761919*G7_1;
    A[2555] = -0.0837053571428601*G7_0 + 0.0306919642857149*G7_1;
    A[2556] = 0.0232514880952388*G7_0 - 0.0306919642857148*G7_1;
    A[2557] = -0.0232514880952392*G7_0 + 0.0437127976190489*G7_1;
    A[2558] = 0.00930059523809575*G7_0 - 0.0251116071428579*G7_1;
    A[2559] = -0.0530133928571445*G7_0 - 0.16741071428572*G7_1;
    A[2560] = 0.0623139880952405*G7_0 - 0.125558035714291*G7_1;
    A[2561] = 0.0204613095238103*G7_0 + 0.00930059523809559*G7_1;
    A[2562] = 0.00744047619047617*G7_0 + 0.0511532738095255*G7_1;
    A[2563] = -0.102306547619051*G7_0 + 0.139508928571434*G7_1;
    A[2564] = 0.237165178571437*G7_0 + 0.209263392857151*G7_1;
    A[2565] = -0.0093005952380965*G7_0;
    A[2566] = 0.0279017857142867*G7_0;
    A[2567] = -0.0418526785714296*G7_0 - 0.0697544642857184*G7_1;
    A[2568] = 0.0372023809523824*G7_0 + 0.0465029761904783*G7_1;
    A[2569] = -0.0235491071428582*G8_0 - 0.023549107142858*G8_1;
    A[2570] = -0.0136532738095242*G8_0;
    A[2571] = 0.00494791666666707*G8_1;
    A[2572] = -0.0418526785714295*G8_0 - 0.0511532738095248*G8_1;
    A[2573] = -0.00930059523809587*G8_0 - 0.00930059523809657*G8_1;
    A[2574] = -0.0139508928571432*G8_0 - 0.0139508928571425*G8_1;
    A[2575] = -0.00930059523809572*G8_0 - 0.0186011904761919*G8_1;
    A[2576] = -0.0837053571428601*G8_0 + 0.0306919642857149*G8_1;
    A[2577] = 0.0232514880952388*G8_0 - 0.0306919642857148*G8_1;
    A[2578] = -0.0232514880952392*G8_0 + 0.0437127976190489*G8_1;
    A[2579] = 0.00930059523809575*G8_0 - 0.0251116071428579*G8_1;
    A[2580] = -0.0530133928571445*G8_0 - 0.16741071428572*G8_1;
    A[2581] = 0.0623139880952405*G8_0 - 0.125558035714291*G8_1;
    A[2582] = 0.0204613095238103*G8_0 + 0.00930059523809559*G8_1;
    A[2583] = 0.00744047619047617*G8_0 + 0.0511532738095255*G8_1;
    A[2584] = -0.102306547619051*G8_0 + 0.139508928571434*G8_1;
    A[2585] = 0.237165178571437*G8_0 + 0.209263392857151*G8_1;
    A[2586] = -0.0093005952380965*G8_0;
    A[2587] = 0.0279017857142867*G8_0;
    A[2588] = -0.0418526785714296*G8_0 - 0.0697544642857184*G8_1;
    A[2589] = 0.0372023809523824*G8_0 + 0.0465029761904783*G8_1;
    A[2590] = -1.33928571428576e-05*G6_;
    A[2591] = 0.0;
    A[2592] = -2.00892857142864e-05*G6_;
    A[2593] = 0.000100446428571432*G6_;
    A[2594] = 4.01785714285728e-05*G6_;
    A[2595] = -0.000200892857142864*G6_;
    A[2596] = 0.000100446428571432*G6_;
    A[2597] = -0.000401785714285728*G6_;
    A[2598] = 0.000140625000000005*G6_;
    A[2599] = -0.000120535714285719*G6_;
    A[2600] = 0.0136532738095245*G7_0 + 0.0136532738095244*G7_1;
    A[2601] = 0.0235491071428579*G7_0;
    A[2602] = 0.00494791666666703*G7_1;
    A[2603] = 0.0837053571428597*G7_0 + 0.114397321428575*G7_1;
    A[2604] = -0.0232514880952393*G7_0 - 0.0539434523809554*G7_1;
    A[2605] = 0.0232514880952392*G7_0 + 0.0669642857142892*G7_1;
    A[2606] = -0.00930059523809557*G7_0 - 0.0344122023809546*G7_1;
    A[2607] = 0.0418526785714296*G7_0 - 0.009300595238096*G7_1;
    A[2608] = 0.00930059523809594*G7_0;
    A[2609] = 0.0139508928571431*G7_0;
    A[2610] = 0.00930059523809555*G7_0 - 0.00930059523809489*G7_1;
    A[2611] = -0.00744047619047665*G7_0 + 0.0437127976190483*G7_1;
    A[2612] = -0.02046130952381*G7_0 - 0.0111607142857148*G7_1;
    A[2613] = -0.062313988095241*G7_0 - 0.187872023809531*G7_1;
    A[2614] = 0.0530133928571453*G7_0 - 0.114397321428575*G7_1;
    A[2615] = 0.0093005952380959*G7_0 + 0.00930059523809634*G7_1;
    A[2616] = -0.237165178571437*G7_0 - 0.0279017857142867*G7_1;
    A[2617] = 0.102306547619052*G7_0 + 0.241815476190487*G7_1;
    A[2618] = 0.0418526785714293*G7_0 - 0.0279017857142874*G7_1;
    A[2619] = -0.027901785714286*G7_0 - 0.027901785714288*G7_1;
    A[2620] = -0.0372023809523822*G7_0 + 0.00930059523809578*G7_1;
    A[2621] = 0.0136532738095245*G8_0 + 0.0136532738095244*G8_1;
    A[2622] = 0.0235491071428579*G8_0;
    A[2623] = 0.00494791666666703*G8_1;
    A[2624] = 0.0837053571428597*G8_0 + 0.114397321428575*G8_1;
    A[2625] = -0.0232514880952393*G8_0 - 0.0539434523809554*G8_1;
    A[2626] = 0.0232514880952392*G8_0 + 0.0669642857142892*G8_1;
    A[2627] = -0.00930059523809557*G8_0 - 0.0344122023809546*G8_1;
    A[2628] = 0.0418526785714296*G8_0 - 0.009300595238096*G8_1;
    A[2629] = 0.00930059523809594*G8_0;
    A[2630] = 0.0139508928571431*G8_0;
    A[2631] = 0.00930059523809555*G8_0 - 0.00930059523809489*G8_1;
    A[2632] = -0.00744047619047665*G8_0 + 0.0437127976190483*G8_1;
    A[2633] = -0.02046130952381*G8_0 - 0.0111607142857148*G8_1;
    A[2634] = -0.062313988095241*G8_0 - 0.187872023809531*G8_1;
    A[2635] = 0.0530133928571453*G8_0 - 0.114397321428575*G8_1;
    A[2636] = 0.0093005952380959*G8_0 + 0.00930059523809634*G8_1;
    A[2637] = -0.237165178571437*G8_0 - 0.0279017857142867*G8_1;
    A[2638] = 0.102306547619052*G8_0 + 0.241815476190487*G8_1;
    A[2639] = 0.0418526785714293*G8_0 - 0.0279017857142874*G8_1;
    A[2640] = -0.027901785714286*G8_0 - 0.027901785714288*G8_1;
    A[2641] = -0.0372023809523822*G8_0 + 0.00930059523809578*G8_1;
    A[2642] = 0.0;
    A[2643] = -1.33928571428578e-05*G6_;
    A[2644] = -2.00892857142864e-05*G6_;
    A[2645] = -0.000200892857142864*G6_;
    A[2646] = 0.000100446428571432*G6_;
    A[2647] = 0.000100446428571432*G6_;
    A[2648] = 4.01785714285728e-05*G6_;
    A[2649] = 0.000140625000000005*G6_;
    A[2650] = -0.000401785714285728*G6_;
    A[2651] = -0.000120535714285718*G6_;
    A[2652] = 0.00751488095238122*G7_0 + 0.00751488095238094*G7_1;
    A[2653] = -0.00751488095238122*G7_0;
    A[2654] = -0.00751488095238091*G7_1;
    A[2655] = 0.0799851190476219*G7_0 + 0.0241815476190486*G7_1;
    A[2656] = 0.022321428571429*G7_0 + 0.0967261904761925*G7_1;
    A[2657] = 0.0967261904761937*G7_0 + 0.0223214285714307*G7_1;
    A[2658] = 0.0241815476190488*G7_0 + 0.0799851190476199*G7_1;
    A[2659] = -0.0799851190476227*G7_0 - 0.0558035714285738*G7_1;
    A[2660] = -0.0223214285714294*G7_0 + 0.0744047619047666*G7_1;
    A[2661] = -0.0967261904761941*G7_0 - 0.0744047619047655*G7_1;
    A[2662] = -0.0241815476190488*G7_0 + 0.0558035714285755*G7_1;
    A[2663] = -0.0558035714285736*G7_0 - 0.0799851190476239*G7_1;
    A[2664] = 0.0744047619047655*G7_0 - 0.0223214285714287*G7_1;
    A[2665] = -0.0744047619047659*G7_0 - 0.0967261904761945*G7_1;
    A[2666] = 0.0558035714285741*G7_0 - 0.024181547619047*G7_1;
    A[2667] = -0.0930059523809543*G7_0 - 0.0930059523809561*G7_1;
    A[2668] = -0.279017857142867*G7_1;
    A[2669] = 0.0930059523809546*G7_0;
    A[2670] = -0.279017857142868*G7_0;
    A[2671] = 0.279017857142868*G7_0 + 0.279017857142862*G7_1;
    A[2672] = 0.0930059523809559*G7_1;
    A[2673] = 0.00751488095238122*G8_0 + 0.00751488095238094*G8_1;
    A[2674] = -0.00751488095238122*G8_0;
    A[2675] = -0.00751488095238091*G8_1;
    A[2676] = 0.0799851190476219*G8_0 + 0.0241815476190486*G8_1;
    A[2677] = 0.022321428571429*G8_0 + 0.0967261904761925*G8_1;
    A[2678] = 0.0967261904761937*G8_0 + 0.0223214285714307*G8_1;
    A[2679] = 0.0241815476190488*G8_0 + 0.0799851190476199*G8_1;
    A[2680] = -0.0799851190476227*G8_0 - 0.0558035714285738*G8_1;
    A[2681] = -0.0223214285714294*G8_0 + 0.0744047619047666*G8_1;
    A[2682] = -0.0967261904761941*G8_0 - 0.0744047619047655*G8_1;
    A[2683] = -0.0241815476190488*G8_0 + 0.0558035714285755*G8_1;
    A[2684] = -0.0558035714285736*G8_0 - 0.0799851190476239*G8_1;
    A[2685] = 0.0744047619047655*G8_0 - 0.0223214285714287*G8_1;
    A[2686] = -0.0744047619047659*G8_0 - 0.0967261904761945*G8_1;
    A[2687] = 0.0558035714285741*G8_0 - 0.024181547619047*G8_1;
    A[2688] = -0.0930059523809543*G8_0 - 0.0930059523809561*G8_1;
    A[2689] = -0.279017857142867*G8_1;
    A[2690] = 0.0930059523809546*G8_0;
    A[2691] = -0.279017857142868*G8_0;
    A[2692] = 0.279017857142868*G8_0 + 0.279017857142862*G8_1;
    A[2693] = 0.0930059523809559*G8_1;
    A[2694] = -2.67857142857153e-05*G6_;
    A[2695] = -2.67857142857153e-05*G6_;
    A[2696] = -2.67857142857152e-05*G6_;
    A[2697] = -0.000120535714285718*G6_;
    A[2698] = -0.000120535714285718*G6_;
    A[2699] = -0.000120535714285718*G6_;
    A[2700] = -0.000120535714285718*G6_;
    A[2701] = -0.000120535714285719*G6_;
    A[2702] = -0.000120535714285718*G6_;
    A[2703] = -0.00144642857142862*G6_;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "9603e2c1ae2dbc8aad90d0f35091b81548d10cf1d52ada54f52a98d1bd9f19cfff2d40fdb8c52cbd36119301346411dbc24d19238e0491424baccf54f06d24c4";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 0;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_dofmap_3();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_1b96d7522823c14e084ae0fb9b8b8b3773762ca0_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
